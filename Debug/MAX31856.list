
MAX31856.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08005290  08005290  00006290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005724  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001d4  080058f8  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080058f8  00007414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d483  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002485  00000000  00000000  00014680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00016b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000903  00000000  00000000  00017480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001860e  00000000  00000000  00017d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed70  00000000  00000000  00030391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cb2  00000000  00000000  0003f101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000c5df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000059d5  00000000  00000000  000c87ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000ce1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005274 	.word	0x08005274

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005274 	.word	0x08005274

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	2410      	movs	r4, #16
{
 8000f96:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	4622      	mov	r2, r4
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	eb0d 0004 	add.w	r0, sp, r4
 8000fa0:	f002 fb80 	bl	80036a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fa6:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8001030 <MX_GPIO_Init+0xa0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX31856_CS_GPIO_Port, MAX31856_CS_Pin, GPIO_PIN_RESET);
 8000fac:	4d21      	ldr	r5, [pc, #132]	@ (8001034 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4322      	orrs	r2, r4
 8000fb0:	619a      	str	r2, [r3, #24]
 8000fb2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb4:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4022      	ands	r2, r4
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	619a      	str	r2, [r3, #24]
 8000fc8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	f002 0220 	and.w	r2, r2, #32
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	f042 0204 	orr.w	r2, r2, #4
 8000fde:	619a      	str	r2, [r3, #24]
 8000fe0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fec:	f000 fbe6 	bl	80017bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAX31856_CS_GPIO_Port, MAX31856_CS_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f000 fbe1 	bl	80017bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001000:	4648      	mov	r0, r9
 8001002:	eb0d 0104 	add.w	r1, sp, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800100e:	f000 fb01 	bl	8001614 <HAL_GPIO_Init>
  /*Configure GPIO pin : MAX31856_CS_Pin */
  GPIO_InitStruct.Pin = MAX31856_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MAX31856_CS_GPIO_Port, &GPIO_InitStruct);
 8001012:	4628      	mov	r0, r5
 8001014:	eb0d 0104 	add.w	r1, sp, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	e9cd 4804 	strd	r4, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(MAX31856_CS_GPIO_Port, &GPIO_InitStruct);
 8001020:	f000 faf8 	bl	8001614 <HAL_GPIO_Init>

}
 8001024:	b009      	add	sp, #36	@ 0x24
 8001026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	40011000 	.word	0x40011000
 8001034:	40010800 	.word	0x40010800

08001038 <platform_spi_write_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
 * @brief SPI communication for MAX31856
 */
max31856_status_t platform_spi_write_read(MAX31856_Handle_t *hmax, uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 8001038:	b507      	push	{r0, r1, r2, lr}
    if (HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, 1000) == HAL_OK) {
 800103a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800103e:	9000      	str	r0, [sp, #0]
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <platform_spi_write_read+0x1c>)
 8001042:	f000 ff0f 	bl	8001e64 <HAL_SPI_TransmitReceive>
 8001046:	3800      	subs	r0, #0
 8001048:	bf18      	it	ne
 800104a:	2001      	movne	r0, #1
        return MAX31856_OK;
    }
    return MAX31856_TIMEOUT;
}
 800104c:	0040      	lsls	r0, r0, #1
 800104e:	b003      	add	sp, #12
 8001050:	f85d fb04 	ldr.w	pc, [sp], #4
 8001054:	20000220 	.word	0x20000220

08001058 <platform_cs_low>:

/**
 * @brief Set CS pin low
 */
void platform_cs_low(MAX31856_Handle_t *hmax) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2110      	movs	r1, #16
 800105c:	4801      	ldr	r0, [pc, #4]	@ (8001064 <platform_cs_low+0xc>)
 800105e:	f000 bbad 	b.w	80017bc <HAL_GPIO_WritePin>
 8001062:	bf00      	nop
 8001064:	40010800 	.word	0x40010800

08001068 <platform_cs_high>:

/**
 * @brief Set CS pin high
 */
void platform_cs_high(MAX31856_Handle_t *hmax) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2110      	movs	r1, #16
 800106c:	4801      	ldr	r0, [pc, #4]	@ (8001074 <platform_cs_high+0xc>)
 800106e:	f000 bba5 	b.w	80017bc <HAL_GPIO_WritePin>
 8001072:	bf00      	nop
 8001074:	40010800 	.word	0x40010800

08001078 <platform_delay_ms>:

/**
 * @brief Delay function
 */
void platform_delay_ms(uint32_t ms) {
    HAL_Delay(ms);
 8001078:	f000 ba64 	b.w	8001544 <HAL_Delay>

0800107c <_write>:
}

/**
 * @brief Redirect printf to UART
 */
int _write(int file, char *ptr, int len) {
 800107c:	b510      	push	{r4, lr}
 800107e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 1000);
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	b292      	uxth	r2, r2
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <_write+0x14>)
 8001088:	f001 f8b1 	bl	80021ee <HAL_UART_Transmit>
    return len;
}
 800108c:	4620      	mov	r0, r4
 800108e:	bd10      	pop	{r4, pc}
 8001090:	2000027c 	.word	0x2000027c

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001098:	2214      	movs	r2, #20
 800109a:	2100      	movs	r1, #0
 800109c:	a808      	add	r0, sp, #32
 800109e:	f002 fb01 	bl	80036a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a2:	2214      	movs	r2, #20
 80010a4:	2100      	movs	r1, #0
 80010a6:	a801      	add	r0, sp, #4
 80010a8:	f002 fafc 	bl	80036a4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b2:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b4:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010c4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f000 fb7f 	bl	80017c8 <HAL_RCC_OscConfig>
 80010ca:	b108      	cbz	r0, 80010d0 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ce:	e7fe      	b.n	80010ce <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	4621      	mov	r1, r4
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f000 fd32 	bl	8001b4c <HAL_RCC_ClockConfig>
 80010e8:	b108      	cbz	r0, 80010ee <SystemClock_Config+0x5a>
 80010ea:	b672      	cpsid	i
  while (1)
 80010ec:	e7fe      	b.n	80010ec <SystemClock_Config+0x58>
}
 80010ee:	b010      	add	sp, #64	@ 0x40
 80010f0:	bd10      	pop	{r4, pc}
	...

080010f4 <main>:
{
 80010f4:	b500      	push	{lr}
   max31856_platform_t platform = {
 80010f6:	4d37      	ldr	r5, [pc, #220]	@ (80011d4 <main+0xe0>)
{
 80010f8:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 80010fa:	f000 f9ff 	bl	80014fc <HAL_Init>
   max31856_platform_t platform = {
 80010fe:	ac05      	add	r4, sp, #20
  SystemClock_Config();
 8001100:	f7ff ffc8 	bl	8001094 <SystemClock_Config>
  MX_GPIO_Init();
 8001104:	f7ff ff44 	bl	8000f90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001108:	f000 f880 	bl	800120c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800110c:	f000 f954 	bl	80013b8 <MX_USART1_UART_Init>
  printf("\r\n=== MAX31856 Simple Example ===\r\n");
 8001110:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <main+0xe4>)
 8001112:	f002 f9e7 	bl	80034e4 <puts>
   max31856_platform_t platform = {
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	682b      	ldr	r3, [r5, #0]
   if (MAX31856_Init(&tc_sensor, &platform, NULL, 0, MAX31856_TC_TYPE_K) == MAX31856_OK) {
 800111c:	482f      	ldr	r0, [pc, #188]	@ (80011dc <main+0xe8>)
   max31856_platform_t platform = {
 800111e:	6023      	str	r3, [r4, #0]
   if (MAX31856_Init(&tc_sensor, &platform, NULL, 0, MAX31856_TC_TYPE_K) == MAX31856_OK) {
 8001120:	2303      	movs	r3, #3
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	a905      	add	r1, sp, #20
 8001128:	461a      	mov	r2, r3
 800112a:	f001 fa8d 	bl	8002648 <MAX31856_Init>
 800112e:	2800      	cmp	r0, #0
 8001130:	d144      	bne.n	80011bc <main+0xc8>
       printf("MAX31856 initialized successfully!\r\n");
 8001132:	482b      	ldr	r0, [pc, #172]	@ (80011e0 <main+0xec>)
 8001134:	f002 f9d6 	bl	80034e4 <puts>
   MAX31856_SetOCFault(&tc_sensor, MAX31856_OCFAULT_10MS);
 8001138:	2101      	movs	r1, #1
 800113a:	4828      	ldr	r0, [pc, #160]	@ (80011dc <main+0xe8>)
 800113c:	f001 f98e 	bl	800245c <MAX31856_SetOCFault>
   printf("Ready to measure temperature...\r\n\r\n");
 8001140:	4828      	ldr	r0, [pc, #160]	@ (80011e4 <main+0xf0>)
 8001142:	f002 f9cf 	bl	80034e4 <puts>
	if (MAX31856_ReadTemperature(&tc_sensor, &tc_temp) == MAX31856_OK) {
 8001146:	4c25      	ldr	r4, [pc, #148]	@ (80011dc <main+0xe8>)
		printf("TC: Error");
 8001148:	4d27      	ldr	r5, [pc, #156]	@ (80011e8 <main+0xf4>)
		printf("TC: %.2f C", tc_temp);
 800114a:	4e28      	ldr	r6, [pc, #160]	@ (80011ec <main+0xf8>)
	if (MAX31856_ReadTemperature(&tc_sensor, &tc_temp) == MAX31856_OK) {
 800114c:	4620      	mov	r0, r4
 800114e:	a903      	add	r1, sp, #12
 8001150:	f001 fb38 	bl	80027c4 <MAX31856_ReadTemperature>
 8001154:	bbb0      	cbnz	r0, 80011c4 <main+0xd0>
		printf("TC: %.2f C", tc_temp);
 8001156:	9803      	ldr	r0, [sp, #12]
 8001158:	f7ff f966 	bl	8000428 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4630      	mov	r0, r6
 8001162:	f002 f957 	bl	8003414 <iprintf>
	if (MAX31856_ReadCJTemperature(&tc_sensor, &cj_temp) == MAX31856_OK) {
 8001166:	4620      	mov	r0, r4
 8001168:	a904      	add	r1, sp, #16
 800116a:	f001 fb5c 	bl	8002826 <MAX31856_ReadCJTemperature>
 800116e:	bb68      	cbnz	r0, 80011cc <main+0xd8>
		printf(", CJ: %.2f C", cj_temp);
 8001170:	9804      	ldr	r0, [sp, #16]
 8001172:	f7ff f959 	bl	8000428 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <main+0xfc>)
 800117c:	f002 f94a 	bl	8003414 <iprintf>
	if (MAX31856_ReadFault(&tc_sensor, &fault) == MAX31856_OK && fault != 0) {
 8001180:	4620      	mov	r0, r4
 8001182:	f10d 010b 	add.w	r1, sp, #11
 8001186:	f001 f8ae 	bl	80022e6 <MAX31856_ReadFault>
 800118a:	b978      	cbnz	r0, 80011ac <main+0xb8>
 800118c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001190:	b161      	cbz	r1, 80011ac <main+0xb8>
		printf(", Fault: 0x%02X", fault);
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <main+0x100>)
 8001194:	f002 f93e 	bl	8003414 <iprintf>
	if (fault & MAX31856_FAULT_OPEN) {
 8001198:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800119c:	07db      	lsls	r3, r3, #31
 800119e:	d502      	bpl.n	80011a6 <main+0xb2>
		printf(" (OPEN!)");
 80011a0:	4815      	ldr	r0, [pc, #84]	@ (80011f8 <main+0x104>)
 80011a2:	f002 f937 	bl	8003414 <iprintf>
		MAX31856_ClearFault(&tc_sensor);
 80011a6:	4620      	mov	r0, r4
 80011a8:	f001 fa2e 	bl	8002608 <MAX31856_ClearFault>
	printf("\r\n");
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <main+0x108>)
 80011ae:	f002 f999 	bl	80034e4 <puts>
	HAL_Delay(2000); // Update every 2 seconds
 80011b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011b6:	f000 f9c5 	bl	8001544 <HAL_Delay>
  {
 80011ba:	e7c7      	b.n	800114c <main+0x58>
       printf("MAX31856 initialization failed!\r\n");
 80011bc:	4810      	ldr	r0, [pc, #64]	@ (8001200 <main+0x10c>)
 80011be:	f002 f991 	bl	80034e4 <puts>
       while(1); // Stop here if init fails
 80011c2:	e7fe      	b.n	80011c2 <main+0xce>
		printf("TC: Error");
 80011c4:	4628      	mov	r0, r5
 80011c6:	f002 f925 	bl	8003414 <iprintf>
 80011ca:	e7cc      	b.n	8001166 <main+0x72>
		printf(", CJ: Error");
 80011cc:	480d      	ldr	r0, [pc, #52]	@ (8001204 <main+0x110>)
 80011ce:	f002 f921 	bl	8003414 <iprintf>
 80011d2:	e7d5      	b.n	8001180 <main+0x8c>
 80011d4:	08005290 	.word	0x08005290
 80011d8:	080052a4 	.word	0x080052a4
 80011dc:	200001f0 	.word	0x200001f0
 80011e0:	080052c7 	.word	0x080052c7
 80011e4:	080052eb 	.word	0x080052eb
 80011e8:	0800533a 	.word	0x0800533a
 80011ec:	0800532f 	.word	0x0800532f
 80011f0:	08005344 	.word	0x08005344
 80011f4:	0800535d 	.word	0x0800535d
 80011f8:	0800536d 	.word	0x0800536d
 80011fc:	0800530c 	.word	0x0800530c
 8001200:	0800530e 	.word	0x0800530e
 8001204:	08005351 	.word	0x08005351

08001208 <Error_Handler>:
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <Error_Handler+0x2>

0800120c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800120c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001212:	480e      	ldr	r0, [pc, #56]	@ (800124c <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001214:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	2101      	movs	r1, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001218:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121c:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001220:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001222:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001226:	2218      	movs	r2, #24
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	e9c0 2307 	strd	r2, r3, [r0, #28]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001234:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCPolynomial = 10;
 8001236:	230a      	movs	r3, #10
 8001238:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123a:	f000 fdbb 	bl	8001db4 <HAL_SPI_Init>
 800123e:	b118      	cbz	r0, 8001248 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001244:	f7ff bfe0 	b.w	8001208 <Error_Handler>
}
 8001248:	bd08      	pop	{r3, pc}
 800124a:	bf00      	nop
 800124c:	20000220 	.word	0x20000220
 8001250:	40013000 	.word	0x40013000

08001254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001254:	b510      	push	{r4, lr}
 8001256:	4604      	mov	r4, r0
 8001258:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	2210      	movs	r2, #16
 800125c:	2100      	movs	r1, #0
 800125e:	a802      	add	r0, sp, #8
 8001260:	f002 fa20 	bl	80036a4 <memset>
  if(spiHandle->Instance==SPI1)
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_SPI_MspInit+0x6c>)
 8001268:	429a      	cmp	r2, r3
 800126a:	d126      	bne.n	80012ba <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001270:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001278:	619a      	str	r2, [r3, #24]
 800127a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001282:	9200      	str	r2, [sp, #0]
 8001284:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	f042 0204 	orr.w	r2, r2, #4
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f000 f9b6 	bl	8001614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2140      	movs	r1, #64	@ 0x40
 80012aa:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f000 f9ad 	bl	8001614 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012ba:	b006      	add	sp, #24
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40010800 	.word	0x40010800

080012c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_MspInit+0x3c>)
{
 80012ca:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	f002 0201 	and.w	r2, r2, #1
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012e4:	61da      	str	r2, [r3, #28]
 80012e6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012f2:	6853      	ldr	r3, [r2, #4]
 80012f4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	b002      	add	sp, #8
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler>

0800130e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler>

08001310 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler>

08001312 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler>

08001314 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler>

08001316 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 b900 	b.w	8001520 <HAL_IncTick>

08001320 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001320:	2001      	movs	r0, #1
 8001322:	4770      	bx	lr

08001324 <_kill>:

int _kill(int pid, int sig)
{
 8001324:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001326:	f002 fa1f 	bl	8003768 <__errno>
 800132a:	2316      	movs	r3, #22
 800132c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800132e:	f04f 30ff 	mov.w	r0, #4294967295
 8001332:	bd08      	pop	{r3, pc}

08001334 <_exit>:

void _exit (int status)
{
 8001334:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001336:	f002 fa17 	bl	8003768 <__errno>
 800133a:	2316      	movs	r3, #22
 800133c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800133e:	e7fe      	b.n	800133e <_exit+0xa>

08001340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	460d      	mov	r5, r1
 8001344:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	460e      	mov	r6, r1
 8001348:	1b73      	subs	r3, r6, r5
 800134a:	429c      	cmp	r4, r3
 800134c:	dc01      	bgt.n	8001352 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800134e:	4620      	mov	r0, r4
 8001350:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	e7f5      	b.n	8001348 <_read+0x8>

0800135c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001366:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001368:	604b      	str	r3, [r1, #4]
}
 800136a:	4770      	bx	lr

0800136c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800136c:	2001      	movs	r0, #1
 800136e:	4770      	bx	lr

08001370 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001370:	2000      	movs	r0, #0
 8001372:	4770      	bx	lr

08001374 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <_sbrk+0x30>)
{
 8001376:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001378:	6811      	ldr	r1, [r2, #0]
{
 800137a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800137c:	b909      	cbnz	r1, 8001382 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800137e:	490a      	ldr	r1, [pc, #40]	@ (80013a8 <_sbrk+0x34>)
 8001380:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	6810      	ldr	r0, [r2, #0]
 8001384:	4909      	ldr	r1, [pc, #36]	@ (80013ac <_sbrk+0x38>)
 8001386:	4c0a      	ldr	r4, [pc, #40]	@ (80013b0 <_sbrk+0x3c>)
 8001388:	4403      	add	r3, r0
 800138a:	1b09      	subs	r1, r1, r4
 800138c:	428b      	cmp	r3, r1
 800138e:	d906      	bls.n	800139e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001390:	f002 f9ea 	bl	8003768 <__errno>
 8001394:	230c      	movs	r3, #12
 8001396:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001398:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800139c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800139e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80013a0:	e7fc      	b.n	800139c <_sbrk+0x28>
 80013a2:	bf00      	nop
 80013a4:	20000278 	.word	0x20000278
 80013a8:	20000418 	.word	0x20000418
 80013ac:	20005000 	.word	0x20005000
 80013b0:	00000400 	.word	0x00000400

080013b4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	4770      	bx	lr
	...

080013b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013b8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80013ba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 80013be:	480a      	ldr	r0, [pc, #40]	@ (80013e8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <MX_USART1_UART_Init+0x34>)
 80013c2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	f000 fedb 	bl	8002190 <HAL_UART_Init>
 80013da:	b118      	cbz	r0, 80013e4 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013e0:	f7ff bf12 	b.w	8001208 <Error_Handler>
}
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	2000027c 	.word	0x2000027c
 80013ec:	40013800 	.word	0x40013800

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b510      	push	{r4, lr}
 80013f2:	4604      	mov	r4, r0
 80013f4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	2210      	movs	r2, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	a802      	add	r0, sp, #8
 80013fc:	f002 f952 	bl	80036a4 <memset>
  if(uartHandle->Instance==USART1)
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_UART_MspInit+0x70>)
 8001404:	429a      	cmp	r2, r3
 8001406:	d128      	bne.n	800145a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001408:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800140c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	4815      	ldr	r0, [pc, #84]	@ (8001464 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001410:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001414:	619a      	str	r2, [r3, #24]
 8001416:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800141a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800141e:	9200      	str	r2, [sp, #0]
 8001420:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	f042 0204 	orr.w	r2, r2, #4
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f000 f8e7 	bl	8001614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f000 f8dd 	bl	8001614 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800145a:	b006      	add	sp, #24
 800145c:	bd10      	pop	{r4, pc}
 800145e:	bf00      	nop
 8001460:	40013800 	.word	0x40013800
 8001464:	40010800 	.word	0x40010800

08001468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffa4 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800146e:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001470:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001484:	4c09      	ldr	r4, [pc, #36]	@ (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f002 f96f 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff fe2d 	bl	80010f4 <main>
  bx lr
 800149a:	4770      	bx	lr
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014a4:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 80014a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014ac:	20000414 	.word	0x20000414

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_InitTick+0x3c>)
{
 80014b8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_InitTick+0x40>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014cc:	f000 f88e 	bl	80015ec <HAL_SYSTICK_Config>
 80014d0:	4604      	mov	r4, r0
 80014d2:	b958      	cbnz	r0, 80014ec <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	2d0f      	cmp	r5, #15
 80014d6:	d809      	bhi.n	80014ec <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	4602      	mov	r2, r0
 80014da:	4629      	mov	r1, r5
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f854 	bl	800158c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4620      	mov	r0, r4
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_InitTick+0x44>)
 80014e8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e7fc      	b.n	80014ea <HAL_InitTick+0x36>
 80014f0:	20000004 	.word	0x20000004
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_Init+0x20>)
{
 80014fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	f000 f82d 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff ffd0 	bl	80014b4 <HAL_InitTick>
  HAL_MspInit();
 8001514:	f7ff fed8 	bl	80012c8 <HAL_MspInit>
}
 8001518:	2000      	movs	r0, #0
 800151a:	bd08      	pop	{r3, pc}
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001520:	4a03      	ldr	r2, [pc, #12]	@ (8001530 <HAL_IncTick+0x10>)
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <HAL_IncTick+0x14>)
 8001524:	6811      	ldr	r1, [r2, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	440b      	add	r3, r1
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200002c4 	.word	0x200002c4
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001538:	4b01      	ldr	r3, [pc, #4]	@ (8001540 <HAL_GetTick+0x8>)
 800153a:	6818      	ldr	r0, [r3, #0]
}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200002c4 	.word	0x200002c4

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fff6 	bl	8001538 <HAL_GetTick>
 800154c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001550:	bf1e      	ittt	ne
 8001552:	4b04      	ldrne	r3, [pc, #16]	@ (8001564 <HAL_Delay+0x20>)
 8001554:	781b      	ldrbne	r3, [r3, #0]
 8001556:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	1b43      	subs	r3, r0, r5
 800155e:	42a3      	cmp	r3, r4
 8001560:	d3fa      	bcc.n	8001558 <HAL_Delay+0x14>
  {
  }
}
 8001562:	bd38      	pop	{r3, r4, r5, pc}
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001576:	0412      	lsls	r2, r2, #16
 8001578:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001584:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b530      	push	{r4, r5, lr}
 8001590:	68dc      	ldr	r4, [r3, #12]
 8001592:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001596:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	2b04      	cmp	r3, #4
 800159e:	bf28      	it	cs
 80015a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a8:	bf94      	ite	ls
 80015aa:	2400      	movls	r4, #0
 80015ac:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ae:	fa05 f303 	lsl.w	r3, r5, r3
 80015b2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b6:	40a5      	lsls	r5, r4
 80015b8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80015be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	bfac      	ite	ge
 80015c6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	4a07      	ldrlt	r2, [pc, #28]	@ (80015e8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	bfab      	itete	ge
 80015d4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015e2:	bd30      	pop	{r4, r5, pc}
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	e000ed14 	.word	0xe000ed14

080015ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	3801      	subs	r0, #1
 80015ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80015f2:	d20b      	bcs.n	800160c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	21f0      	movs	r1, #240	@ 0xf0
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001602:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001604:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001606:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001608:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800160c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001618:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161a:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 800161e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001620:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80017a8 <HAL_GPIO_Init+0x194>
 8001624:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001626:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	680a      	ldr	r2, [r1, #0]
 800162c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001632:	b003      	add	sp, #12
 8001634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001638:	2501      	movs	r5, #1
 800163a:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8001642:	ea37 0202 	bics.w	r2, r7, r2
 8001646:	d176      	bne.n	8001736 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001648:	684a      	ldr	r2, [r1, #4]
 800164a:	2a03      	cmp	r2, #3
 800164c:	d807      	bhi.n	800165e <HAL_GPIO_Init+0x4a>
 800164e:	3a01      	subs	r2, #1
 8001650:	2a02      	cmp	r2, #2
 8001652:	f200 8083 	bhi.w	800175c <HAL_GPIO_Init+0x148>
 8001656:	e8df f002 	tbb	[pc, r2]
 800165a:	9691      	.short	0x9691
 800165c:	9c          	.byte	0x9c
 800165d:	00          	.byte	0x00
 800165e:	2a12      	cmp	r2, #18
 8001660:	f000 8094 	beq.w	800178c <HAL_GPIO_Init+0x178>
 8001664:	d869      	bhi.n	800173a <HAL_GPIO_Init+0x126>
 8001666:	2a11      	cmp	r2, #17
 8001668:	f000 808a 	beq.w	8001780 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	2dff      	cmp	r5, #255	@ 0xff
 800166e:	bf94      	ite	ls
 8001670:	4681      	movls	r9, r0
 8001672:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001674:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001678:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167c:	bf88      	it	hi
 800167e:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001680:	fa0e fa02 	lsl.w	sl, lr, r2
 8001684:	ea27 070a 	bic.w	r7, r7, sl
 8001688:	fa04 f202 	lsl.w	r2, r4, r2
 800168c:	4317      	orrs	r7, r2
 800168e:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001696:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800169a:	d04c      	beq.n	8001736 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80016a0:	f026 0703 	bic.w	r7, r6, #3
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	f8cc 2018 	str.w	r2, [ip, #24]
 80016ac:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80016b0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80016b4:	f002 0201 	and.w	r2, r2, #1
 80016b8:	9201      	str	r2, [sp, #4]
 80016ba:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016be:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c2:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ca:	fa0e fb0a 	lsl.w	fp, lr, sl
 80016ce:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d2:	4a37      	ldr	r2, [pc, #220]	@ (80017b0 <HAL_GPIO_Init+0x19c>)
 80016d4:	4290      	cmp	r0, r2
 80016d6:	d060      	beq.n	800179a <HAL_GPIO_Init+0x186>
 80016d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016dc:	4290      	cmp	r0, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0x18a>
 80016e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016e4:	4290      	cmp	r0, r2
 80016e6:	d05c      	beq.n	80017a2 <HAL_GPIO_Init+0x18e>
 80016e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016ec:	4290      	cmp	r0, r2
 80016ee:	bf14      	ite	ne
 80016f0:	2204      	movne	r2, #4
 80016f2:	2203      	moveq	r2, #3
 80016f4:	fa02 f20a 	lsl.w	r2, r2, sl
 80016f8:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80016fc:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fe:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001700:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001704:	bf14      	ite	ne
 8001706:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001708:	43aa      	biceq	r2, r5
 800170a:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800170c:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001712:	bf14      	ite	ne
 8001714:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001716:	43aa      	biceq	r2, r5
 8001718:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800171a:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001720:	bf14      	ite	ne
 8001722:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001724:	43aa      	biceq	r2, r5
 8001726:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800172e:	bf14      	ite	ne
 8001730:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001732:	43aa      	biceq	r2, r5
 8001734:	601a      	str	r2, [r3, #0]
	position++;
 8001736:	3601      	adds	r6, #1
 8001738:	e777      	b.n	800162a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800173a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80017b4 <HAL_GPIO_Init+0x1a0>
 800173e:	454a      	cmp	r2, r9
 8001740:	d00c      	beq.n	800175c <HAL_GPIO_Init+0x148>
 8001742:	d814      	bhi.n	800176e <HAL_GPIO_Init+0x15a>
 8001744:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001748:	454a      	cmp	r2, r9
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x148>
 800174c:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8001750:	454a      	cmp	r2, r9
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x148>
 8001754:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001758:	454a      	cmp	r2, r9
 800175a:	d187      	bne.n	800166c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175c:	688a      	ldr	r2, [r1, #8]
 800175e:	b1d2      	cbz	r2, 8001796 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001760:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001762:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8001766:	bf0c      	ite	eq
 8001768:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800176a:	6147      	strne	r7, [r0, #20]
 800176c:	e77e      	b.n	800166c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800176e:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80017b8 <HAL_GPIO_Init+0x1a4>
 8001772:	454a      	cmp	r2, r9
 8001774:	d0f2      	beq.n	800175c <HAL_GPIO_Init+0x148>
 8001776:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 800177a:	e7ed      	b.n	8001758 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	68cc      	ldr	r4, [r1, #12]
          break;
 800177e:	e775      	b.n	800166c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	68cc      	ldr	r4, [r1, #12]
 8001782:	3404      	adds	r4, #4
          break;
 8001784:	e772      	b.n	800166c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001786:	68cc      	ldr	r4, [r1, #12]
 8001788:	3408      	adds	r4, #8
          break;
 800178a:	e76f      	b.n	800166c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800178c:	68cc      	ldr	r4, [r1, #12]
 800178e:	340c      	adds	r4, #12
          break;
 8001790:	e76c      	b.n	800166c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001792:	2400      	movs	r4, #0
 8001794:	e76a      	b.n	800166c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001796:	2404      	movs	r4, #4
 8001798:	e768      	b.n	800166c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800179a:	2200      	movs	r2, #0
 800179c:	e7aa      	b.n	80016f4 <HAL_GPIO_Init+0xe0>
 800179e:	2201      	movs	r2, #1
 80017a0:	e7a8      	b.n	80016f4 <HAL_GPIO_Init+0xe0>
 80017a2:	2202      	movs	r2, #2
 80017a4:	e7a6      	b.n	80016f4 <HAL_GPIO_Init+0xe0>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010400 	.word	0x40010400
 80017b0:	40010800 	.word	0x40010800
 80017b4:	10220000 	.word	0x10220000
 80017b8:	10310000 	.word	0x10310000

080017bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	b10a      	cbz	r2, 80017c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017be:	6101      	str	r1, [r0, #16]
  }
}
 80017c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c2:	0409      	lsls	r1, r1, #16
 80017c4:	e7fb      	b.n	80017be <HAL_GPIO_WritePin+0x2>
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	4605      	mov	r5, r0
 80017ce:	b338      	cbz	r0, 8001820 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d0:	6803      	ldr	r3, [r0, #0]
 80017d2:	07db      	lsls	r3, r3, #31
 80017d4:	d410      	bmi.n	80017f8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	682b      	ldr	r3, [r5, #0]
 80017d8:	079f      	lsls	r7, r3, #30
 80017da:	d45e      	bmi.n	800189a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017dc:	682b      	ldr	r3, [r5, #0]
 80017de:	0719      	lsls	r1, r3, #28
 80017e0:	f100 8095 	bmi.w	800190e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	075a      	lsls	r2, r3, #29
 80017e8:	f100 80c1 	bmi.w	800196e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ec:	69eb      	ldr	r3, [r5, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 812c 	bne.w	8001a4c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80017f4:	2000      	movs	r0, #0
 80017f6:	e029      	b.n	800184c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f8:	4c90      	ldr	r4, [pc, #576]	@ (8001a3c <HAL_RCC_OscConfig+0x274>)
 80017fa:	6863      	ldr	r3, [r4, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d007      	beq.n	8001814 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d10a      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	03de      	lsls	r6, r3, #15
 8001812:	d507      	bpl.n	8001824 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	039c      	lsls	r4, r3, #14
 8001818:	d5dd      	bpl.n	80017d6 <HAL_RCC_OscConfig+0xe>
 800181a:	686b      	ldr	r3, [r5, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1da      	bne.n	80017d6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e013      	b.n	800184c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	686b      	ldr	r3, [r5, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x8a>
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001832:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001834:	f7ff fe80 	bl	8001538 <HAL_GetTick>
 8001838:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	0398      	lsls	r0, r3, #14
 800183e:	d4ca      	bmi.n	80017d6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fe7a 	bl	8001538 <HAL_GetTick>
 8001844:	1b80      	subs	r0, r0, r6
 8001846:	2864      	cmp	r0, #100	@ 0x64
 8001848:	d9f7      	bls.n	800183a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
}
 800184c:	b002      	add	sp, #8
 800184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	b99b      	cbnz	r3, 800187c <HAL_RCC_OscConfig+0xb4>
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185a:	6023      	str	r3, [r4, #0]
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001862:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001864:	f7ff fe68 	bl	8001538 <HAL_GetTick>
 8001868:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	0399      	lsls	r1, r3, #14
 800186e:	d5b2      	bpl.n	80017d6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fe62 	bl	8001538 <HAL_GetTick>
 8001874:	1b80      	subs	r0, r0, r6
 8001876:	2864      	cmp	r0, #100	@ 0x64
 8001878:	d9f7      	bls.n	800186a <HAL_RCC_OscConfig+0xa2>
 800187a:	e7e6      	b.n	800184a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	d103      	bne.n	800188c <HAL_RCC_OscConfig+0xc4>
 8001884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	e7cf      	b.n	800182c <HAL_RCC_OscConfig+0x64>
 800188c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001890:	6023      	str	r3, [r4, #0]
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001898:	e7cb      	b.n	8001832 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4c68      	ldr	r4, [pc, #416]	@ (8001a3c <HAL_RCC_OscConfig+0x274>)
 800189c:	6863      	ldr	r3, [r4, #4]
 800189e:	f013 0f0c 	tst.w	r3, #12
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018a4:	6863      	ldr	r3, [r4, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d110      	bne.n	80018d0 <HAL_RCC_OscConfig+0x108>
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	03da      	lsls	r2, r3, #15
 80018b2:	d40d      	bmi.n	80018d0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	079b      	lsls	r3, r3, #30
 80018b8:	d502      	bpl.n	80018c0 <HAL_RCC_OscConfig+0xf8>
 80018ba:	692b      	ldr	r3, [r5, #16]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d1af      	bne.n	8001820 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	696a      	ldr	r2, [r5, #20]
 80018c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	e785      	b.n	80017dc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	692a      	ldr	r2, [r5, #16]
 80018d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HAL_RCC_OscConfig+0x278>)
 80018d4:	b16a      	cbz	r2, 80018f2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018da:	f7ff fe2d 	bl	8001538 <HAL_GetTick>
 80018de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	079f      	lsls	r7, r3, #30
 80018e4:	d4ec      	bmi.n	80018c0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fe27 	bl	8001538 <HAL_GetTick>
 80018ea:	1b80      	subs	r0, r0, r6
 80018ec:	2802      	cmp	r0, #2
 80018ee:	d9f7      	bls.n	80018e0 <HAL_RCC_OscConfig+0x118>
 80018f0:	e7ab      	b.n	800184a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80018f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018f4:	f7ff fe20 	bl	8001538 <HAL_GetTick>
 80018f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	0798      	lsls	r0, r3, #30
 80018fe:	f57f af6d 	bpl.w	80017dc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fe19 	bl	8001538 <HAL_GetTick>
 8001906:	1b80      	subs	r0, r0, r6
 8001908:	2802      	cmp	r0, #2
 800190a:	d9f6      	bls.n	80018fa <HAL_RCC_OscConfig+0x132>
 800190c:	e79d      	b.n	800184a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	69aa      	ldr	r2, [r5, #24]
 8001910:	4e4a      	ldr	r6, [pc, #296]	@ (8001a3c <HAL_RCC_OscConfig+0x274>)
 8001912:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <HAL_RCC_OscConfig+0x278>)
 8001914:	b1e2      	cbz	r2, 8001950 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001916:	2201      	movs	r2, #1
 8001918:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800191c:	f7ff fe0c 	bl	8001538 <HAL_GetTick>
 8001920:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001924:	079b      	lsls	r3, r3, #30
 8001926:	d50d      	bpl.n	8001944 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001928:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800192c:	4b45      	ldr	r3, [pc, #276]	@ (8001a44 <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fbb3 f3f2 	udiv	r3, r3, r2
 8001934:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001936:	bf00      	nop
  }
  while (Delay --);
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	9201      	str	r2, [sp, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_RCC_OscConfig+0x16e>
 8001942:	e74f      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fdf8 	bl	8001538 <HAL_GetTick>
 8001948:	1b00      	subs	r0, r0, r4
 800194a:	2802      	cmp	r0, #2
 800194c:	d9e9      	bls.n	8001922 <HAL_RCC_OscConfig+0x15a>
 800194e:	e77c      	b.n	800184a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001950:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001954:	f7ff fdf0 	bl	8001538 <HAL_GetTick>
 8001958:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800195c:	079f      	lsls	r7, r3, #30
 800195e:	f57f af41 	bpl.w	80017e4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fde9 	bl	8001538 <HAL_GetTick>
 8001966:	1b00      	subs	r0, r0, r4
 8001968:	2802      	cmp	r0, #2
 800196a:	d9f6      	bls.n	800195a <HAL_RCC_OscConfig+0x192>
 800196c:	e76d      	b.n	800184a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4c33      	ldr	r4, [pc, #204]	@ (8001a3c <HAL_RCC_OscConfig+0x274>)
 8001970:	69e3      	ldr	r3, [r4, #28]
 8001972:	00d8      	lsls	r0, r3, #3
 8001974:	d424      	bmi.n	80019c0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001976:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	69e3      	ldr	r3, [r4, #28]
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197e:	61e3      	str	r3, [r4, #28]
 8001980:	69e3      	ldr	r3, [r4, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4e2f      	ldr	r6, [pc, #188]	@ (8001a48 <HAL_RCC_OscConfig+0x280>)
 800198c:	6833      	ldr	r3, [r6, #0]
 800198e:	05d9      	lsls	r1, r3, #23
 8001990:	d518      	bpl.n	80019c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	68eb      	ldr	r3, [r5, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d126      	bne.n	80019e6 <HAL_RCC_OscConfig+0x21e>
 8001998:	6a23      	ldr	r3, [r4, #32]
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019a0:	f7ff fdca 	bl	8001538 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80019a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	6a23      	ldr	r3, [r4, #32]
 80019ac:	079b      	lsls	r3, r3, #30
 80019ae:	d53f      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80019b0:	2f00      	cmp	r7, #0
 80019b2:	f43f af1b 	beq.w	80017ec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	69e3      	ldr	r3, [r4, #28]
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	61e3      	str	r3, [r4, #28]
 80019be:	e715      	b.n	80017ec <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	2700      	movs	r7, #0
 80019c2:	e7e2      	b.n	800198a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c4:	6833      	ldr	r3, [r6, #0]
 80019c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019cc:	f7ff fdb4 	bl	8001538 <HAL_GetTick>
 80019d0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	6833      	ldr	r3, [r6, #0]
 80019d4:	05da      	lsls	r2, r3, #23
 80019d6:	d4dc      	bmi.n	8001992 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fdae 	bl	8001538 <HAL_GetTick>
 80019dc:	eba0 0008 	sub.w	r0, r0, r8
 80019e0:	2864      	cmp	r0, #100	@ 0x64
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x20a>
 80019e4:	e731      	b.n	800184a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	b9ab      	cbnz	r3, 8001a14 <HAL_RCC_OscConfig+0x24c>
 80019e8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6223      	str	r3, [r4, #32]
 80019f4:	6a23      	ldr	r3, [r4, #32]
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019fc:	f7ff fd9c 	bl	8001538 <HAL_GetTick>
 8001a00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	6a23      	ldr	r3, [r4, #32]
 8001a04:	0798      	lsls	r0, r3, #30
 8001a06:	d5d3      	bpl.n	80019b0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff fd96 	bl	8001538 <HAL_GetTick>
 8001a0c:	1b80      	subs	r0, r0, r6
 8001a0e:	4540      	cmp	r0, r8
 8001a10:	d9f7      	bls.n	8001a02 <HAL_RCC_OscConfig+0x23a>
 8001a12:	e71a      	b.n	800184a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	6a23      	ldr	r3, [r4, #32]
 8001a18:	d103      	bne.n	8001a22 <HAL_RCC_OscConfig+0x25a>
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6223      	str	r3, [r4, #32]
 8001a20:	e7ba      	b.n	8001998 <HAL_RCC_OscConfig+0x1d0>
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6223      	str	r3, [r4, #32]
 8001a28:	6a23      	ldr	r3, [r4, #32]
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	e7b6      	b.n	800199e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff fd82 	bl	8001538 <HAL_GetTick>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	4540      	cmp	r0, r8
 8001a38:	d9b7      	bls.n	80019aa <HAL_RCC_OscConfig+0x1e2>
 8001a3a:	e706      	b.n	800184a <HAL_RCC_OscConfig+0x82>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	42420000 	.word	0x42420000
 8001a44:	20000000 	.word	0x20000000
 8001a48:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	4c2a      	ldr	r4, [pc, #168]	@ (8001af8 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	f002 020c 	and.w	r2, r2, #12
 8001a54:	2a08      	cmp	r2, #8
 8001a56:	d03e      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a60:	d12c      	bne.n	8001abc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001a62:	f7ff fd69 	bl	8001538 <HAL_GetTick>
 8001a66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	0199      	lsls	r1, r3, #6
 8001a6c:	d420      	bmi.n	8001ab0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a6e:	6a2b      	ldr	r3, [r5, #32]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d105      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	6862      	ldr	r2, [r4, #4]
 8001a78:	68a9      	ldr	r1, [r5, #8]
 8001a7a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a82:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001a84:	6862      	ldr	r2, [r4, #4]
 8001a86:	430b      	orrs	r3, r1
 8001a88:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001a8c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_RCC_OscConfig+0x334>)
 8001a94:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001a96:	f7ff fd4f 	bl	8001538 <HAL_GetTick>
 8001a9a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	019a      	lsls	r2, r3, #6
 8001aa0:	f53f aea8 	bmi.w	80017f4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fd48 	bl	8001538 <HAL_GetTick>
 8001aa8:	1b40      	subs	r0, r0, r5
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9f6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2d4>
 8001aae:	e6cc      	b.n	800184a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fd42 	bl	8001538 <HAL_GetTick>
 8001ab4:	1b80      	subs	r0, r0, r6
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d9d6      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2a0>
 8001aba:	e6c6      	b.n	800184a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001abc:	f7ff fd3c 	bl	8001538 <HAL_GetTick>
 8001ac0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	f57f ae95 	bpl.w	80017f4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fd35 	bl	8001538 <HAL_GetTick>
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f6      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x2fa>
 8001ad4:	e6b9      	b.n	800184a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f43f aea2 	beq.w	8001820 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001adc:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	6a2b      	ldr	r3, [r5, #32]
 8001ae0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f47f ae9b 	bne.w	8001820 <HAL_RCC_OscConfig+0x58>
 8001aea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aec:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af0:	1ac0      	subs	r0, r0, r3
 8001af2:	bf18      	it	ne
 8001af4:	2001      	movne	r0, #1
 8001af6:	e6a9      	b.n	800184c <HAL_RCC_OscConfig+0x84>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000

08001b00 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x38>)
 8001b02:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b04:	f003 010c 	and.w	r1, r3, #12
 8001b08:	2908      	cmp	r1, #8
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0c:	480b      	ldr	r0, [pc, #44]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b0e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b12:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b14:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b16:	d509      	bpl.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b18:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1a:	4a09      	ldr	r2, [pc, #36]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b20:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x44>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b26:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b2a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x48>)
 8001b2e:	4358      	muls	r0, r3
 8001b30:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	080054ff 	.word	0x080054ff
 8001b40:	007a1200 	.word	0x007a1200
 8001b44:	080054fd 	.word	0x080054fd
 8001b48:	003d0900 	.word	0x003d0900

08001b4c <HAL_RCC_ClockConfig>:
{
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b52:	4604      	mov	r4, r0
 8001b54:	b910      	cbnz	r0, 8001b5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b56:	2001      	movs	r0, #1
}
 8001b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4a44      	ldr	r2, [pc, #272]	@ (8001c70 <HAL_RCC_ClockConfig+0x124>)
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d328      	bcc.n	8001bba <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	6821      	ldr	r1, [r4, #0]
 8001b6a:	078e      	lsls	r6, r1, #30
 8001b6c:	d430      	bmi.n	8001bd0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	07ca      	lsls	r2, r1, #31
 8001b70:	d443      	bmi.n	8001bfa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b72:	4a3f      	ldr	r2, [pc, #252]	@ (8001c70 <HAL_RCC_ClockConfig+0x124>)
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	42ab      	cmp	r3, r5
 8001b7c:	d865      	bhi.n	8001c4a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	4d3c      	ldr	r5, [pc, #240]	@ (8001c74 <HAL_RCC_ClockConfig+0x128>)
 8001b82:	f012 0f04 	tst.w	r2, #4
 8001b86:	d16c      	bne.n	8001c62 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	0713      	lsls	r3, r2, #28
 8001b8a:	d506      	bpl.n	8001b9a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8c:	686b      	ldr	r3, [r5, #4]
 8001b8e:	6922      	ldr	r2, [r4, #16]
 8001b90:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001b94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b98:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f7ff ffb1 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001b9e:	686b      	ldr	r3, [r5, #4]
 8001ba0:	4a35      	ldr	r2, [pc, #212]	@ (8001c78 <HAL_RCC_ClockConfig+0x12c>)
 8001ba2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	40d8      	lsrs	r0, r3
 8001baa:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_ClockConfig+0x130>)
 8001bac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001bae:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_ClockConfig+0x134>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	f7ff fc7f 	bl	80014b4 <HAL_InitTick>
  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e7ce      	b.n	8001b58 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f023 0307 	bic.w	r3, r3, #7
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d1c3      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xa>
 8001bce:	e7cb      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_RCC_ClockConfig+0x128>)
 8001bd2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd6:	bf1e      	ittt	ne
 8001bd8:	685a      	ldrne	r2, [r3, #4]
 8001bda:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001bde:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be2:	bf42      	ittt	mi
 8001be4:	685a      	ldrmi	r2, [r3, #4]
 8001be6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001bea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	68a0      	ldr	r0, [r4, #8]
 8001bf0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	e7b9      	b.n	8001b6e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	6862      	ldr	r2, [r4, #4]
 8001bfc:	4e1d      	ldr	r6, [pc, #116]	@ (8001c74 <HAL_RCC_ClockConfig+0x128>)
 8001bfe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c00:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	d11a      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c04:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	d0a5      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	f023 0303 	bic.w	r3, r3, #3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c18:	f7ff fc8e 	bl	8001538 <HAL_GetTick>
 8001c1c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	6873      	ldr	r3, [r6, #4]
 8001c20:	6862      	ldr	r2, [r4, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c2a:	d0a2      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff fc84 	bl	8001538 <HAL_GetTick>
 8001c30:	1bc0      	subs	r0, r0, r7
 8001c32:	4540      	cmp	r0, r8
 8001c34:	d9f3      	bls.n	8001c1e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001c36:	2003      	movs	r0, #3
 8001c38:	e78e      	b.n	8001b58 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	2a02      	cmp	r2, #2
 8001c3c:	d102      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c42:	e7e1      	b.n	8001c08 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	f013 0f02 	tst.w	r3, #2
 8001c48:	e7de      	b.n	8001c08 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	f023 0307 	bic.w	r3, r3, #7
 8001c50:	432b      	orrs	r3, r5
 8001c52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	42ab      	cmp	r3, r5
 8001c5c:	f47f af7b 	bne.w	8001b56 <HAL_RCC_ClockConfig+0xa>
 8001c60:	e78d      	b.n	8001b7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c62:	686b      	ldr	r3, [r5, #4]
 8001c64:	68e1      	ldr	r1, [r4, #12]
 8001c66:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	606b      	str	r3, [r5, #4]
 8001c6e:	e78b      	b.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080054ed 	.word	0x080054ed
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c92:	6810      	ldr	r0, [r2, #0]
}
 8001c94:	40d8      	lsrs	r0, r3
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	080054e5 	.word	0x080054e5
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cb2:	6810      	ldr	r0, [r2, #0]
}
 8001cb4:	40d8      	lsrs	r0, r3
 8001cb6:	4770      	bx	lr
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080054e5 	.word	0x080054e5
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc8:	461f      	mov	r7, r3
 8001cca:	4689      	mov	r9, r1
 8001ccc:	4690      	mov	r8, r2
 8001cce:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cd0:	f7ff fc32 	bl	8001538 <HAL_GetTick>
 8001cd4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8001cd6:	443d      	add	r5, r7
 8001cd8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001cda:	f7ff fc2d 	bl	8001538 <HAL_GetTick>
 8001cde:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8001ce2:	681e      	ldr	r6, [r3, #0]
 8001ce4:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8001ce8:	436e      	muls	r6, r5
 8001cea:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6893      	ldr	r3, [r2, #8]
 8001cf0:	ea39 0303 	bics.w	r3, r9, r3
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	4543      	cmp	r3, r8
 8001cfc:	d101      	bne.n	8001d02 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e02e      	b.n	8001d60 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	1c7b      	adds	r3, r7, #1
 8001d04:	d0f3      	beq.n	8001cee <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d06:	f7ff fc17 	bl	8001538 <HAL_GetTick>
 8001d0a:	eba0 000a 	sub.w	r0, r0, sl
 8001d0e:	42a8      	cmp	r0, r5
 8001d10:	d329      	bcc.n	8001d66 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001d1a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d1c:	6862      	ldr	r2, [r4, #4]
 8001d1e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001d22:	d10a      	bne.n	8001d3a <SPI_WaitFlagStateUntilTimeout+0x76>
 8001d24:	68a2      	ldr	r2, [r4, #8]
 8001d26:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8001d2a:	d002      	beq.n	8001d32 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d2c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8001d30:	d103      	bne.n	8001d3a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d38:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d3a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d3c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001d40:	d107      	bne.n	8001d52 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d50:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001d58:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001d5c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001d60:	b002      	add	sp, #8
 8001d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8001d66:	9a01      	ldr	r2, [sp, #4]
      count--;
 8001d68:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8001d6a:	2a00      	cmp	r2, #0
      count--;
 8001d6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001d70:	bf08      	it	eq
 8001d72:	4615      	moveq	r5, r2
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	e7b9      	b.n	8001cec <SPI_WaitFlagStateUntilTimeout+0x28>
 8001d78:	20000000 	.word	0x20000000

08001d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d7e:	460b      	mov	r3, r1
 8001d80:	9200      	str	r2, [sp, #0]
{
 8001d82:	460d      	mov	r5, r1
 8001d84:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d86:	2102      	movs	r1, #2
 8001d88:	2201      	movs	r2, #1
{
 8001d8a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d8c:	f7ff ff9a 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout>
 8001d90:	4602      	mov	r2, r0
 8001d92:	b128      	cbz	r0, 8001da0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d96:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d9e:	e007      	b.n	8001db0 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001da0:	462b      	mov	r3, r5
 8001da2:	2180      	movs	r1, #128	@ 0x80
 8001da4:	4620      	mov	r0, r4
 8001da6:	9600      	str	r6, [sp, #0]
 8001da8:	f7ff ff8c 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1f1      	bne.n	8001d94 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8001db0:	b002      	add	sp, #8
 8001db2:	bd70      	pop	{r4, r5, r6, pc}

08001db4 <HAL_SPI_Init>:
{
 8001db4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001db6:	4604      	mov	r4, r0
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d051      	beq.n	8001e60 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d14a      	bne.n	8001e58 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc2:	6842      	ldr	r2, [r0, #4]
 8001dc4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001dc8:	d000      	beq.n	8001dcc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dca:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001dd4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001dd8:	b923      	cbnz	r3, 8001de4 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8001dda:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001ddc:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8001de0:	f7ff fa38 	bl	8001254 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001de4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001de6:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001de8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8001dec:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dee:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001df4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8001dfc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001e00:	4303      	orrs	r3, r0
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	69a1      	ldr	r1, [r4, #24]
 8001e06:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	6920      	ldr	r0, [r4, #16]
 8001e0e:	f000 0002 	and.w	r0, r0, #2
 8001e12:	4303      	orrs	r3, r0
 8001e14:	6960      	ldr	r0, [r4, #20]
 8001e16:	f000 0001 	and.w	r0, r0, #1
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8001e20:	4303      	orrs	r3, r0
 8001e22:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e24:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e26:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8001e2a:	4303      	orrs	r3, r0
 8001e2c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e2e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e32:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8001e36:	4303      	orrs	r3, r0
 8001e38:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001e3a:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8001e3e:	4303      	orrs	r3, r0
 8001e40:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e42:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e44:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e46:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e4c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001e4e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e50:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e52:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8001e56:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e58:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e5e:	e7b5      	b.n	8001dcc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
 8001e62:	e7f8      	b.n	8001e56 <HAL_SPI_Init+0xa2>

08001e64 <HAL_SPI_TransmitReceive>:
{
 8001e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e68:	4604      	mov	r4, r0
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	4691      	mov	r9, r2
 8001e6e:	461e      	mov	r6, r3
 8001e70:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8001e74:	f7ff fb60 	bl	8001538 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001e78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8001e7c:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e7e:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8001e80:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8001e82:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e84:	d00a      	beq.n	8001e9c <HAL_SPI_TransmitReceive+0x38>
 8001e86:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001e8a:	f040 80e5 	bne.w	8002058 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001e8e:	68a3      	ldr	r3, [r4, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 80e1 	bne.w	8002058 <HAL_SPI_TransmitReceive+0x1f4>
 8001e96:	2904      	cmp	r1, #4
 8001e98:	f040 80de 	bne.w	8002058 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	d04b      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0xd4>
 8001ea0:	f1b9 0f00 	cmp.w	r9, #0
 8001ea4:	d048      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0xd4>
 8001ea6:	2e00      	cmp	r6, #0
 8001ea8:	d046      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8001eaa:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f000 80d2 	beq.w	8002058 <HAL_SPI_TransmitReceive+0x1f4>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eba:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ebe:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ec2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ec4:	bf1c      	itt	ne
 8001ec6:	2305      	movne	r3, #5
 8001ec8:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8001ed0:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ed6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8001ed8:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eda:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8001edc:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ede:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8001ee0:	bf58      	it	pl
 8001ee2:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001ee4:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8001ee6:	bf58      	it	pl
 8001ee8:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8001eec:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8001eee:	bf58      	it	pl
 8001ef0:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef2:	68e1      	ldr	r1, [r4, #12]
 8001ef4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8001ef8:	d155      	bne.n	8001fa6 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efa:	b10a      	cbz	r2, 8001f00 <HAL_SPI_TransmitReceive+0x9c>
 8001efc:	2e01      	cmp	r6, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f00:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f04:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f06:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f08:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8001f10:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f12:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b98b      	cbnz	r3, 8001f3c <HAL_SPI_TransmitReceive+0xd8>
 8001f18:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b973      	cbnz	r3, 8001f3c <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f1e:	463a      	mov	r2, r7
 8001f20:	4641      	mov	r1, r8
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff2a 	bl	8001d7c <SPI_EndRxTxTransaction>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f000 8081 	beq.w	8002030 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001f32:	2300      	movs	r3, #0
 8001f34:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
 8001f3a:	e031      	b.n	8001fa0 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f3c:	6821      	ldr	r1, [r4, #0]
 8001f3e:	688b      	ldr	r3, [r1, #8]
 8001f40:	079a      	lsls	r2, r3, #30
 8001f42:	d50d      	bpl.n	8001f60 <HAL_SPI_TransmitReceive+0xfc>
 8001f44:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b153      	cbz	r3, 8001f60 <HAL_SPI_TransmitReceive+0xfc>
 8001f4a:	b145      	cbz	r5, 8001f5e <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f4e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8001f52:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f54:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f56:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8001f5e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f60:	688a      	ldr	r2, [r1, #8]
 8001f62:	f012 0201 	ands.w	r2, r2, #1
 8001f66:	d00c      	beq.n	8001f82 <HAL_SPI_TransmitReceive+0x11e>
 8001f68:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b14b      	cbz	r3, 8001f82 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8001f6e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f70:	68c9      	ldr	r1, [r1, #12]
 8001f72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f74:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f78:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f7a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f82:	f7ff fad9 	bl	8001538 <HAL_GetTick>
 8001f86:	1bc0      	subs	r0, r0, r7
 8001f88:	4540      	cmp	r0, r8
 8001f8a:	d3c2      	bcc.n	8001f12 <HAL_SPI_TransmitReceive+0xae>
 8001f8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001f90:	d0bf      	beq.n	8001f12 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001f98:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001f9c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001fa0:	b003      	add	sp, #12
 8001fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa6:	b10a      	cbz	r2, 8001fac <HAL_SPI_TransmitReceive+0x148>
 8001fa8:	2e01      	cmp	r6, #1
 8001faa:	d108      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fac:	782a      	ldrb	r2, [r5, #0]
 8001fae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fb6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8001fbe:	2501      	movs	r5, #1
 8001fc0:	e02d      	b.n	800201e <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	6893      	ldr	r3, [r2, #8]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	d50e      	bpl.n	8001fe8 <HAL_SPI_TransmitReceive+0x184>
 8001fca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b15b      	cbz	r3, 8001fe8 <HAL_SPI_TransmitReceive+0x184>
 8001fd0:	b14d      	cbz	r5, 8001fe6 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001fd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fda:	3301      	adds	r3, #1
 8001fdc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fde:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8001fe6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	6891      	ldr	r1, [r2, #8]
 8001fec:	f011 0101 	ands.w	r1, r1, #1
 8001ff0:	d00d      	beq.n	800200e <HAL_SPI_TransmitReceive+0x1aa>
 8001ff2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b153      	cbz	r3, 800200e <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8001ff8:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002000:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002002:	3301      	adds	r3, #1
 8002004:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002006:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002008:	3b01      	subs	r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800200e:	f7ff fa93 	bl	8001538 <HAL_GetTick>
 8002012:	1bc0      	subs	r0, r0, r7
 8002014:	4540      	cmp	r0, r8
 8002016:	d302      	bcc.n	800201e <HAL_SPI_TransmitReceive+0x1ba>
 8002018:	f1b8 3fff 	cmp.w	r8, #4294967295
 800201c:	d1b9      	bne.n	8001f92 <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800201e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1cd      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x15e>
 8002026:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1c9      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x15e>
 800202e:	e776      	b.n	8001f1e <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	b933      	cbnz	r3, 8002042 <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	9201      	str	r2, [sp, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002042:	2301      	movs	r3, #1
 8002044:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002048:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800204a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800204c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002050:	1ac0      	subs	r0, r0, r3
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	e7a3      	b.n	8001fa0 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8002058:	2002      	movs	r0, #2
 800205a:	e7a1      	b.n	8001fa0 <HAL_SPI_TransmitReceive+0x13c>

0800205c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800205c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205e:	f102 030c 	add.w	r3, r2, #12
 8002062:	e853 3f00 	ldrex	r3, [r3]
 8002066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	320c      	adds	r2, #12
 800206c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002070:	6802      	ldr	r2, [r0, #0]
 8002072:	2900      	cmp	r1, #0
 8002074:	d1f2      	bne.n	800205c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002076:	f102 0314 	add.w	r3, r2, #20
 800207a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002082:	f102 0c14 	add.w	ip, r2, #20
 8002086:	e84c 3100 	strex	r1, r3, [ip]
 800208a:	2900      	cmp	r1, #0
 800208c:	d1f3      	bne.n	8002076 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800208e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10b      	bne.n	80020ac <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002094:	f102 030c 	add.w	r3, r2, #12
 8002098:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800209c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a0:	f102 0c0c 	add.w	ip, r2, #12
 80020a4:	e84c 3100 	strex	r1, r3, [ip]
 80020a8:	2900      	cmp	r1, #0
 80020aa:	d1f3      	bne.n	8002094 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	2320      	movs	r3, #32
 80020ae:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b2:	2300      	movs	r3, #0
 80020b4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80020b6:	4770      	bx	lr

080020b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020bc:	6803      	ldr	r3, [r0, #0]
 80020be:	68c1      	ldr	r1, [r0, #12]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80020c6:	430a      	orrs	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ca:	6882      	ldr	r2, [r0, #8]
 80020cc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020ce:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020d0:	4302      	orrs	r2, r0
 80020d2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80020d4:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80020d8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020dc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80020de:	430a      	orrs	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	69a1      	ldr	r1, [r4, #24]
 80020e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80020ea:	430a      	orrs	r2, r1
 80020ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <UART_SetConfig+0x70>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d115      	bne.n	8002120 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f4:	f7ff fdd6 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020f8:	2319      	movs	r3, #25
 80020fa:	4343      	muls	r3, r0
 80020fc:	6862      	ldr	r2, [r4, #4]
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	fbb3 f3f2 	udiv	r3, r3, r2
 8002106:	2264      	movs	r2, #100	@ 0x64
 8002108:	fbb3 f1f2 	udiv	r1, r3, r2
 800210c:	fb02 3311 	mls	r3, r2, r1, r3
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	3332      	adds	r3, #50	@ 0x32
 8002114:	fbb3 f3f2 	udiv	r3, r3, r2
 8002118:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800211c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800211e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002120:	f7ff fdb0 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8002124:	e7e8      	b.n	80020f8 <UART_SetConfig+0x40>
 8002126:	bf00      	nop
 8002128:	40013800 	.word	0x40013800

0800212c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800212c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800212e:	4605      	mov	r5, r0
 8002130:	460c      	mov	r4, r1
 8002132:	4617      	mov	r7, r2
 8002134:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002136:	682a      	ldr	r2, [r5, #0]
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	ea34 0303 	bics.w	r3, r4, r3
 800213e:	d101      	bne.n	8002144 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	e021      	b.n	8002188 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002144:	1c70      	adds	r0, r6, #1
 8002146:	d0f7      	beq.n	8002138 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002148:	f7ff f9f6 	bl	8001538 <HAL_GetTick>
 800214c:	1bc0      	subs	r0, r0, r7
 800214e:	4286      	cmp	r6, r0
 8002150:	d31c      	bcc.n	800218c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8002152:	b1de      	cbz	r6, 800218c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	0751      	lsls	r1, r2, #29
 800215a:	d5ec      	bpl.n	8002136 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800215c:	2c80      	cmp	r4, #128	@ 0x80
 800215e:	d0ea      	beq.n	8002136 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002160:	2c40      	cmp	r4, #64	@ 0x40
 8002162:	d0e8      	beq.n	8002136 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	0712      	lsls	r2, r2, #28
 8002168:	d5e5      	bpl.n	8002136 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800216a:	2400      	movs	r4, #0
 800216c:	9401      	str	r4, [sp, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8002170:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002172:	9201      	str	r2, [sp, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800217a:	f7ff ff6f 	bl	800205c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800217e:	2308      	movs	r3, #8
          return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002182:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002184:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8002188:	b003      	add	sp, #12
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e7fb      	b.n	8002188 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08002190 <HAL_UART_Init>:
{
 8002190:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002192:	4604      	mov	r4, r0
 8002194:	b348      	cbz	r0, 80021ea <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002196:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800219a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800219e:	b91b      	cbnz	r3, 80021a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021a0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80021a4:	f7ff f924 	bl	80013f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021a8:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80021aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80021b0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021b2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021ba:	f7ff ff7d 	bl	80020b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021be:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021d0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021d8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021dc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80021e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7fc      	b.n	80021e8 <HAL_UART_Init+0x58>

080021ee <HAL_UART_Transmit>:
{
 80021ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80021f4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80021f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80021fa:	2b20      	cmp	r3, #32
{
 80021fc:	460e      	mov	r6, r1
 80021fe:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002200:	d13f      	bne.n	8002282 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8002202:	2900      	cmp	r1, #0
 8002204:	d03f      	beq.n	8002286 <HAL_UART_Transmit+0x98>
 8002206:	2a00      	cmp	r2, #0
 8002208:	d03d      	beq.n	8002286 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800220a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	2500      	movs	r5, #0
 800220e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002210:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002214:	f7ff f990 	bl	8001538 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800221a:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8002220:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002222:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002224:	d103      	bne.n	800222e <HAL_UART_Transmit+0x40>
 8002226:	6923      	ldr	r3, [r4, #16]
 8002228:	b90b      	cbnz	r3, 800222e <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 800222a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800222c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800222e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	b953      	cbnz	r3, 800224a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002234:	4643      	mov	r3, r8
 8002236:	464a      	mov	r2, r9
 8002238:	2140      	movs	r1, #64	@ 0x40
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff76 	bl	800212c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002240:	2320      	movs	r3, #32
 8002242:	b950      	cbnz	r0, 800225a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002244:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002248:	e00a      	b.n	8002260 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	4643      	mov	r3, r8
 800224c:	464a      	mov	r2, r9
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ff6b 	bl	800212c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002256:	b128      	cbz	r0, 8002264 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8002258:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800225a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800225c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8002260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002264:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002266:	b94e      	cbnz	r6, 800227c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002268:	f835 3b02 	ldrh.w	r3, [r5], #2
 800226c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002270:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002272:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8002274:	3901      	subs	r1, #1
 8002276:	b289      	uxth	r1, r1
 8002278:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800227a:	e7d8      	b.n	800222e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800227c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002280:	e7f6      	b.n	8002270 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002282:	2002      	movs	r0, #2
 8002284:	e7ec      	b.n	8002260 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	e7ea      	b.n	8002260 <HAL_UART_Transmit+0x72>

0800228a <MAX31856_ReadRegister>:
}

/**
 * @brief Read single register
 */
max31856_status_t MAX31856_ReadRegister(MAX31856_Handle_t *hmax, uint8_t reg, uint8_t *data) {
 800228a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800228c:	4616      	mov	r6, r2
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL) {
 800228e:	4604      	mov	r4, r0
 8002290:	b338      	cbz	r0, 80022e2 <MAX31856_ReadRegister+0x58>
 8002292:	b332      	cbz	r2, 80022e2 <MAX31856_ReadRegister+0x58>
 8002294:	6803      	ldr	r3, [r0, #0]
 8002296:	b323      	cbz	r3, 80022e2 <MAX31856_ReadRegister+0x58>
        return MAX31856_ERROR;
    }

    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
    uint8_t rx_data[2] = {0, 0};
 8002298:	2300      	movs	r3, #0
 800229a:	f8ad 3004 	strh.w	r3, [sp, #4]
    max31856_status_t status;

    if (hmax->platform.cs_low) {
 800229e:	6843      	ldr	r3, [r0, #4]
    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
 80022a0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80022a4:	f88d 1003 	strb.w	r1, [sp, #3]
    if (hmax->platform.cs_low) {
 80022a8:	b103      	cbz	r3, 80022ac <MAX31856_ReadRegister+0x22>
        hmax->platform.cs_low(hmax);
 80022aa:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 80022ac:	68e3      	ldr	r3, [r4, #12]
 80022ae:	b10b      	cbz	r3, 80022b4 <MAX31856_ReadRegister+0x2a>
        hmax->platform.delay_ms(1);
 80022b0:	2001      	movs	r0, #1
 80022b2:	4798      	blx	r3
    }

    /* Send register address and read data */
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 2);
 80022b4:	2302      	movs	r3, #2
 80022b6:	6825      	ldr	r5, [r4, #0]
 80022b8:	4620      	mov	r0, r4
 80022ba:	aa01      	add	r2, sp, #4
 80022bc:	f10d 0103 	add.w	r1, sp, #3
 80022c0:	47a8      	blx	r5

    if (hmax->platform.delay_ms) {
 80022c2:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 2);
 80022c4:	4605      	mov	r5, r0
    if (hmax->platform.delay_ms) {
 80022c6:	b10b      	cbz	r3, 80022cc <MAX31856_ReadRegister+0x42>
        hmax->platform.delay_ms(1);
 80022c8:	2001      	movs	r0, #1
 80022ca:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 80022cc:	68a3      	ldr	r3, [r4, #8]
 80022ce:	b10b      	cbz	r3, 80022d4 <MAX31856_ReadRegister+0x4a>
        hmax->platform.cs_high(hmax);
 80022d0:	4620      	mov	r0, r4
 80022d2:	4798      	blx	r3
    }

    if (status != MAX31856_OK) {
 80022d4:	b915      	cbnz	r5, 80022dc <MAX31856_ReadRegister+0x52>
        return status;
    }

    *data = rx_data[1]; // Data comes in second byte
 80022d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022da:	7033      	strb	r3, [r6, #0]
    return MAX31856_OK;
}
 80022dc:	4628      	mov	r0, r5
 80022de:	b002      	add	sp, #8
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
        return MAX31856_ERROR;
 80022e2:	2501      	movs	r5, #1
 80022e4:	e7fa      	b.n	80022dc <MAX31856_ReadRegister+0x52>

080022e6 <MAX31856_ReadFault>:
max31856_status_t MAX31856_ReadFault(MAX31856_Handle_t *hmax, uint8_t *fault_status) {
 80022e6:	b538      	push	{r3, r4, r5, lr}
 80022e8:	460c      	mov	r4, r1
    if (hmax == NULL || fault_status == NULL) return MAX31856_ERROR;
 80022ea:	4605      	mov	r5, r0
 80022ec:	b148      	cbz	r0, 8002302 <MAX31856_ReadFault+0x1c>
 80022ee:	b141      	cbz	r1, 8002302 <MAX31856_ReadFault+0x1c>
    max31856_status_t status = MAX31856_ReadRegister(hmax, MAX31856_SR_REG, fault_status);
 80022f0:	460a      	mov	r2, r1
 80022f2:	210f      	movs	r1, #15
 80022f4:	f7ff ffc9 	bl	800228a <MAX31856_ReadRegister>
    if (status == MAX31856_OK) {
 80022f8:	b910      	cbnz	r0, 8002300 <MAX31856_ReadFault+0x1a>
        hmax->last_fault = *fault_status;
 80022fa:	7823      	ldrb	r3, [r4, #0]
 80022fc:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
}
 8002300:	bd38      	pop	{r3, r4, r5, pc}
    if (hmax == NULL || fault_status == NULL) return MAX31856_ERROR;
 8002302:	2001      	movs	r0, #1
 8002304:	e7fc      	b.n	8002300 <MAX31856_ReadFault+0x1a>

08002306 <MAX31856_WriteRegister>:

/**
 * @brief Write single register
 */
max31856_status_t MAX31856_WriteRegister(MAX31856_Handle_t *hmax, uint8_t reg, uint8_t data) {
 8002306:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hmax == NULL || hmax->platform.spi_write_read == NULL) {
 8002308:	4604      	mov	r4, r0
 800230a:	b300      	cbz	r0, 800234e <MAX31856_WriteRegister+0x48>
 800230c:	6803      	ldr	r3, [r0, #0]
 800230e:	b1f3      	cbz	r3, 800234e <MAX31856_WriteRegister+0x48>
    max31856_status_t status;

    tx_data[0] = reg | 0x80; // Set MSB for write
    tx_data[1] = data;

    if (hmax->platform.cs_low) {
 8002310:	6843      	ldr	r3, [r0, #4]
    tx_data[0] = reg | 0x80; // Set MSB for write
 8002312:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8002316:	f88d 1000 	strb.w	r1, [sp]
    tx_data[1] = data;
 800231a:	f88d 2001 	strb.w	r2, [sp, #1]
    if (hmax->platform.cs_low) {
 800231e:	b103      	cbz	r3, 8002322 <MAX31856_WriteRegister+0x1c>
        hmax->platform.cs_low(hmax);
 8002320:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 8002322:	68e3      	ldr	r3, [r4, #12]
 8002324:	b10b      	cbz	r3, 800232a <MAX31856_WriteRegister+0x24>
        hmax->platform.delay_ms(1);
 8002326:	2001      	movs	r0, #1
 8002328:	4798      	blx	r3
    }

    status = hmax->platform.spi_write_read(hmax, tx_data, rx_data, 2);
 800232a:	2302      	movs	r3, #2
 800232c:	6825      	ldr	r5, [r4, #0]
 800232e:	4669      	mov	r1, sp
 8002330:	4620      	mov	r0, r4
 8002332:	aa01      	add	r2, sp, #4
 8002334:	47a8      	blx	r5

    if (hmax->platform.delay_ms) {
 8002336:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, tx_data, rx_data, 2);
 8002338:	4605      	mov	r5, r0
    if (hmax->platform.delay_ms) {
 800233a:	b10b      	cbz	r3, 8002340 <MAX31856_WriteRegister+0x3a>
        hmax->platform.delay_ms(1);
 800233c:	2001      	movs	r0, #1
 800233e:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 8002340:	68a3      	ldr	r3, [r4, #8]
 8002342:	b10b      	cbz	r3, 8002348 <MAX31856_WriteRegister+0x42>
        hmax->platform.cs_high(hmax);
 8002344:	4620      	mov	r0, r4
 8002346:	4798      	blx	r3
    }

    return status;
}
 8002348:	4628      	mov	r0, r5
 800234a:	b003      	add	sp, #12
 800234c:	bd30      	pop	{r4, r5, pc}
        return MAX31856_ERROR;
 800234e:	2501      	movs	r5, #1
 8002350:	e7fa      	b.n	8002348 <MAX31856_WriteRegister+0x42>

08002352 <MAX31856_SetTCType>:
max31856_status_t MAX31856_SetTCType(MAX31856_Handle_t *hmax, max31856_tc_type_t tc_type) {
 8002352:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002354:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002356:	4604      	mov	r4, r0
 8002358:	b910      	cbnz	r0, 8002360 <MAX31856_SetTCType+0xe>
 800235a:	2001      	movs	r0, #1
}
 800235c:	b003      	add	sp, #12
 800235e:	bd30      	pop	{r4, r5, pc}
    uint8_t cr1 = 0;
 8002360:	2300      	movs	r3, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR1_REG, &cr1) != MAX31856_OK) {
 8002362:	2101      	movs	r1, #1
 8002364:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr1 = 0;
 8002368:	f88d 3007 	strb.w	r3, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR1_REG, &cr1) != MAX31856_OK) {
 800236c:	f7ff ff8d 	bl	800228a <MAX31856_ReadRegister>
 8002370:	2800      	cmp	r0, #0
 8002372:	d1f2      	bne.n	800235a <MAX31856_SetTCType+0x8>
    cr1 &= ~MAX31856_CR1_TC_TYPE_MASK;
 8002374:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (MAX31856_WriteRegister(hmax, MAX31856_CR1_REG, cr1) != MAX31856_OK) {
 8002378:	f005 020f 	and.w	r2, r5, #15
    cr1 &= ~MAX31856_CR1_TC_TYPE_MASK;
 800237c:	f023 030f 	bic.w	r3, r3, #15
    if (MAX31856_WriteRegister(hmax, MAX31856_CR1_REG, cr1) != MAX31856_OK) {
 8002380:	2101      	movs	r1, #1
 8002382:	4620      	mov	r0, r4
 8002384:	431a      	orrs	r2, r3
 8002386:	f7ff ffbe 	bl	8002306 <MAX31856_WriteRegister>
 800238a:	2800      	cmp	r0, #0
 800238c:	d1e5      	bne.n	800235a <MAX31856_SetTCType+0x8>
    hmax->tc_type = tc_type;
 800238e:	7725      	strb	r5, [r4, #28]
    return MAX31856_OK;
 8002390:	e7e4      	b.n	800235c <MAX31856_SetTCType+0xa>

08002392 <MAX31856_SetFilter>:
max31856_status_t MAX31856_SetFilter(MAX31856_Handle_t *hmax, max31856_filter_t filter) {
 8002392:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002394:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002396:	4604      	mov	r4, r0
 8002398:	b910      	cbnz	r0, 80023a0 <MAX31856_SetFilter+0xe>
 800239a:	2001      	movs	r0, #1
}
 800239c:	b003      	add	sp, #12
 800239e:	bd30      	pop	{r4, r5, pc}
    uint8_t cr0 = 0;
 80023a0:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80023a2:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 80023a6:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80023aa:	f7ff ff6e 	bl	800228a <MAX31856_ReadRegister>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d1f3      	bne.n	800239a <MAX31856_SetFilter+0x8>
        cr0 |= MAX31856_CR0_50_60HZ;
 80023b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (filter == MAX31856_FILTER_50HZ) {
 80023b6:	2d01      	cmp	r5, #1
        cr0 |= MAX31856_CR0_50_60HZ;
 80023b8:	bf0c      	ite	eq
 80023ba:	f042 0201 	orreq.w	r2, r2, #1
        cr0 &= ~MAX31856_CR0_50_60HZ;
 80023be:	f002 02fe 	andne.w	r2, r2, #254	@ 0xfe
    if (MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0) != MAX31856_OK) {
 80023c2:	2100      	movs	r1, #0
 80023c4:	4620      	mov	r0, r4
 80023c6:	f88d 2007 	strb.w	r2, [sp, #7]
 80023ca:	f7ff ff9c 	bl	8002306 <MAX31856_WriteRegister>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d1e3      	bne.n	800239a <MAX31856_SetFilter+0x8>
    hmax->filter = filter;
 80023d2:	77a5      	strb	r5, [r4, #30]
    return MAX31856_OK;
 80023d4:	e7e2      	b.n	800239c <MAX31856_SetFilter+0xa>

080023d6 <MAX31856_SetAvgMode>:
max31856_status_t MAX31856_SetAvgMode(MAX31856_Handle_t *hmax, max31856_avg_mode_t avg_mode) {
 80023d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023d8:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 80023da:	4604      	mov	r4, r0
 80023dc:	b910      	cbnz	r0, 80023e4 <MAX31856_SetAvgMode+0xe>
 80023de:	2001      	movs	r0, #1
}
 80023e0:	b003      	add	sp, #12
 80023e2:	bd30      	pop	{r4, r5, pc}
    uint8_t cr1 = 0;
 80023e4:	2300      	movs	r3, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR1_REG, &cr1) != MAX31856_OK) {
 80023e6:	2101      	movs	r1, #1
 80023e8:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr1 = 0;
 80023ec:	f88d 3007 	strb.w	r3, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR1_REG, &cr1) != MAX31856_OK) {
 80023f0:	f7ff ff4b 	bl	800228a <MAX31856_ReadRegister>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d1f2      	bne.n	80023de <MAX31856_SetAvgMode+0x8>
    cr1 &= ~(MAX31856_CR1_AVGSEL2 | MAX31856_CR1_AVGSEL1 | MAX31856_CR1_AVGSEL0);
 80023f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cr1 |= ((avg_mode & 0x07) << 4);
 80023fc:	012b      	lsls	r3, r5, #4
    cr1 &= ~(MAX31856_CR1_AVGSEL2 | MAX31856_CR1_AVGSEL1 | MAX31856_CR1_AVGSEL0);
 80023fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    cr1 |= ((avg_mode & 0x07) << 4);
 8002402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
    if (MAX31856_WriteRegister(hmax, MAX31856_CR1_REG, cr1) != MAX31856_OK) {
 8002406:	2101      	movs	r1, #1
 8002408:	4620      	mov	r0, r4
 800240a:	431a      	orrs	r2, r3
 800240c:	f7ff ff7b 	bl	8002306 <MAX31856_WriteRegister>
 8002410:	2800      	cmp	r0, #0
 8002412:	d1e4      	bne.n	80023de <MAX31856_SetAvgMode+0x8>
    hmax->avg_mode = avg_mode;
 8002414:	7765      	strb	r5, [r4, #29]
    return MAX31856_OK;
 8002416:	e7e3      	b.n	80023e0 <MAX31856_SetAvgMode+0xa>

08002418 <MAX31856_SetConvMode>:
max31856_status_t MAX31856_SetConvMode(MAX31856_Handle_t *hmax, max31856_conv_mode_t conv_mode) {
 8002418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800241a:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 800241c:	4604      	mov	r4, r0
 800241e:	b910      	cbnz	r0, 8002426 <MAX31856_SetConvMode+0xe>
 8002420:	2001      	movs	r0, #1
}
 8002422:	b003      	add	sp, #12
 8002424:	bd30      	pop	{r4, r5, pc}
    uint8_t cr0 = 0;
 8002426:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 8002428:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 800242c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 8002430:	f7ff ff2b 	bl	800228a <MAX31856_ReadRegister>
 8002434:	2800      	cmp	r0, #0
 8002436:	d1f3      	bne.n	8002420 <MAX31856_SetConvMode+0x8>
        cr0 |= MAX31856_CR0_CMODE;
 8002438:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (conv_mode == MAX31856_AUTO_CONVERT) {
 800243c:	2d01      	cmp	r5, #1
        cr0 |= MAX31856_CR0_CMODE;
 800243e:	bf0c      	ite	eq
 8002440:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
        cr0 &= ~MAX31856_CR0_CMODE;
 8002444:	f002 027f 	andne.w	r2, r2, #127	@ 0x7f
    if (MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0) != MAX31856_OK) {
 8002448:	2100      	movs	r1, #0
 800244a:	4620      	mov	r0, r4
 800244c:	f88d 2007 	strb.w	r2, [sp, #7]
 8002450:	f7ff ff59 	bl	8002306 <MAX31856_WriteRegister>
 8002454:	2800      	cmp	r0, #0
 8002456:	d1e3      	bne.n	8002420 <MAX31856_SetConvMode+0x8>
    hmax->conv_mode = conv_mode;
 8002458:	77e5      	strb	r5, [r4, #31]
    return MAX31856_OK;
 800245a:	e7e2      	b.n	8002422 <MAX31856_SetConvMode+0xa>

0800245c <MAX31856_SetOCFault>:
max31856_status_t MAX31856_SetOCFault(MAX31856_Handle_t *hmax, max31856_ocfault_t ocfault) {
 800245c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800245e:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002460:	4604      	mov	r4, r0
 8002462:	b910      	cbnz	r0, 800246a <MAX31856_SetOCFault+0xe>
 8002464:	2001      	movs	r0, #1
}
 8002466:	b003      	add	sp, #12
 8002468:	bd30      	pop	{r4, r5, pc}
    uint8_t cr0 = 0;
 800246a:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 800246c:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 8002470:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 8002474:	f7ff ff09 	bl	800228a <MAX31856_ReadRegister>
 8002478:	4601      	mov	r1, r0
 800247a:	2800      	cmp	r0, #0
 800247c:	d1f2      	bne.n	8002464 <MAX31856_SetOCFault+0x8>
    cr0 &= ~(MAX31856_CR0_OCFAULT1 | MAX31856_CR0_OCFAULT0);
 800247e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cr0 |= ((ocfault & 0x03) << 4);
 8002482:	012b      	lsls	r3, r5, #4
    cr0 &= ~(MAX31856_CR0_OCFAULT1 | MAX31856_CR0_OCFAULT0);
 8002484:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
    cr0 |= ((ocfault & 0x03) << 4);
 8002488:	f003 0330 	and.w	r3, r3, #48	@ 0x30
    if (MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0) != MAX31856_OK) {
 800248c:	4620      	mov	r0, r4
 800248e:	431a      	orrs	r2, r3
 8002490:	f7ff ff39 	bl	8002306 <MAX31856_WriteRegister>
 8002494:	2800      	cmp	r0, #0
 8002496:	d1e5      	bne.n	8002464 <MAX31856_SetOCFault+0x8>
    hmax->ocfault = ocfault;
 8002498:	f884 5021 	strb.w	r5, [r4, #33]	@ 0x21
    return MAX31856_OK;
 800249c:	e7e3      	b.n	8002466 <MAX31856_SetOCFault+0xa>

0800249e <MAX31856_EnableCJSensor>:
max31856_status_t MAX31856_EnableCJSensor(MAX31856_Handle_t *hmax, bool enable) {
 800249e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024a0:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31856_ERROR;
 80024a2:	4604      	mov	r4, r0
 80024a4:	b1b0      	cbz	r0, 80024d4 <MAX31856_EnableCJSensor+0x36>
    uint8_t cr0 = 0;
 80024a6:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80024a8:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 80024ac:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80024b0:	f7ff feeb 	bl	800228a <MAX31856_ReadRegister>
 80024b4:	b970      	cbnz	r0, 80024d4 <MAX31856_EnableCJSensor+0x36>
        cr0 &= ~MAX31856_CR0_CJ; // Clear bit to enable
 80024b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (enable) {
 80024ba:	b145      	cbz	r5, 80024ce <MAX31856_EnableCJSensor+0x30>
        cr0 &= ~MAX31856_CR0_CJ; // Clear bit to enable
 80024bc:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
    return MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0);
 80024c0:	2100      	movs	r1, #0
 80024c2:	4620      	mov	r0, r4
}
 80024c4:	b003      	add	sp, #12
 80024c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0);
 80024ca:	f7ff bf1c 	b.w	8002306 <MAX31856_WriteRegister>
        cr0 |= MAX31856_CR0_CJ;  // Set bit to disable
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	e7f5      	b.n	80024c0 <MAX31856_EnableCJSensor+0x22>
}
 80024d4:	2001      	movs	r0, #1
 80024d6:	b003      	add	sp, #12
 80024d8:	bd30      	pop	{r4, r5, pc}

080024da <MAX31856_SetCJHighThreshold>:
max31856_status_t MAX31856_SetCJHighThreshold(MAX31856_Handle_t *hmax, float temperature) {
 80024da:	b510      	push	{r4, lr}
 80024dc:	4604      	mov	r4, r0
 80024de:	4608      	mov	r0, r1
    if (hmax == NULL) return MAX31856_ERROR;
 80024e0:	b16c      	cbz	r4, 80024fe <MAX31856_SetCJHighThreshold+0x24>
    int16_t raw = (int16_t)(temperature * 256.0f);
 80024e2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80024e6:	f7fe fbdd 	bl	8000ca4 <__aeabi_fmul>
 80024ea:	f7fe fd2b 	bl	8000f44 <__aeabi_f2iz>
    return MAX31856_WriteRegister(hmax, MAX31856_CJHF_REG, (uint8_t)(raw >> 8));
 80024ee:	2103      	movs	r1, #3
 80024f0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80024f4:	4620      	mov	r0, r4
}
 80024f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_CJHF_REG, (uint8_t)(raw >> 8));
 80024fa:	f7ff bf04 	b.w	8002306 <MAX31856_WriteRegister>
}
 80024fe:	2001      	movs	r0, #1
 8002500:	bd10      	pop	{r4, pc}

08002502 <MAX31856_SetCJLowThreshold>:
max31856_status_t MAX31856_SetCJLowThreshold(MAX31856_Handle_t *hmax, float temperature) {
 8002502:	b510      	push	{r4, lr}
 8002504:	4604      	mov	r4, r0
 8002506:	4608      	mov	r0, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002508:	b16c      	cbz	r4, 8002526 <MAX31856_SetCJLowThreshold+0x24>
    int16_t raw = (int16_t)(temperature * 256.0f);
 800250a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800250e:	f7fe fbc9 	bl	8000ca4 <__aeabi_fmul>
 8002512:	f7fe fd17 	bl	8000f44 <__aeabi_f2iz>
    return MAX31856_WriteRegister(hmax, MAX31856_CJLF_REG, (uint8_t)(raw >> 8));
 8002516:	2104      	movs	r1, #4
 8002518:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800251c:	4620      	mov	r0, r4
}
 800251e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_CJLF_REG, (uint8_t)(raw >> 8));
 8002522:	f7ff bef0 	b.w	8002306 <MAX31856_WriteRegister>
}
 8002526:	2001      	movs	r0, #1
 8002528:	bd10      	pop	{r4, pc}

0800252a <MAX31856_SetTCHighThreshold>:
max31856_status_t MAX31856_SetTCHighThreshold(MAX31856_Handle_t *hmax, float temperature) {
 800252a:	b538      	push	{r3, r4, r5, lr}
 800252c:	4604      	mov	r4, r0
 800252e:	4608      	mov	r0, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002530:	b1ac      	cbz	r4, 800255e <MAX31856_SetTCHighThreshold+0x34>
    int32_t raw = (int32_t)(temperature / 0.0078125f);
 8002532:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8002536:	f7fe fbb5 	bl	8000ca4 <__aeabi_fmul>
 800253a:	f7fe fd03 	bl	8000f44 <__aeabi_f2iz>
    status = MAX31856_WriteRegister(hmax, MAX31856_LTHFTH_REG, (uint8_t)(raw >> 8));
 800253e:	2105      	movs	r1, #5
 8002540:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8002544:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fedc 	bl	8002306 <MAX31856_WriteRegister>
    if (status != MAX31856_OK) return status;
 800254e:	b938      	cbnz	r0, 8002560 <MAX31856_SetTCHighThreshold+0x36>
    return MAX31856_WriteRegister(hmax, MAX31856_LTHFTL_REG, (uint8_t)raw);
 8002550:	4620      	mov	r0, r4
 8002552:	b2ea      	uxtb	r2, r5
 8002554:	2106      	movs	r1, #6
}
 8002556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_LTHFTL_REG, (uint8_t)raw);
 800255a:	f7ff bed4 	b.w	8002306 <MAX31856_WriteRegister>
    if (hmax == NULL) return MAX31856_ERROR;
 800255e:	2001      	movs	r0, #1
}
 8002560:	bd38      	pop	{r3, r4, r5, pc}

08002562 <MAX31856_SetTCLowThreshold>:
max31856_status_t MAX31856_SetTCLowThreshold(MAX31856_Handle_t *hmax, float temperature) {
 8002562:	b538      	push	{r3, r4, r5, lr}
 8002564:	4604      	mov	r4, r0
 8002566:	4608      	mov	r0, r1
    if (hmax == NULL) return MAX31856_ERROR;
 8002568:	b1ac      	cbz	r4, 8002596 <MAX31856_SetTCLowThreshold+0x34>
    int32_t raw = (int32_t)(temperature / 0.0078125f);
 800256a:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 800256e:	f7fe fb99 	bl	8000ca4 <__aeabi_fmul>
 8002572:	f7fe fce7 	bl	8000f44 <__aeabi_f2iz>
    status = MAX31856_WriteRegister(hmax, MAX31856_LTLFTH_REG, (uint8_t)(raw >> 8));
 8002576:	2107      	movs	r1, #7
 8002578:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800257c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff fec0 	bl	8002306 <MAX31856_WriteRegister>
    if (status != MAX31856_OK) return status;
 8002586:	b938      	cbnz	r0, 8002598 <MAX31856_SetTCLowThreshold+0x36>
    return MAX31856_WriteRegister(hmax, MAX31856_LTLFTL_REG, (uint8_t)raw);
 8002588:	4620      	mov	r0, r4
 800258a:	b2ea      	uxtb	r2, r5
 800258c:	2108      	movs	r1, #8
}
 800258e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_LTLFTL_REG, (uint8_t)raw);
 8002592:	f7ff beb8 	b.w	8002306 <MAX31856_WriteRegister>
    if (hmax == NULL) return MAX31856_ERROR;
 8002596:	2001      	movs	r0, #1
}
 8002598:	bd38      	pop	{r3, r4, r5, pc}

0800259a <MAX31856_TriggerOneShot>:
max31856_status_t MAX31856_TriggerOneShot(MAX31856_Handle_t *hmax) {
 800259a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hmax == NULL) return MAX31856_ERROR;
 800259c:	4604      	mov	r4, r0
 800259e:	b918      	cbnz	r0, 80025a8 <MAX31856_TriggerOneShot+0xe>
 80025a0:	2501      	movs	r5, #1
}
 80025a2:	4628      	mov	r0, r5
 80025a4:	b003      	add	sp, #12
 80025a6:	bd30      	pop	{r4, r5, pc}
    uint8_t cr0 = 0;
 80025a8:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80025aa:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 80025ae:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 80025b2:	f7ff fe6a 	bl	800228a <MAX31856_ReadRegister>
 80025b6:	4601      	mov	r1, r0
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d1f1      	bne.n	80025a0 <MAX31856_TriggerOneShot+0x6>
    cr0 |= MAX31856_CR0_1SHOT;
 80025bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0) != MAX31856_OK) {
 80025c0:	4620      	mov	r0, r4
 80025c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025c6:	f7ff fe9e 	bl	8002306 <MAX31856_WriteRegister>
 80025ca:	4605      	mov	r5, r0
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d1e7      	bne.n	80025a0 <MAX31856_TriggerOneShot+0x6>
    if (hmax->platform.delay_ms) {
 80025d0:	68e2      	ldr	r2, [r4, #12]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d0e5      	beq.n	80025a2 <MAX31856_TriggerOneShot+0x8>
        if (hmax->filter == MAX31856_FILTER_50HZ) {
 80025d6:	7fa3      	ldrb	r3, [r4, #30]
        uint32_t conv_time = 155; // Base time for 60Hz filter
 80025d8:	2b01      	cmp	r3, #1
        switch (hmax->avg_mode) {
 80025da:	7f63      	ldrb	r3, [r4, #29]
        uint32_t conv_time = 155; // Base time for 60Hz filter
 80025dc:	bf08      	it	eq
 80025de:	20b9      	moveq	r0, #185	@ 0xb9
        switch (hmax->avg_mode) {
 80025e0:	f103 33ff 	add.w	r3, r3, #4294967295
        uint32_t conv_time = 155; // Base time for 60Hz filter
 80025e4:	bf18      	it	ne
 80025e6:	209b      	movne	r0, #155	@ 0x9b
        switch (hmax->avg_mode) {
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d804      	bhi.n	80025f6 <MAX31856_TriggerOneShot+0x5c>
 80025ec:	e8df f003 	tbb	[pc, r3]
 80025f0:	09070502 	.word	0x09070502
                conv_time += 33;
 80025f4:	3021      	adds	r0, #33	@ 0x21
        hmax->platform.delay_ms(conv_time);
 80025f6:	4790      	blx	r2
 80025f8:	e7d3      	b.n	80025a2 <MAX31856_TriggerOneShot+0x8>
                conv_time += 66;
 80025fa:	3042      	adds	r0, #66	@ 0x42
                break;
 80025fc:	e7fb      	b.n	80025f6 <MAX31856_TriggerOneShot+0x5c>
                conv_time += 132;
 80025fe:	3084      	adds	r0, #132	@ 0x84
                break;
 8002600:	e7f9      	b.n	80025f6 <MAX31856_TriggerOneShot+0x5c>
                conv_time += 264;
 8002602:	f500 7084 	add.w	r0, r0, #264	@ 0x108
                break;
 8002606:	e7f6      	b.n	80025f6 <MAX31856_TriggerOneShot+0x5c>

08002608 <MAX31856_ClearFault>:
max31856_status_t MAX31856_ClearFault(MAX31856_Handle_t *hmax) {
 8002608:	b513      	push	{r0, r1, r4, lr}
    if (hmax == NULL) return MAX31856_ERROR;
 800260a:	4604      	mov	r4, r0
 800260c:	b190      	cbz	r0, 8002634 <MAX31856_ClearFault+0x2c>
    uint8_t cr0 = 0;
 800260e:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 8002610:	f10d 0207 	add.w	r2, sp, #7
    uint8_t cr0 = 0;
 8002614:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &cr0) != MAX31856_OK) {
 8002618:	f7ff fe37 	bl	800228a <MAX31856_ReadRegister>
 800261c:	4601      	mov	r1, r0
 800261e:	b948      	cbnz	r0, 8002634 <MAX31856_ClearFault+0x2c>
    return MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0);
 8002620:	4620      	mov	r0, r4
    cr0 |= MAX31856_CR0_FAULTCLR;
 8002622:	f89d 2007 	ldrb.w	r2, [sp, #7]
    return MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0);
 8002626:	f042 0202 	orr.w	r2, r2, #2
}
 800262a:	b002      	add	sp, #8
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MAX31856_WriteRegister(hmax, MAX31856_CR0_REG, cr0);
 8002630:	f7ff be69 	b.w	8002306 <MAX31856_WriteRegister>
}
 8002634:	2001      	movs	r0, #1
 8002636:	b002      	add	sp, #8
 8002638:	bd10      	pop	{r4, pc}

0800263a <MAX31856_SetFaultMask>:
max31856_status_t MAX31856_SetFaultMask(MAX31856_Handle_t *hmax, uint8_t mask) {
 800263a:	460a      	mov	r2, r1
    if (hmax == NULL) return MAX31856_ERROR;
 800263c:	b110      	cbz	r0, 8002644 <MAX31856_SetFaultMask+0xa>
    return MAX31856_WriteRegister(hmax, MAX31856_MASK_REG, mask);
 800263e:	2102      	movs	r1, #2
 8002640:	f7ff be61 	b.w	8002306 <MAX31856_WriteRegister>
}
 8002644:	2001      	movs	r0, #1
 8002646:	4770      	bx	lr

08002648 <MAX31856_Init>:
                                max31856_tc_type_t tc_type) {
 8002648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800264c:	4694      	mov	ip, r2
 800264e:	460d      	mov	r5, r1
 8002650:	461f      	mov	r7, r3
    if (hmax == NULL || platform == NULL) {
 8002652:	4604      	mov	r4, r0
                                max31856_tc_type_t tc_type) {
 8002654:	f89d 8020 	ldrb.w	r8, [sp, #32]
    if (hmax == NULL || platform == NULL) {
 8002658:	b918      	cbnz	r0, 8002662 <MAX31856_Init+0x1a>
        return MAX31856_ERROR;
 800265a:	2001      	movs	r0, #1
}
 800265c:	b002      	add	sp, #8
 800265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hmax == NULL || platform == NULL) {
 8002662:	2900      	cmp	r1, #0
 8002664:	d0f9      	beq.n	800265a <MAX31856_Init+0x12>
    hmax->platform = *platform;
 8002666:	4606      	mov	r6, r0
 8002668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800266c:	682b      	ldr	r3, [r5, #0]
    hmax->last_temperature = 0.0f;
 800266e:	2200      	movs	r2, #0
    hmax->platform = *platform;
 8002670:	6033      	str	r3, [r6, #0]
    hmax->avg_mode = MAX31856_AVG_1_SAMPLE;
 8002672:	2300      	movs	r3, #0
 8002674:	7763      	strb	r3, [r4, #29]
    hmax->filter = MAX31856_FILTER_60HZ;
 8002676:	83e3      	strh	r3, [r4, #30]
    hmax->fault_mode = MAX31856_FAULT_COMPARATOR;
 8002678:	6223      	str	r3, [r4, #32]
    hmax->last_tc_raw = 0;
 800267a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (hmax->platform.cs_high) {
 800267c:	68a3      	ldr	r3, [r4, #8]
    hmax->cs_pin = cs_pin;
 800267e:	e9c4 c705 	strd	ip, r7, [r4, #20]
    hmax->tc_type = tc_type;
 8002682:	f884 801c 	strb.w	r8, [r4, #28]
    hmax->last_temperature = 0.0f;
 8002686:	6262      	str	r2, [r4, #36]	@ 0x24
    hmax->last_cj_temperature = 0.0f;
 8002688:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (hmax->platform.cs_high) {
 800268a:	b10b      	cbz	r3, 8002690 <MAX31856_Init+0x48>
        hmax->platform.cs_high(hmax);
 800268c:	4620      	mov	r0, r4
 800268e:	4798      	blx	r3
    if (hmax->platform.delay_ms) {
 8002690:	68e3      	ldr	r3, [r4, #12]
 8002692:	b10b      	cbz	r3, 8002698 <MAX31856_Init+0x50>
        hmax->platform.delay_ms(10);
 8002694:	200a      	movs	r0, #10
 8002696:	4798      	blx	r3
    uint8_t config_reg = 0;
 8002698:	2100      	movs	r1, #0
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &config_reg) != MAX31856_OK) {
 800269a:	4620      	mov	r0, r4
 800269c:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config_reg = 0;
 80026a0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31856_ReadRegister(hmax, MAX31856_CR0_REG, &config_reg) != MAX31856_OK) {
 80026a4:	f7ff fdf1 	bl	800228a <MAX31856_ReadRegister>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d1d6      	bne.n	800265a <MAX31856_Init+0x12>
    MAX31856_ClearFault(hmax);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ffab 	bl	8002608 <MAX31856_ClearFault>
    if (MAX31856_SetTCType(hmax, tc_type) != MAX31856_OK) {
 80026b2:	4641      	mov	r1, r8
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fe4c 	bl	8002352 <MAX31856_SetTCType>
 80026ba:	4601      	mov	r1, r0
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1cc      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetFilter(hmax, MAX31856_FILTER_60HZ) != MAX31856_OK) {
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff fe66 	bl	8002392 <MAX31856_SetFilter>
 80026c6:	4601      	mov	r1, r0
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d1c6      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetAvgMode(hmax, MAX31856_AVG_1_SAMPLE) != MAX31856_OK) {
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff fe82 	bl	80023d6 <MAX31856_SetAvgMode>
 80026d2:	4601      	mov	r1, r0
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d1c0      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetConvMode(hmax, MAX31856_NORMALLY_OFF) != MAX31856_OK) {
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fe9d 	bl	8002418 <MAX31856_SetConvMode>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d1bb      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_EnableCJSensor(hmax, true) != MAX31856_OK) {
 80026e2:	2101      	movs	r1, #1
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff feda 	bl	800249e <MAX31856_EnableCJSensor>
 80026ea:	4601      	mov	r1, r0
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d1b4      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetFaultMask(hmax, 0x00) != MAX31856_OK) {
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ffa2 	bl	800263a <MAX31856_SetFaultMask>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d1af      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetCJHighThreshold(hmax, 125.0f) != MAX31856_OK) {
 80026fa:	4620      	mov	r0, r4
 80026fc:	490d      	ldr	r1, [pc, #52]	@ (8002734 <MAX31856_Init+0xec>)
 80026fe:	f7ff feec 	bl	80024da <MAX31856_SetCJHighThreshold>
 8002702:	2800      	cmp	r0, #0
 8002704:	d1a9      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetCJLowThreshold(hmax, -64.0f) != MAX31856_OK) {
 8002706:	4620      	mov	r0, r4
 8002708:	490b      	ldr	r1, [pc, #44]	@ (8002738 <MAX31856_Init+0xf0>)
 800270a:	f7ff fefa 	bl	8002502 <MAX31856_SetCJLowThreshold>
 800270e:	2800      	cmp	r0, #0
 8002710:	d1a3      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetTCHighThreshold(hmax, 1600.0f) != MAX31856_OK) {
 8002712:	4620      	mov	r0, r4
 8002714:	4909      	ldr	r1, [pc, #36]	@ (800273c <MAX31856_Init+0xf4>)
 8002716:	f7ff ff08 	bl	800252a <MAX31856_SetTCHighThreshold>
 800271a:	2800      	cmp	r0, #0
 800271c:	d19d      	bne.n	800265a <MAX31856_Init+0x12>
    if (MAX31856_SetTCLowThreshold(hmax, -250.0f) != MAX31856_OK) {
 800271e:	4620      	mov	r0, r4
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <MAX31856_Init+0xf8>)
 8002722:	f7ff ff1e 	bl	8002562 <MAX31856_SetTCLowThreshold>
 8002726:	2800      	cmp	r0, #0
 8002728:	d197      	bne.n	800265a <MAX31856_Init+0x12>
    hmax->initialized = true;
 800272a:	2301      	movs	r3, #1
 800272c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    return MAX31856_OK;
 8002730:	e794      	b.n	800265c <MAX31856_Init+0x14>
 8002732:	bf00      	nop
 8002734:	42fa0000 	.word	0x42fa0000
 8002738:	c2800000 	.word	0xc2800000
 800273c:	44c80000 	.word	0x44c80000
 8002740:	c37a0000 	.word	0xc37a0000

08002744 <MAX31856_ReadMultipleRegisters>:

/**
 * @brief Read multiple registers
 */
max31856_status_t MAX31856_ReadMultipleRegisters(MAX31856_Handle_t *hmax, uint8_t start_reg, uint8_t *data, uint8_t count) {
 8002744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002748:	4690      	mov	r8, r2
 800274a:	461f      	mov	r7, r3
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL || count == 0) {
 800274c:	4604      	mov	r4, r0
 800274e:	b920      	cbnz	r0, 800275a <MAX31856_ReadMultipleRegisters+0x16>
        return MAX31856_ERROR;
 8002750:	2601      	movs	r6, #1
        memcpy(data, &rx_data[1], count);
    }

    free(rx_data);
    return status;
}
 8002752:	4630      	mov	r0, r6
 8002754:	b003      	add	sp, #12
 8002756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL || count == 0) {
 800275a:	2a00      	cmp	r2, #0
 800275c:	d0f8      	beq.n	8002750 <MAX31856_ReadMultipleRegisters+0xc>
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f5      	beq.n	8002750 <MAX31856_ReadMultipleRegisters+0xc>
 8002764:	2f00      	cmp	r7, #0
 8002766:	d0f3      	beq.n	8002750 <MAX31856_ReadMultipleRegisters+0xc>
    uint8_t *rx_data = (uint8_t*)malloc(count + 1);
 8002768:	f107 0901 	add.w	r9, r7, #1
    uint8_t tx_data = start_reg & 0x7F; // Clear MSB for read
 800276c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
    uint8_t *rx_data = (uint8_t*)malloc(count + 1);
 8002770:	4648      	mov	r0, r9
    uint8_t tx_data = start_reg & 0x7F; // Clear MSB for read
 8002772:	f88d 1007 	strb.w	r1, [sp, #7]
    uint8_t *rx_data = (uint8_t*)malloc(count + 1);
 8002776:	f000 f873 	bl	8002860 <malloc>
    if (rx_data == NULL) {
 800277a:	4605      	mov	r5, r0
 800277c:	2800      	cmp	r0, #0
 800277e:	d0e7      	beq.n	8002750 <MAX31856_ReadMultipleRegisters+0xc>
    if (hmax->platform.cs_low) {
 8002780:	6863      	ldr	r3, [r4, #4]
 8002782:	b10b      	cbz	r3, 8002788 <MAX31856_ReadMultipleRegisters+0x44>
        hmax->platform.cs_low(hmax);
 8002784:	4620      	mov	r0, r4
 8002786:	4798      	blx	r3
    if (hmax->platform.delay_ms) {
 8002788:	68e3      	ldr	r3, [r4, #12]
 800278a:	b10b      	cbz	r3, 8002790 <MAX31856_ReadMultipleRegisters+0x4c>
        hmax->platform.delay_ms(1);
 800278c:	2001      	movs	r0, #1
 800278e:	4798      	blx	r3
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, count + 1);
 8002790:	464b      	mov	r3, r9
 8002792:	6826      	ldr	r6, [r4, #0]
 8002794:	462a      	mov	r2, r5
 8002796:	4620      	mov	r0, r4
 8002798:	f10d 0107 	add.w	r1, sp, #7
 800279c:	47b0      	blx	r6
    if (hmax->platform.delay_ms) {
 800279e:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, count + 1);
 80027a0:	4606      	mov	r6, r0
    if (hmax->platform.delay_ms) {
 80027a2:	b10b      	cbz	r3, 80027a8 <MAX31856_ReadMultipleRegisters+0x64>
        hmax->platform.delay_ms(1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	4798      	blx	r3
    if (hmax->platform.cs_high) {
 80027a8:	68a3      	ldr	r3, [r4, #8]
 80027aa:	b10b      	cbz	r3, 80027b0 <MAX31856_ReadMultipleRegisters+0x6c>
        hmax->platform.cs_high(hmax);
 80027ac:	4620      	mov	r0, r4
 80027ae:	4798      	blx	r3
    if (status == MAX31856_OK) {
 80027b0:	b926      	cbnz	r6, 80027bc <MAX31856_ReadMultipleRegisters+0x78>
        memcpy(data, &rx_data[1], count);
 80027b2:	463a      	mov	r2, r7
 80027b4:	4640      	mov	r0, r8
 80027b6:	1c69      	adds	r1, r5, #1
 80027b8:	f001 f811 	bl	80037de <memcpy>
    free(rx_data);
 80027bc:	4628      	mov	r0, r5
 80027be:	f000 f857 	bl	8002870 <free>
    return status;
 80027c2:	e7c6      	b.n	8002752 <MAX31856_ReadMultipleRegisters+0xe>

080027c4 <MAX31856_ReadTemperature>:
max31856_status_t MAX31856_ReadTemperature(MAX31856_Handle_t *hmax, float *temperature) {
 80027c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027c6:	460e      	mov	r6, r1
    if (hmax == NULL || temperature == NULL) return MAX31856_ERROR;
 80027c8:	4605      	mov	r5, r0
 80027ca:	b350      	cbz	r0, 8002822 <MAX31856_ReadTemperature+0x5e>
 80027cc:	b349      	cbz	r1, 8002822 <MAX31856_ReadTemperature+0x5e>
    if (hmax->conv_mode == MAX31856_NORMALLY_OFF) {
 80027ce:	7fc3      	ldrb	r3, [r0, #31]
 80027d0:	b153      	cbz	r3, 80027e8 <MAX31856_ReadTemperature+0x24>
    status = MAX31856_ReadMultipleRegisters(hmax, MAX31856_LTCBH_REG, data, 3);
 80027d2:	2303      	movs	r3, #3
 80027d4:	210c      	movs	r1, #12
 80027d6:	4628      	mov	r0, r5
 80027d8:	aa01      	add	r2, sp, #4
 80027da:	f7ff ffb3 	bl	8002744 <MAX31856_ReadMultipleRegisters>
    if (status != MAX31856_OK) return status;
 80027de:	4604      	mov	r4, r0
 80027e0:	b140      	cbz	r0, 80027f4 <MAX31856_ReadTemperature+0x30>
}
 80027e2:	4620      	mov	r0, r4
 80027e4:	b003      	add	sp, #12
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = MAX31856_TriggerOneShot(hmax);
 80027e8:	f7ff fed7 	bl	800259a <MAX31856_TriggerOneShot>
        if (status != MAX31856_OK) return status;
 80027ec:	4604      	mov	r4, r0
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d0ef      	beq.n	80027d2 <MAX31856_ReadTemperature+0xe>
 80027f2:	e7f6      	b.n	80027e2 <MAX31856_ReadTemperature+0x1e>
    uint32_t raw_temp = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 80027f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002802:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002806:	4313      	orrs	r3, r2
    return (float)signed_value * 0.0078125f;
 8002808:	f343 1052 	sbfx	r0, r3, #5, #19
    raw_temp >>= 5; // Shift right to get 19-bit value
 800280c:	095f      	lsrs	r7, r3, #5
    return (float)signed_value * 0.0078125f;
 800280e:	f7fe f9f5 	bl	8000bfc <__aeabi_i2f>
 8002812:	f04f 5170 	mov.w	r1, #1006632960	@ 0x3c000000
 8002816:	f7fe fa45 	bl	8000ca4 <__aeabi_fmul>
    *temperature = MAX31856_ConvertTCTemperature(raw_temp);
 800281a:	6030      	str	r0, [r6, #0]
    hmax->last_temperature = *temperature;
 800281c:	6268      	str	r0, [r5, #36]	@ 0x24
    hmax->last_tc_raw = (int32_t)raw_temp;
 800281e:	62ef      	str	r7, [r5, #44]	@ 0x2c
    return MAX31856_OK;
 8002820:	e7df      	b.n	80027e2 <MAX31856_ReadTemperature+0x1e>
    if (hmax == NULL || temperature == NULL) return MAX31856_ERROR;
 8002822:	2401      	movs	r4, #1
 8002824:	e7dd      	b.n	80027e2 <MAX31856_ReadTemperature+0x1e>

08002826 <MAX31856_ReadCJTemperature>:
max31856_status_t MAX31856_ReadCJTemperature(MAX31856_Handle_t *hmax, float *temperature) {
 8002826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002828:	460e      	mov	r6, r1
    if (hmax == NULL || temperature == NULL) return MAX31856_ERROR;
 800282a:	4605      	mov	r5, r0
 800282c:	b1a8      	cbz	r0, 800285a <MAX31856_ReadCJTemperature+0x34>
 800282e:	b1a1      	cbz	r1, 800285a <MAX31856_ReadCJTemperature+0x34>
    status = MAX31856_ReadMultipleRegisters(hmax, MAX31856_CJTH_REG, data, 2);
 8002830:	2302      	movs	r3, #2
 8002832:	210a      	movs	r1, #10
 8002834:	aa01      	add	r2, sp, #4
 8002836:	f7ff ff85 	bl	8002744 <MAX31856_ReadMultipleRegisters>
    if (status != MAX31856_OK) return status;
 800283a:	4604      	mov	r4, r0
 800283c:	b950      	cbnz	r0, 8002854 <MAX31856_ReadCJTemperature+0x2e>
    return (float)signed_value / 256.0f;
 800283e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002842:	bac0      	revsh	r0, r0
 8002844:	f7fe f9da 	bl	8000bfc <__aeabi_i2f>
 8002848:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800284c:	f7fe fa2a 	bl	8000ca4 <__aeabi_fmul>
    *temperature = MAX31856_ConvertCJTemperature(raw_temp);
 8002850:	6030      	str	r0, [r6, #0]
    hmax->last_cj_temperature = *temperature;
 8002852:	62a8      	str	r0, [r5, #40]	@ 0x28
}
 8002854:	4620      	mov	r0, r4
 8002856:	b002      	add	sp, #8
 8002858:	bd70      	pop	{r4, r5, r6, pc}
    if (hmax == NULL || temperature == NULL) return MAX31856_ERROR;
 800285a:	2401      	movs	r4, #1
 800285c:	e7fa      	b.n	8002854 <MAX31856_ReadCJTemperature+0x2e>
	...

08002860 <malloc>:
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <malloc+0xc>)
 8002862:	4601      	mov	r1, r0
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	f000 b82d 	b.w	80028c4 <_malloc_r>
 800286a:	bf00      	nop
 800286c:	20000018 	.word	0x20000018

08002870 <free>:
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <free+0xc>)
 8002872:	4601      	mov	r1, r0
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f001 be1f 	b.w	80044b8 <_free_r>
 800287a:	bf00      	nop
 800287c:	20000018 	.word	0x20000018

08002880 <sbrk_aligned>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	4e0f      	ldr	r6, [pc, #60]	@ (80028c0 <sbrk_aligned+0x40>)
 8002884:	460c      	mov	r4, r1
 8002886:	6831      	ldr	r1, [r6, #0]
 8002888:	4605      	mov	r5, r0
 800288a:	b911      	cbnz	r1, 8002892 <sbrk_aligned+0x12>
 800288c:	f000 ff4a 	bl	8003724 <_sbrk_r>
 8002890:	6030      	str	r0, [r6, #0]
 8002892:	4621      	mov	r1, r4
 8002894:	4628      	mov	r0, r5
 8002896:	f000 ff45 	bl	8003724 <_sbrk_r>
 800289a:	1c43      	adds	r3, r0, #1
 800289c:	d103      	bne.n	80028a6 <sbrk_aligned+0x26>
 800289e:	f04f 34ff 	mov.w	r4, #4294967295
 80028a2:	4620      	mov	r0, r4
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	1cc4      	adds	r4, r0, #3
 80028a8:	f024 0403 	bic.w	r4, r4, #3
 80028ac:	42a0      	cmp	r0, r4
 80028ae:	d0f8      	beq.n	80028a2 <sbrk_aligned+0x22>
 80028b0:	1a21      	subs	r1, r4, r0
 80028b2:	4628      	mov	r0, r5
 80028b4:	f000 ff36 	bl	8003724 <_sbrk_r>
 80028b8:	3001      	adds	r0, #1
 80028ba:	d1f2      	bne.n	80028a2 <sbrk_aligned+0x22>
 80028bc:	e7ef      	b.n	800289e <sbrk_aligned+0x1e>
 80028be:	bf00      	nop
 80028c0:	200002c8 	.word	0x200002c8

080028c4 <_malloc_r>:
 80028c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028c8:	1ccd      	adds	r5, r1, #3
 80028ca:	f025 0503 	bic.w	r5, r5, #3
 80028ce:	3508      	adds	r5, #8
 80028d0:	2d0c      	cmp	r5, #12
 80028d2:	bf38      	it	cc
 80028d4:	250c      	movcc	r5, #12
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	4606      	mov	r6, r0
 80028da:	db01      	blt.n	80028e0 <_malloc_r+0x1c>
 80028dc:	42a9      	cmp	r1, r5
 80028de:	d904      	bls.n	80028ea <_malloc_r+0x26>
 80028e0:	230c      	movs	r3, #12
 80028e2:	6033      	str	r3, [r6, #0]
 80028e4:	2000      	movs	r0, #0
 80028e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029c0 <_malloc_r+0xfc>
 80028ee:	f000 f869 	bl	80029c4 <__malloc_lock>
 80028f2:	f8d8 3000 	ldr.w	r3, [r8]
 80028f6:	461c      	mov	r4, r3
 80028f8:	bb44      	cbnz	r4, 800294c <_malloc_r+0x88>
 80028fa:	4629      	mov	r1, r5
 80028fc:	4630      	mov	r0, r6
 80028fe:	f7ff ffbf 	bl	8002880 <sbrk_aligned>
 8002902:	1c43      	adds	r3, r0, #1
 8002904:	4604      	mov	r4, r0
 8002906:	d158      	bne.n	80029ba <_malloc_r+0xf6>
 8002908:	f8d8 4000 	ldr.w	r4, [r8]
 800290c:	4627      	mov	r7, r4
 800290e:	2f00      	cmp	r7, #0
 8002910:	d143      	bne.n	800299a <_malloc_r+0xd6>
 8002912:	2c00      	cmp	r4, #0
 8002914:	d04b      	beq.n	80029ae <_malloc_r+0xea>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	4639      	mov	r1, r7
 800291a:	4630      	mov	r0, r6
 800291c:	eb04 0903 	add.w	r9, r4, r3
 8002920:	f000 ff00 	bl	8003724 <_sbrk_r>
 8002924:	4581      	cmp	r9, r0
 8002926:	d142      	bne.n	80029ae <_malloc_r+0xea>
 8002928:	6821      	ldr	r1, [r4, #0]
 800292a:	4630      	mov	r0, r6
 800292c:	1a6d      	subs	r5, r5, r1
 800292e:	4629      	mov	r1, r5
 8002930:	f7ff ffa6 	bl	8002880 <sbrk_aligned>
 8002934:	3001      	adds	r0, #1
 8002936:	d03a      	beq.n	80029ae <_malloc_r+0xea>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	442b      	add	r3, r5
 800293c:	6023      	str	r3, [r4, #0]
 800293e:	f8d8 3000 	ldr.w	r3, [r8]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	bb62      	cbnz	r2, 80029a0 <_malloc_r+0xdc>
 8002946:	f8c8 7000 	str.w	r7, [r8]
 800294a:	e00f      	b.n	800296c <_malloc_r+0xa8>
 800294c:	6822      	ldr	r2, [r4, #0]
 800294e:	1b52      	subs	r2, r2, r5
 8002950:	d420      	bmi.n	8002994 <_malloc_r+0xd0>
 8002952:	2a0b      	cmp	r2, #11
 8002954:	d917      	bls.n	8002986 <_malloc_r+0xc2>
 8002956:	1961      	adds	r1, r4, r5
 8002958:	42a3      	cmp	r3, r4
 800295a:	6025      	str	r5, [r4, #0]
 800295c:	bf18      	it	ne
 800295e:	6059      	strne	r1, [r3, #4]
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	bf08      	it	eq
 8002964:	f8c8 1000 	streq.w	r1, [r8]
 8002968:	5162      	str	r2, [r4, r5]
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	4630      	mov	r0, r6
 800296e:	f000 f82f 	bl	80029d0 <__malloc_unlock>
 8002972:	f104 000b 	add.w	r0, r4, #11
 8002976:	1d23      	adds	r3, r4, #4
 8002978:	f020 0007 	bic.w	r0, r0, #7
 800297c:	1ac2      	subs	r2, r0, r3
 800297e:	bf1c      	itt	ne
 8002980:	1a1b      	subne	r3, r3, r0
 8002982:	50a3      	strne	r3, [r4, r2]
 8002984:	e7af      	b.n	80028e6 <_malloc_r+0x22>
 8002986:	6862      	ldr	r2, [r4, #4]
 8002988:	42a3      	cmp	r3, r4
 800298a:	bf0c      	ite	eq
 800298c:	f8c8 2000 	streq.w	r2, [r8]
 8002990:	605a      	strne	r2, [r3, #4]
 8002992:	e7eb      	b.n	800296c <_malloc_r+0xa8>
 8002994:	4623      	mov	r3, r4
 8002996:	6864      	ldr	r4, [r4, #4]
 8002998:	e7ae      	b.n	80028f8 <_malloc_r+0x34>
 800299a:	463c      	mov	r4, r7
 800299c:	687f      	ldr	r7, [r7, #4]
 800299e:	e7b6      	b.n	800290e <_malloc_r+0x4a>
 80029a0:	461a      	mov	r2, r3
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	42a3      	cmp	r3, r4
 80029a6:	d1fb      	bne.n	80029a0 <_malloc_r+0xdc>
 80029a8:	2300      	movs	r3, #0
 80029aa:	6053      	str	r3, [r2, #4]
 80029ac:	e7de      	b.n	800296c <_malloc_r+0xa8>
 80029ae:	230c      	movs	r3, #12
 80029b0:	4630      	mov	r0, r6
 80029b2:	6033      	str	r3, [r6, #0]
 80029b4:	f000 f80c 	bl	80029d0 <__malloc_unlock>
 80029b8:	e794      	b.n	80028e4 <_malloc_r+0x20>
 80029ba:	6005      	str	r5, [r0, #0]
 80029bc:	e7d6      	b.n	800296c <_malloc_r+0xa8>
 80029be:	bf00      	nop
 80029c0:	200002cc 	.word	0x200002cc

080029c4 <__malloc_lock>:
 80029c4:	4801      	ldr	r0, [pc, #4]	@ (80029cc <__malloc_lock+0x8>)
 80029c6:	f000 befa 	b.w	80037be <__retarget_lock_acquire_recursive>
 80029ca:	bf00      	nop
 80029cc:	20000410 	.word	0x20000410

080029d0 <__malloc_unlock>:
 80029d0:	4801      	ldr	r0, [pc, #4]	@ (80029d8 <__malloc_unlock+0x8>)
 80029d2:	f000 bef5 	b.w	80037c0 <__retarget_lock_release_recursive>
 80029d6:	bf00      	nop
 80029d8:	20000410 	.word	0x20000410

080029dc <__cvt>:
 80029dc:	2b00      	cmp	r3, #0
 80029de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e2:	461d      	mov	r5, r3
 80029e4:	bfbb      	ittet	lt
 80029e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80029ea:	461d      	movlt	r5, r3
 80029ec:	2300      	movge	r3, #0
 80029ee:	232d      	movlt	r3, #45	@ 0x2d
 80029f0:	b088      	sub	sp, #32
 80029f2:	4614      	mov	r4, r2
 80029f4:	bfb8      	it	lt
 80029f6:	4614      	movlt	r4, r2
 80029f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80029fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80029fc:	7013      	strb	r3, [r2, #0]
 80029fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002a00:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002a04:	f023 0820 	bic.w	r8, r3, #32
 8002a08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a0c:	d005      	beq.n	8002a1a <__cvt+0x3e>
 8002a0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a12:	d100      	bne.n	8002a16 <__cvt+0x3a>
 8002a14:	3601      	adds	r6, #1
 8002a16:	2302      	movs	r3, #2
 8002a18:	e000      	b.n	8002a1c <__cvt+0x40>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	aa07      	add	r2, sp, #28
 8002a1e:	9204      	str	r2, [sp, #16]
 8002a20:	aa06      	add	r2, sp, #24
 8002a22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002a26:	e9cd 3600 	strd	r3, r6, [sp]
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	f000 ff6f 	bl	8003910 <_dtoa_r>
 8002a32:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002a36:	4607      	mov	r7, r0
 8002a38:	d119      	bne.n	8002a6e <__cvt+0x92>
 8002a3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002a3c:	07db      	lsls	r3, r3, #31
 8002a3e:	d50e      	bpl.n	8002a5e <__cvt+0x82>
 8002a40:	eb00 0906 	add.w	r9, r0, r6
 8002a44:	2200      	movs	r2, #0
 8002a46:	2300      	movs	r3, #0
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8002a50:	b108      	cbz	r0, 8002a56 <__cvt+0x7a>
 8002a52:	f8cd 901c 	str.w	r9, [sp, #28]
 8002a56:	2230      	movs	r2, #48	@ 0x30
 8002a58:	9b07      	ldr	r3, [sp, #28]
 8002a5a:	454b      	cmp	r3, r9
 8002a5c:	d31e      	bcc.n	8002a9c <__cvt+0xc0>
 8002a5e:	4638      	mov	r0, r7
 8002a60:	9b07      	ldr	r3, [sp, #28]
 8002a62:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002a64:	1bdb      	subs	r3, r3, r7
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	b008      	add	sp, #32
 8002a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a72:	eb00 0906 	add.w	r9, r0, r6
 8002a76:	d1e5      	bne.n	8002a44 <__cvt+0x68>
 8002a78:	7803      	ldrb	r3, [r0, #0]
 8002a7a:	2b30      	cmp	r3, #48	@ 0x30
 8002a7c:	d10a      	bne.n	8002a94 <__cvt+0xb8>
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2300      	movs	r3, #0
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd ff8f 	bl	80009a8 <__aeabi_dcmpeq>
 8002a8a:	b918      	cbnz	r0, 8002a94 <__cvt+0xb8>
 8002a8c:	f1c6 0601 	rsb	r6, r6, #1
 8002a90:	f8ca 6000 	str.w	r6, [sl]
 8002a94:	f8da 3000 	ldr.w	r3, [sl]
 8002a98:	4499      	add	r9, r3
 8002a9a:	e7d3      	b.n	8002a44 <__cvt+0x68>
 8002a9c:	1c59      	adds	r1, r3, #1
 8002a9e:	9107      	str	r1, [sp, #28]
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e7d9      	b.n	8002a58 <__cvt+0x7c>

08002aa4 <__exponent>:
 8002aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aa6:	2900      	cmp	r1, #0
 8002aa8:	bfb6      	itet	lt
 8002aaa:	232d      	movlt	r3, #45	@ 0x2d
 8002aac:	232b      	movge	r3, #43	@ 0x2b
 8002aae:	4249      	neglt	r1, r1
 8002ab0:	2909      	cmp	r1, #9
 8002ab2:	7002      	strb	r2, [r0, #0]
 8002ab4:	7043      	strb	r3, [r0, #1]
 8002ab6:	dd29      	ble.n	8002b0c <__exponent+0x68>
 8002ab8:	f10d 0307 	add.w	r3, sp, #7
 8002abc:	461d      	mov	r5, r3
 8002abe:	270a      	movs	r7, #10
 8002ac0:	fbb1 f6f7 	udiv	r6, r1, r7
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	fb07 1416 	mls	r4, r7, r6, r1
 8002aca:	3430      	adds	r4, #48	@ 0x30
 8002acc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	2c63      	cmp	r4, #99	@ 0x63
 8002ad4:	4631      	mov	r1, r6
 8002ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ada:	dcf1      	bgt.n	8002ac0 <__exponent+0x1c>
 8002adc:	3130      	adds	r1, #48	@ 0x30
 8002ade:	1e94      	subs	r4, r2, #2
 8002ae0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	1c41      	adds	r1, r0, #1
 8002ae8:	42ab      	cmp	r3, r5
 8002aea:	d30a      	bcc.n	8002b02 <__exponent+0x5e>
 8002aec:	f10d 0309 	add.w	r3, sp, #9
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	42ac      	cmp	r4, r5
 8002af4:	bf88      	it	hi
 8002af6:	2300      	movhi	r3, #0
 8002af8:	3302      	adds	r3, #2
 8002afa:	4403      	add	r3, r0
 8002afc:	1a18      	subs	r0, r3, r0
 8002afe:	b003      	add	sp, #12
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b02:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002b06:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002b0a:	e7ed      	b.n	8002ae8 <__exponent+0x44>
 8002b0c:	2330      	movs	r3, #48	@ 0x30
 8002b0e:	3130      	adds	r1, #48	@ 0x30
 8002b10:	7083      	strb	r3, [r0, #2]
 8002b12:	70c1      	strb	r1, [r0, #3]
 8002b14:	1d03      	adds	r3, r0, #4
 8002b16:	e7f1      	b.n	8002afc <__exponent+0x58>

08002b18 <_printf_float>:
 8002b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1c:	b091      	sub	sp, #68	@ 0x44
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002b24:	4616      	mov	r6, r2
 8002b26:	461f      	mov	r7, r3
 8002b28:	4605      	mov	r5, r0
 8002b2a:	f000 fdc3 	bl	80036b4 <_localeconv_r>
 8002b2e:	6803      	ldr	r3, [r0, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	9308      	str	r3, [sp, #32]
 8002b34:	f7fd fb0c 	bl	8000150 <strlen>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	930e      	str	r3, [sp, #56]	@ 0x38
 8002b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b40:	9009      	str	r0, [sp, #36]	@ 0x24
 8002b42:	3307      	adds	r3, #7
 8002b44:	f023 0307 	bic.w	r3, r3, #7
 8002b48:	f103 0208 	add.w	r2, r3, #8
 8002b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002b50:	f8d4 b000 	ldr.w	fp, [r4]
 8002b54:	f8c8 2000 	str.w	r2, [r8]
 8002b58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002b62:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002b66:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002b6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002b72:	4b9c      	ldr	r3, [pc, #624]	@ (8002de4 <_printf_float+0x2cc>)
 8002b74:	f7fd ff4a 	bl	8000a0c <__aeabi_dcmpun>
 8002b78:	bb70      	cbnz	r0, 8002bd8 <_printf_float+0xc0>
 8002b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	4b98      	ldr	r3, [pc, #608]	@ (8002de4 <_printf_float+0x2cc>)
 8002b84:	f7fd ff24 	bl	80009d0 <__aeabi_dcmple>
 8002b88:	bb30      	cbnz	r0, 8002bd8 <_printf_float+0xc0>
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4640      	mov	r0, r8
 8002b90:	4649      	mov	r1, r9
 8002b92:	f7fd ff13 	bl	80009bc <__aeabi_dcmplt>
 8002b96:	b110      	cbz	r0, 8002b9e <_printf_float+0x86>
 8002b98:	232d      	movs	r3, #45	@ 0x2d
 8002b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b9e:	4a92      	ldr	r2, [pc, #584]	@ (8002de8 <_printf_float+0x2d0>)
 8002ba0:	4b92      	ldr	r3, [pc, #584]	@ (8002dec <_printf_float+0x2d4>)
 8002ba2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002ba6:	bf8c      	ite	hi
 8002ba8:	4690      	movhi	r8, r2
 8002baa:	4698      	movls	r8, r3
 8002bac:	2303      	movs	r3, #3
 8002bae:	f04f 0900 	mov.w	r9, #0
 8002bb2:	6123      	str	r3, [r4, #16]
 8002bb4:	f02b 0304 	bic.w	r3, fp, #4
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	4633      	mov	r3, r6
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	9700      	str	r7, [sp, #0]
 8002bc2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002bc4:	f000 f9d4 	bl	8002f70 <_printf_common>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	f040 8090 	bne.w	8002cee <_printf_float+0x1d6>
 8002bce:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd2:	b011      	add	sp, #68	@ 0x44
 8002bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4649      	mov	r1, r9
 8002be0:	f7fd ff14 	bl	8000a0c <__aeabi_dcmpun>
 8002be4:	b148      	cbz	r0, 8002bfa <_printf_float+0xe2>
 8002be6:	464b      	mov	r3, r9
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bfb8      	it	lt
 8002bec:	232d      	movlt	r3, #45	@ 0x2d
 8002bee:	4a80      	ldr	r2, [pc, #512]	@ (8002df0 <_printf_float+0x2d8>)
 8002bf0:	bfb8      	it	lt
 8002bf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <_printf_float+0x2dc>)
 8002bf8:	e7d3      	b.n	8002ba2 <_printf_float+0x8a>
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	d13f      	bne.n	8002c84 <_printf_float+0x16c>
 8002c04:	2306      	movs	r3, #6
 8002c06:	6063      	str	r3, [r4, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	9206      	str	r2, [sp, #24]
 8002c12:	aa0e      	add	r2, sp, #56	@ 0x38
 8002c14:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002c18:	aa0d      	add	r2, sp, #52	@ 0x34
 8002c1a:	9203      	str	r2, [sp, #12]
 8002c1c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002c20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002c24:	6863      	ldr	r3, [r4, #4]
 8002c26:	4642      	mov	r2, r8
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	910a      	str	r1, [sp, #40]	@ 0x28
 8002c30:	f7ff fed4 	bl	80029dc <__cvt>
 8002c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002c36:	4680      	mov	r8, r0
 8002c38:	2947      	cmp	r1, #71	@ 0x47
 8002c3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002c3c:	d128      	bne.n	8002c90 <_printf_float+0x178>
 8002c3e:	1cc8      	adds	r0, r1, #3
 8002c40:	db02      	blt.n	8002c48 <_printf_float+0x130>
 8002c42:	6863      	ldr	r3, [r4, #4]
 8002c44:	4299      	cmp	r1, r3
 8002c46:	dd40      	ble.n	8002cca <_printf_float+0x1b2>
 8002c48:	f1aa 0a02 	sub.w	sl, sl, #2
 8002c4c:	fa5f fa8a 	uxtb.w	sl, sl
 8002c50:	4652      	mov	r2, sl
 8002c52:	3901      	subs	r1, #1
 8002c54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002c58:	910d      	str	r1, [sp, #52]	@ 0x34
 8002c5a:	f7ff ff23 	bl	8002aa4 <__exponent>
 8002c5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002c60:	4681      	mov	r9, r0
 8002c62:	1813      	adds	r3, r2, r0
 8002c64:	2a01      	cmp	r2, #1
 8002c66:	6123      	str	r3, [r4, #16]
 8002c68:	dc02      	bgt.n	8002c70 <_printf_float+0x158>
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	07d2      	lsls	r2, r2, #31
 8002c6e:	d501      	bpl.n	8002c74 <_printf_float+0x15c>
 8002c70:	3301      	adds	r3, #1
 8002c72:	6123      	str	r3, [r4, #16]
 8002c74:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d09e      	beq.n	8002bba <_printf_float+0xa2>
 8002c7c:	232d      	movs	r3, #45	@ 0x2d
 8002c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c82:	e79a      	b.n	8002bba <_printf_float+0xa2>
 8002c84:	2947      	cmp	r1, #71	@ 0x47
 8002c86:	d1bf      	bne.n	8002c08 <_printf_float+0xf0>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1bd      	bne.n	8002c08 <_printf_float+0xf0>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e7ba      	b.n	8002c06 <_printf_float+0xee>
 8002c90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002c94:	d9dc      	bls.n	8002c50 <_printf_float+0x138>
 8002c96:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002c9a:	d118      	bne.n	8002cce <_printf_float+0x1b6>
 8002c9c:	2900      	cmp	r1, #0
 8002c9e:	6863      	ldr	r3, [r4, #4]
 8002ca0:	dd0b      	ble.n	8002cba <_printf_float+0x1a2>
 8002ca2:	6121      	str	r1, [r4, #16]
 8002ca4:	b913      	cbnz	r3, 8002cac <_printf_float+0x194>
 8002ca6:	6822      	ldr	r2, [r4, #0]
 8002ca8:	07d0      	lsls	r0, r2, #31
 8002caa:	d502      	bpl.n	8002cb2 <_printf_float+0x19a>
 8002cac:	3301      	adds	r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	f04f 0900 	mov.w	r9, #0
 8002cb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002cb8:	e7dc      	b.n	8002c74 <_printf_float+0x15c>
 8002cba:	b913      	cbnz	r3, 8002cc2 <_printf_float+0x1aa>
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	07d2      	lsls	r2, r2, #31
 8002cc0:	d501      	bpl.n	8002cc6 <_printf_float+0x1ae>
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	e7f4      	b.n	8002cb0 <_printf_float+0x198>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e7f2      	b.n	8002cb0 <_printf_float+0x198>
 8002cca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	db05      	blt.n	8002ce0 <_printf_float+0x1c8>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	6121      	str	r1, [r4, #16]
 8002cd8:	07d8      	lsls	r0, r3, #31
 8002cda:	d5ea      	bpl.n	8002cb2 <_printf_float+0x19a>
 8002cdc:	1c4b      	adds	r3, r1, #1
 8002cde:	e7e7      	b.n	8002cb0 <_printf_float+0x198>
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	bfcc      	ite	gt
 8002ce4:	2201      	movgt	r2, #1
 8002ce6:	f1c1 0202 	rsble	r2, r1, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	e7e0      	b.n	8002cb0 <_printf_float+0x198>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	055a      	lsls	r2, r3, #21
 8002cf2:	d407      	bmi.n	8002d04 <_printf_float+0x1ec>
 8002cf4:	6923      	ldr	r3, [r4, #16]
 8002cf6:	4642      	mov	r2, r8
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	47b8      	blx	r7
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d12b      	bne.n	8002d5a <_printf_float+0x242>
 8002d02:	e764      	b.n	8002bce <_printf_float+0xb6>
 8002d04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d08:	f240 80dc 	bls.w	8002ec4 <_printf_float+0x3ac>
 8002d0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d10:	2200      	movs	r2, #0
 8002d12:	2300      	movs	r3, #0
 8002d14:	f7fd fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d033      	beq.n	8002d84 <_printf_float+0x26c>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4631      	mov	r1, r6
 8002d20:	4628      	mov	r0, r5
 8002d22:	4a35      	ldr	r2, [pc, #212]	@ (8002df8 <_printf_float+0x2e0>)
 8002d24:	47b8      	blx	r7
 8002d26:	3001      	adds	r0, #1
 8002d28:	f43f af51 	beq.w	8002bce <_printf_float+0xb6>
 8002d2c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002d30:	4543      	cmp	r3, r8
 8002d32:	db02      	blt.n	8002d3a <_printf_float+0x222>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	07d8      	lsls	r0, r3, #31
 8002d38:	d50f      	bpl.n	8002d5a <_printf_float+0x242>
 8002d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002d3e:	4631      	mov	r1, r6
 8002d40:	4628      	mov	r0, r5
 8002d42:	47b8      	blx	r7
 8002d44:	3001      	adds	r0, #1
 8002d46:	f43f af42 	beq.w	8002bce <_printf_float+0xb6>
 8002d4a:	f04f 0900 	mov.w	r9, #0
 8002d4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d52:	f104 0a1a 	add.w	sl, r4, #26
 8002d56:	45c8      	cmp	r8, r9
 8002d58:	dc09      	bgt.n	8002d6e <_printf_float+0x256>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	079b      	lsls	r3, r3, #30
 8002d5e:	f100 8102 	bmi.w	8002f66 <_printf_float+0x44e>
 8002d62:	68e0      	ldr	r0, [r4, #12]
 8002d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002d66:	4298      	cmp	r0, r3
 8002d68:	bfb8      	it	lt
 8002d6a:	4618      	movlt	r0, r3
 8002d6c:	e731      	b.n	8002bd2 <_printf_float+0xba>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	4652      	mov	r2, sl
 8002d72:	4631      	mov	r1, r6
 8002d74:	4628      	mov	r0, r5
 8002d76:	47b8      	blx	r7
 8002d78:	3001      	adds	r0, #1
 8002d7a:	f43f af28 	beq.w	8002bce <_printf_float+0xb6>
 8002d7e:	f109 0901 	add.w	r9, r9, #1
 8002d82:	e7e8      	b.n	8002d56 <_printf_float+0x23e>
 8002d84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dc38      	bgt.n	8002dfc <_printf_float+0x2e4>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4628      	mov	r0, r5
 8002d90:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <_printf_float+0x2e0>)
 8002d92:	47b8      	blx	r7
 8002d94:	3001      	adds	r0, #1
 8002d96:	f43f af1a 	beq.w	8002bce <_printf_float+0xb6>
 8002d9a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002d9e:	ea59 0303 	orrs.w	r3, r9, r3
 8002da2:	d102      	bne.n	8002daa <_printf_float+0x292>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	07d9      	lsls	r1, r3, #31
 8002da8:	d5d7      	bpl.n	8002d5a <_printf_float+0x242>
 8002daa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dae:	4631      	mov	r1, r6
 8002db0:	4628      	mov	r0, r5
 8002db2:	47b8      	blx	r7
 8002db4:	3001      	adds	r0, #1
 8002db6:	f43f af0a 	beq.w	8002bce <_printf_float+0xb6>
 8002dba:	f04f 0a00 	mov.w	sl, #0
 8002dbe:	f104 0b1a 	add.w	fp, r4, #26
 8002dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	4553      	cmp	r3, sl
 8002dc8:	dc01      	bgt.n	8002dce <_printf_float+0x2b6>
 8002dca:	464b      	mov	r3, r9
 8002dcc:	e793      	b.n	8002cf6 <_printf_float+0x1de>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	465a      	mov	r2, fp
 8002dd2:	4631      	mov	r1, r6
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	47b8      	blx	r7
 8002dd8:	3001      	adds	r0, #1
 8002dda:	f43f aef8 	beq.w	8002bce <_printf_float+0xb6>
 8002dde:	f10a 0a01 	add.w	sl, sl, #1
 8002de2:	e7ee      	b.n	8002dc2 <_printf_float+0x2aa>
 8002de4:	7fefffff 	.word	0x7fefffff
 8002de8:	0800537a 	.word	0x0800537a
 8002dec:	08005376 	.word	0x08005376
 8002df0:	08005382 	.word	0x08005382
 8002df4:	0800537e 	.word	0x0800537e
 8002df8:	08005386 	.word	0x08005386
 8002dfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002dfe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002e02:	4553      	cmp	r3, sl
 8002e04:	bfa8      	it	ge
 8002e06:	4653      	movge	r3, sl
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	dc36      	bgt.n	8002e7c <_printf_float+0x364>
 8002e0e:	f04f 0b00 	mov.w	fp, #0
 8002e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e16:	f104 021a 	add.w	r2, r4, #26
 8002e1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e1e:	eba3 0309 	sub.w	r3, r3, r9
 8002e22:	455b      	cmp	r3, fp
 8002e24:	dc31      	bgt.n	8002e8a <_printf_float+0x372>
 8002e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e28:	459a      	cmp	sl, r3
 8002e2a:	dc3a      	bgt.n	8002ea2 <_printf_float+0x38a>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	07da      	lsls	r2, r3, #31
 8002e30:	d437      	bmi.n	8002ea2 <_printf_float+0x38a>
 8002e32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e34:	ebaa 0903 	sub.w	r9, sl, r3
 8002e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8002e3e:	4599      	cmp	r9, r3
 8002e40:	bfa8      	it	ge
 8002e42:	4699      	movge	r9, r3
 8002e44:	f1b9 0f00 	cmp.w	r9, #0
 8002e48:	dc33      	bgt.n	8002eb2 <_printf_float+0x39a>
 8002e4a:	f04f 0800 	mov.w	r8, #0
 8002e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e52:	f104 0b1a 	add.w	fp, r4, #26
 8002e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e58:	ebaa 0303 	sub.w	r3, sl, r3
 8002e5c:	eba3 0309 	sub.w	r3, r3, r9
 8002e60:	4543      	cmp	r3, r8
 8002e62:	f77f af7a 	ble.w	8002d5a <_printf_float+0x242>
 8002e66:	2301      	movs	r3, #1
 8002e68:	465a      	mov	r2, fp
 8002e6a:	4631      	mov	r1, r6
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	47b8      	blx	r7
 8002e70:	3001      	adds	r0, #1
 8002e72:	f43f aeac 	beq.w	8002bce <_printf_float+0xb6>
 8002e76:	f108 0801 	add.w	r8, r8, #1
 8002e7a:	e7ec      	b.n	8002e56 <_printf_float+0x33e>
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	4631      	mov	r1, r6
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b8      	blx	r7
 8002e84:	3001      	adds	r0, #1
 8002e86:	d1c2      	bne.n	8002e0e <_printf_float+0x2f6>
 8002e88:	e6a1      	b.n	8002bce <_printf_float+0xb6>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	4628      	mov	r0, r5
 8002e90:	920a      	str	r2, [sp, #40]	@ 0x28
 8002e92:	47b8      	blx	r7
 8002e94:	3001      	adds	r0, #1
 8002e96:	f43f ae9a 	beq.w	8002bce <_printf_float+0xb6>
 8002e9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e9c:	f10b 0b01 	add.w	fp, fp, #1
 8002ea0:	e7bb      	b.n	8002e1a <_printf_float+0x302>
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	47b8      	blx	r7
 8002eac:	3001      	adds	r0, #1
 8002eae:	d1c0      	bne.n	8002e32 <_printf_float+0x31a>
 8002eb0:	e68d      	b.n	8002bce <_printf_float+0xb6>
 8002eb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4628      	mov	r0, r5
 8002eba:	4442      	add	r2, r8
 8002ebc:	47b8      	blx	r7
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d1c3      	bne.n	8002e4a <_printf_float+0x332>
 8002ec2:	e684      	b.n	8002bce <_printf_float+0xb6>
 8002ec4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002ec8:	f1ba 0f01 	cmp.w	sl, #1
 8002ecc:	dc01      	bgt.n	8002ed2 <_printf_float+0x3ba>
 8002ece:	07db      	lsls	r3, r3, #31
 8002ed0:	d536      	bpl.n	8002f40 <_printf_float+0x428>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4628      	mov	r0, r5
 8002eda:	47b8      	blx	r7
 8002edc:	3001      	adds	r0, #1
 8002ede:	f43f ae76 	beq.w	8002bce <_printf_float+0xb6>
 8002ee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b8      	blx	r7
 8002eec:	3001      	adds	r0, #1
 8002eee:	f43f ae6e 	beq.w	8002bce <_printf_float+0xb6>
 8002ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002efe:	f7fd fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8002f02:	b9c0      	cbnz	r0, 8002f36 <_printf_float+0x41e>
 8002f04:	4653      	mov	r3, sl
 8002f06:	f108 0201 	add.w	r2, r8, #1
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	47b8      	blx	r7
 8002f10:	3001      	adds	r0, #1
 8002f12:	d10c      	bne.n	8002f2e <_printf_float+0x416>
 8002f14:	e65b      	b.n	8002bce <_printf_float+0xb6>
 8002f16:	2301      	movs	r3, #1
 8002f18:	465a      	mov	r2, fp
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f ae54 	beq.w	8002bce <_printf_float+0xb6>
 8002f26:	f108 0801 	add.w	r8, r8, #1
 8002f2a:	45d0      	cmp	r8, sl
 8002f2c:	dbf3      	blt.n	8002f16 <_printf_float+0x3fe>
 8002f2e:	464b      	mov	r3, r9
 8002f30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002f34:	e6e0      	b.n	8002cf8 <_printf_float+0x1e0>
 8002f36:	f04f 0800 	mov.w	r8, #0
 8002f3a:	f104 0b1a 	add.w	fp, r4, #26
 8002f3e:	e7f4      	b.n	8002f2a <_printf_float+0x412>
 8002f40:	2301      	movs	r3, #1
 8002f42:	4642      	mov	r2, r8
 8002f44:	e7e1      	b.n	8002f0a <_printf_float+0x3f2>
 8002f46:	2301      	movs	r3, #1
 8002f48:	464a      	mov	r2, r9
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b8      	blx	r7
 8002f50:	3001      	adds	r0, #1
 8002f52:	f43f ae3c 	beq.w	8002bce <_printf_float+0xb6>
 8002f56:	f108 0801 	add.w	r8, r8, #1
 8002f5a:	68e3      	ldr	r3, [r4, #12]
 8002f5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002f5e:	1a5b      	subs	r3, r3, r1
 8002f60:	4543      	cmp	r3, r8
 8002f62:	dcf0      	bgt.n	8002f46 <_printf_float+0x42e>
 8002f64:	e6fd      	b.n	8002d62 <_printf_float+0x24a>
 8002f66:	f04f 0800 	mov.w	r8, #0
 8002f6a:	f104 0919 	add.w	r9, r4, #25
 8002f6e:	e7f4      	b.n	8002f5a <_printf_float+0x442>

08002f70 <_printf_common>:
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	4616      	mov	r6, r2
 8002f76:	4698      	mov	r8, r3
 8002f78:	688a      	ldr	r2, [r1, #8]
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	bfb8      	it	lt
 8002f82:	4613      	movlt	r3, r2
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f90:	b10a      	cbz	r2, 8002f96 <_printf_common+0x26>
 8002f92:	3301      	adds	r3, #1
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	0699      	lsls	r1, r3, #26
 8002f9a:	bf42      	ittt	mi
 8002f9c:	6833      	ldrmi	r3, [r6, #0]
 8002f9e:	3302      	addmi	r3, #2
 8002fa0:	6033      	strmi	r3, [r6, #0]
 8002fa2:	6825      	ldr	r5, [r4, #0]
 8002fa4:	f015 0506 	ands.w	r5, r5, #6
 8002fa8:	d106      	bne.n	8002fb8 <_printf_common+0x48>
 8002faa:	f104 0a19 	add.w	sl, r4, #25
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	6832      	ldr	r2, [r6, #0]
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	42ab      	cmp	r3, r5
 8002fb6:	dc2b      	bgt.n	8003010 <_printf_common+0xa0>
 8002fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	3b00      	subs	r3, #0
 8002fc0:	bf18      	it	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	0692      	lsls	r2, r2, #26
 8002fc6:	d430      	bmi.n	800302a <_printf_common+0xba>
 8002fc8:	4641      	mov	r1, r8
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fd0:	47c8      	blx	r9
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d023      	beq.n	800301e <_printf_common+0xae>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	6922      	ldr	r2, [r4, #16]
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf14      	ite	ne
 8002fe2:	2500      	movne	r5, #0
 8002fe4:	6833      	ldreq	r3, [r6, #0]
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	bf08      	it	eq
 8002fec:	68e5      	ldreq	r5, [r4, #12]
 8002fee:	f104 041a 	add.w	r4, r4, #26
 8002ff2:	bf08      	it	eq
 8002ff4:	1aed      	subeq	r5, r5, r3
 8002ff6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ffa:	bf08      	it	eq
 8002ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003000:	4293      	cmp	r3, r2
 8003002:	bfc4      	itt	gt
 8003004:	1a9b      	subgt	r3, r3, r2
 8003006:	18ed      	addgt	r5, r5, r3
 8003008:	42b5      	cmp	r5, r6
 800300a:	d11a      	bne.n	8003042 <_printf_common+0xd2>
 800300c:	2000      	movs	r0, #0
 800300e:	e008      	b.n	8003022 <_printf_common+0xb2>
 8003010:	2301      	movs	r3, #1
 8003012:	4652      	mov	r2, sl
 8003014:	4641      	mov	r1, r8
 8003016:	4638      	mov	r0, r7
 8003018:	47c8      	blx	r9
 800301a:	3001      	adds	r0, #1
 800301c:	d103      	bne.n	8003026 <_printf_common+0xb6>
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003026:	3501      	adds	r5, #1
 8003028:	e7c1      	b.n	8002fae <_printf_common+0x3e>
 800302a:	2030      	movs	r0, #48	@ 0x30
 800302c:	18e1      	adds	r1, r4, r3
 800302e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003038:	4422      	add	r2, r4
 800303a:	3302      	adds	r3, #2
 800303c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003040:	e7c2      	b.n	8002fc8 <_printf_common+0x58>
 8003042:	2301      	movs	r3, #1
 8003044:	4622      	mov	r2, r4
 8003046:	4641      	mov	r1, r8
 8003048:	4638      	mov	r0, r7
 800304a:	47c8      	blx	r9
 800304c:	3001      	adds	r0, #1
 800304e:	d0e6      	beq.n	800301e <_printf_common+0xae>
 8003050:	3601      	adds	r6, #1
 8003052:	e7d9      	b.n	8003008 <_printf_common+0x98>

08003054 <_printf_i>:
 8003054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	7e0f      	ldrb	r7, [r1, #24]
 800305a:	4691      	mov	r9, r2
 800305c:	2f78      	cmp	r7, #120	@ 0x78
 800305e:	4680      	mov	r8, r0
 8003060:	460c      	mov	r4, r1
 8003062:	469a      	mov	sl, r3
 8003064:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800306a:	d807      	bhi.n	800307c <_printf_i+0x28>
 800306c:	2f62      	cmp	r7, #98	@ 0x62
 800306e:	d80a      	bhi.n	8003086 <_printf_i+0x32>
 8003070:	2f00      	cmp	r7, #0
 8003072:	f000 80d1 	beq.w	8003218 <_printf_i+0x1c4>
 8003076:	2f58      	cmp	r7, #88	@ 0x58
 8003078:	f000 80b8 	beq.w	80031ec <_printf_i+0x198>
 800307c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003084:	e03a      	b.n	80030fc <_printf_i+0xa8>
 8003086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800308a:	2b15      	cmp	r3, #21
 800308c:	d8f6      	bhi.n	800307c <_printf_i+0x28>
 800308e:	a101      	add	r1, pc, #4	@ (adr r1, 8003094 <_printf_i+0x40>)
 8003090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003094:	080030ed 	.word	0x080030ed
 8003098:	08003101 	.word	0x08003101
 800309c:	0800307d 	.word	0x0800307d
 80030a0:	0800307d 	.word	0x0800307d
 80030a4:	0800307d 	.word	0x0800307d
 80030a8:	0800307d 	.word	0x0800307d
 80030ac:	08003101 	.word	0x08003101
 80030b0:	0800307d 	.word	0x0800307d
 80030b4:	0800307d 	.word	0x0800307d
 80030b8:	0800307d 	.word	0x0800307d
 80030bc:	0800307d 	.word	0x0800307d
 80030c0:	080031ff 	.word	0x080031ff
 80030c4:	0800312b 	.word	0x0800312b
 80030c8:	080031b9 	.word	0x080031b9
 80030cc:	0800307d 	.word	0x0800307d
 80030d0:	0800307d 	.word	0x0800307d
 80030d4:	08003221 	.word	0x08003221
 80030d8:	0800307d 	.word	0x0800307d
 80030dc:	0800312b 	.word	0x0800312b
 80030e0:	0800307d 	.word	0x0800307d
 80030e4:	0800307d 	.word	0x0800307d
 80030e8:	080031c1 	.word	0x080031c1
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6032      	str	r2, [r6, #0]
 80030f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030fc:	2301      	movs	r3, #1
 80030fe:	e09c      	b.n	800323a <_printf_i+0x1e6>
 8003100:	6833      	ldr	r3, [r6, #0]
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	1d19      	adds	r1, r3, #4
 8003106:	6031      	str	r1, [r6, #0]
 8003108:	0606      	lsls	r6, r0, #24
 800310a:	d501      	bpl.n	8003110 <_printf_i+0xbc>
 800310c:	681d      	ldr	r5, [r3, #0]
 800310e:	e003      	b.n	8003118 <_printf_i+0xc4>
 8003110:	0645      	lsls	r5, r0, #25
 8003112:	d5fb      	bpl.n	800310c <_printf_i+0xb8>
 8003114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003118:	2d00      	cmp	r5, #0
 800311a:	da03      	bge.n	8003124 <_printf_i+0xd0>
 800311c:	232d      	movs	r3, #45	@ 0x2d
 800311e:	426d      	negs	r5, r5
 8003120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003124:	230a      	movs	r3, #10
 8003126:	4858      	ldr	r0, [pc, #352]	@ (8003288 <_printf_i+0x234>)
 8003128:	e011      	b.n	800314e <_printf_i+0xfa>
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	6833      	ldr	r3, [r6, #0]
 800312e:	0608      	lsls	r0, r1, #24
 8003130:	f853 5b04 	ldr.w	r5, [r3], #4
 8003134:	d402      	bmi.n	800313c <_printf_i+0xe8>
 8003136:	0649      	lsls	r1, r1, #25
 8003138:	bf48      	it	mi
 800313a:	b2ad      	uxthmi	r5, r5
 800313c:	2f6f      	cmp	r7, #111	@ 0x6f
 800313e:	6033      	str	r3, [r6, #0]
 8003140:	bf14      	ite	ne
 8003142:	230a      	movne	r3, #10
 8003144:	2308      	moveq	r3, #8
 8003146:	4850      	ldr	r0, [pc, #320]	@ (8003288 <_printf_i+0x234>)
 8003148:	2100      	movs	r1, #0
 800314a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800314e:	6866      	ldr	r6, [r4, #4]
 8003150:	2e00      	cmp	r6, #0
 8003152:	60a6      	str	r6, [r4, #8]
 8003154:	db05      	blt.n	8003162 <_printf_i+0x10e>
 8003156:	6821      	ldr	r1, [r4, #0]
 8003158:	432e      	orrs	r6, r5
 800315a:	f021 0104 	bic.w	r1, r1, #4
 800315e:	6021      	str	r1, [r4, #0]
 8003160:	d04b      	beq.n	80031fa <_printf_i+0x1a6>
 8003162:	4616      	mov	r6, r2
 8003164:	fbb5 f1f3 	udiv	r1, r5, r3
 8003168:	fb03 5711 	mls	r7, r3, r1, r5
 800316c:	5dc7      	ldrb	r7, [r0, r7]
 800316e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003172:	462f      	mov	r7, r5
 8003174:	42bb      	cmp	r3, r7
 8003176:	460d      	mov	r5, r1
 8003178:	d9f4      	bls.n	8003164 <_printf_i+0x110>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d10b      	bne.n	8003196 <_printf_i+0x142>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07df      	lsls	r7, r3, #31
 8003182:	d508      	bpl.n	8003196 <_printf_i+0x142>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	4299      	cmp	r1, r3
 800318a:	bfde      	ittt	le
 800318c:	2330      	movle	r3, #48	@ 0x30
 800318e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003196:	1b92      	subs	r2, r2, r6
 8003198:	6122      	str	r2, [r4, #16]
 800319a:	464b      	mov	r3, r9
 800319c:	4621      	mov	r1, r4
 800319e:	4640      	mov	r0, r8
 80031a0:	f8cd a000 	str.w	sl, [sp]
 80031a4:	aa03      	add	r2, sp, #12
 80031a6:	f7ff fee3 	bl	8002f70 <_printf_common>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d14a      	bne.n	8003244 <_printf_i+0x1f0>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b004      	add	sp, #16
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	2778      	movs	r7, #120	@ 0x78
 80031c2:	4832      	ldr	r0, [pc, #200]	@ (800328c <_printf_i+0x238>)
 80031c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	6831      	ldr	r1, [r6, #0]
 80031cc:	061f      	lsls	r7, r3, #24
 80031ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80031d2:	d402      	bmi.n	80031da <_printf_i+0x186>
 80031d4:	065f      	lsls	r7, r3, #25
 80031d6:	bf48      	it	mi
 80031d8:	b2ad      	uxthmi	r5, r5
 80031da:	6031      	str	r1, [r6, #0]
 80031dc:	07d9      	lsls	r1, r3, #31
 80031de:	bf44      	itt	mi
 80031e0:	f043 0320 	orrmi.w	r3, r3, #32
 80031e4:	6023      	strmi	r3, [r4, #0]
 80031e6:	b11d      	cbz	r5, 80031f0 <_printf_i+0x19c>
 80031e8:	2310      	movs	r3, #16
 80031ea:	e7ad      	b.n	8003148 <_printf_i+0xf4>
 80031ec:	4826      	ldr	r0, [pc, #152]	@ (8003288 <_printf_i+0x234>)
 80031ee:	e7e9      	b.n	80031c4 <_printf_i+0x170>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f023 0320 	bic.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e7f6      	b.n	80031e8 <_printf_i+0x194>
 80031fa:	4616      	mov	r6, r2
 80031fc:	e7bd      	b.n	800317a <_printf_i+0x126>
 80031fe:	6833      	ldr	r3, [r6, #0]
 8003200:	6825      	ldr	r5, [r4, #0]
 8003202:	1d18      	adds	r0, r3, #4
 8003204:	6961      	ldr	r1, [r4, #20]
 8003206:	6030      	str	r0, [r6, #0]
 8003208:	062e      	lsls	r6, r5, #24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	d501      	bpl.n	8003212 <_printf_i+0x1be>
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e002      	b.n	8003218 <_printf_i+0x1c4>
 8003212:	0668      	lsls	r0, r5, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0x1ba>
 8003216:	8019      	strh	r1, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	4616      	mov	r6, r2
 800321c:	6123      	str	r3, [r4, #16]
 800321e:	e7bc      	b.n	800319a <_printf_i+0x146>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	6032      	str	r2, [r6, #0]
 8003228:	681e      	ldr	r6, [r3, #0]
 800322a:	6862      	ldr	r2, [r4, #4]
 800322c:	4630      	mov	r0, r6
 800322e:	f000 fac8 	bl	80037c2 <memchr>
 8003232:	b108      	cbz	r0, 8003238 <_printf_i+0x1e4>
 8003234:	1b80      	subs	r0, r0, r6
 8003236:	6060      	str	r0, [r4, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	6123      	str	r3, [r4, #16]
 800323c:	2300      	movs	r3, #0
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003242:	e7aa      	b.n	800319a <_printf_i+0x146>
 8003244:	4632      	mov	r2, r6
 8003246:	4649      	mov	r1, r9
 8003248:	4640      	mov	r0, r8
 800324a:	6923      	ldr	r3, [r4, #16]
 800324c:	47d0      	blx	sl
 800324e:	3001      	adds	r0, #1
 8003250:	d0ad      	beq.n	80031ae <_printf_i+0x15a>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	079b      	lsls	r3, r3, #30
 8003256:	d413      	bmi.n	8003280 <_printf_i+0x22c>
 8003258:	68e0      	ldr	r0, [r4, #12]
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	4298      	cmp	r0, r3
 800325e:	bfb8      	it	lt
 8003260:	4618      	movlt	r0, r3
 8003262:	e7a6      	b.n	80031b2 <_printf_i+0x15e>
 8003264:	2301      	movs	r3, #1
 8003266:	4632      	mov	r2, r6
 8003268:	4649      	mov	r1, r9
 800326a:	4640      	mov	r0, r8
 800326c:	47d0      	blx	sl
 800326e:	3001      	adds	r0, #1
 8003270:	d09d      	beq.n	80031ae <_printf_i+0x15a>
 8003272:	3501      	adds	r5, #1
 8003274:	68e3      	ldr	r3, [r4, #12]
 8003276:	9903      	ldr	r1, [sp, #12]
 8003278:	1a5b      	subs	r3, r3, r1
 800327a:	42ab      	cmp	r3, r5
 800327c:	dcf2      	bgt.n	8003264 <_printf_i+0x210>
 800327e:	e7eb      	b.n	8003258 <_printf_i+0x204>
 8003280:	2500      	movs	r5, #0
 8003282:	f104 0619 	add.w	r6, r4, #25
 8003286:	e7f5      	b.n	8003274 <_printf_i+0x220>
 8003288:	08005388 	.word	0x08005388
 800328c:	08005399 	.word	0x08005399

08003290 <std>:
 8003290:	2300      	movs	r3, #0
 8003292:	b510      	push	{r4, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	e9c0 3300 	strd	r3, r3, [r0]
 800329a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800329e:	6083      	str	r3, [r0, #8]
 80032a0:	8181      	strh	r1, [r0, #12]
 80032a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80032a4:	81c2      	strh	r2, [r0, #14]
 80032a6:	6183      	str	r3, [r0, #24]
 80032a8:	4619      	mov	r1, r3
 80032aa:	2208      	movs	r2, #8
 80032ac:	305c      	adds	r0, #92	@ 0x5c
 80032ae:	f000 f9f9 	bl	80036a4 <memset>
 80032b2:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <std+0x58>)
 80032b4:	6224      	str	r4, [r4, #32]
 80032b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <std+0x5c>)
 80032ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <std+0x60>)
 80032be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032c0:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <std+0x64>)
 80032c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <std+0x68>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d006      	beq.n	80032d8 <std+0x48>
 80032ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032ce:	4294      	cmp	r4, r2
 80032d0:	d002      	beq.n	80032d8 <std+0x48>
 80032d2:	33d0      	adds	r3, #208	@ 0xd0
 80032d4:	429c      	cmp	r4, r3
 80032d6:	d105      	bne.n	80032e4 <std+0x54>
 80032d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e0:	f000 ba6c 	b.w	80037bc <__retarget_lock_init_recursive>
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	080034f5 	.word	0x080034f5
 80032ec:	08003517 	.word	0x08003517
 80032f0:	0800354f 	.word	0x0800354f
 80032f4:	08003573 	.word	0x08003573
 80032f8:	200002d0 	.word	0x200002d0

080032fc <stdio_exit_handler>:
 80032fc:	4a02      	ldr	r2, [pc, #8]	@ (8003308 <stdio_exit_handler+0xc>)
 80032fe:	4903      	ldr	r1, [pc, #12]	@ (800330c <stdio_exit_handler+0x10>)
 8003300:	4803      	ldr	r0, [pc, #12]	@ (8003310 <stdio_exit_handler+0x14>)
 8003302:	f000 b869 	b.w	80033d8 <_fwalk_sglue>
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c
 800330c:	08004fbd 	.word	0x08004fbd
 8003310:	2000001c 	.word	0x2000001c

08003314 <cleanup_stdio>:
 8003314:	6841      	ldr	r1, [r0, #4]
 8003316:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <cleanup_stdio+0x34>)
 8003318:	b510      	push	{r4, lr}
 800331a:	4299      	cmp	r1, r3
 800331c:	4604      	mov	r4, r0
 800331e:	d001      	beq.n	8003324 <cleanup_stdio+0x10>
 8003320:	f001 fe4c 	bl	8004fbc <_fflush_r>
 8003324:	68a1      	ldr	r1, [r4, #8]
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <cleanup_stdio+0x38>)
 8003328:	4299      	cmp	r1, r3
 800332a:	d002      	beq.n	8003332 <cleanup_stdio+0x1e>
 800332c:	4620      	mov	r0, r4
 800332e:	f001 fe45 	bl	8004fbc <_fflush_r>
 8003332:	68e1      	ldr	r1, [r4, #12]
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <cleanup_stdio+0x3c>)
 8003336:	4299      	cmp	r1, r3
 8003338:	d004      	beq.n	8003344 <cleanup_stdio+0x30>
 800333a:	4620      	mov	r0, r4
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003340:	f001 be3c 	b.w	8004fbc <_fflush_r>
 8003344:	bd10      	pop	{r4, pc}
 8003346:	bf00      	nop
 8003348:	200002d0 	.word	0x200002d0
 800334c:	20000338 	.word	0x20000338
 8003350:	200003a0 	.word	0x200003a0

08003354 <global_stdio_init.part.0>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <global_stdio_init.part.0+0x30>)
 8003358:	4c0b      	ldr	r4, [pc, #44]	@ (8003388 <global_stdio_init.part.0+0x34>)
 800335a:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <global_stdio_init.part.0+0x38>)
 800335c:	4620      	mov	r0, r4
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	2104      	movs	r1, #4
 8003362:	2200      	movs	r2, #0
 8003364:	f7ff ff94 	bl	8003290 <std>
 8003368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800336c:	2201      	movs	r2, #1
 800336e:	2109      	movs	r1, #9
 8003370:	f7ff ff8e 	bl	8003290 <std>
 8003374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003378:	2202      	movs	r2, #2
 800337a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800337e:	2112      	movs	r1, #18
 8003380:	f7ff bf86 	b.w	8003290 <std>
 8003384:	20000408 	.word	0x20000408
 8003388:	200002d0 	.word	0x200002d0
 800338c:	080032fd 	.word	0x080032fd

08003390 <__sfp_lock_acquire>:
 8003390:	4801      	ldr	r0, [pc, #4]	@ (8003398 <__sfp_lock_acquire+0x8>)
 8003392:	f000 ba14 	b.w	80037be <__retarget_lock_acquire_recursive>
 8003396:	bf00      	nop
 8003398:	20000411 	.word	0x20000411

0800339c <__sfp_lock_release>:
 800339c:	4801      	ldr	r0, [pc, #4]	@ (80033a4 <__sfp_lock_release+0x8>)
 800339e:	f000 ba0f 	b.w	80037c0 <__retarget_lock_release_recursive>
 80033a2:	bf00      	nop
 80033a4:	20000411 	.word	0x20000411

080033a8 <__sinit>:
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4604      	mov	r4, r0
 80033ac:	f7ff fff0 	bl	8003390 <__sfp_lock_acquire>
 80033b0:	6a23      	ldr	r3, [r4, #32]
 80033b2:	b11b      	cbz	r3, 80033bc <__sinit+0x14>
 80033b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b8:	f7ff bff0 	b.w	800339c <__sfp_lock_release>
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <__sinit+0x28>)
 80033be:	6223      	str	r3, [r4, #32]
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__sinit+0x2c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f5      	bne.n	80033b4 <__sinit+0xc>
 80033c8:	f7ff ffc4 	bl	8003354 <global_stdio_init.part.0>
 80033cc:	e7f2      	b.n	80033b4 <__sinit+0xc>
 80033ce:	bf00      	nop
 80033d0:	08003315 	.word	0x08003315
 80033d4:	20000408 	.word	0x20000408

080033d8 <_fwalk_sglue>:
 80033d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033dc:	4607      	mov	r7, r0
 80033de:	4688      	mov	r8, r1
 80033e0:	4614      	mov	r4, r2
 80033e2:	2600      	movs	r6, #0
 80033e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033e8:	f1b9 0901 	subs.w	r9, r9, #1
 80033ec:	d505      	bpl.n	80033fa <_fwalk_sglue+0x22>
 80033ee:	6824      	ldr	r4, [r4, #0]
 80033f0:	2c00      	cmp	r4, #0
 80033f2:	d1f7      	bne.n	80033e4 <_fwalk_sglue+0xc>
 80033f4:	4630      	mov	r0, r6
 80033f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d907      	bls.n	8003410 <_fwalk_sglue+0x38>
 8003400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003404:	3301      	adds	r3, #1
 8003406:	d003      	beq.n	8003410 <_fwalk_sglue+0x38>
 8003408:	4629      	mov	r1, r5
 800340a:	4638      	mov	r0, r7
 800340c:	47c0      	blx	r8
 800340e:	4306      	orrs	r6, r0
 8003410:	3568      	adds	r5, #104	@ 0x68
 8003412:	e7e9      	b.n	80033e8 <_fwalk_sglue+0x10>

08003414 <iprintf>:
 8003414:	b40f      	push	{r0, r1, r2, r3}
 8003416:	b507      	push	{r0, r1, r2, lr}
 8003418:	4906      	ldr	r1, [pc, #24]	@ (8003434 <iprintf+0x20>)
 800341a:	ab04      	add	r3, sp, #16
 800341c:	6808      	ldr	r0, [r1, #0]
 800341e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003422:	6881      	ldr	r1, [r0, #8]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	f001 fc31 	bl	8004c8c <_vfiprintf_r>
 800342a:	b003      	add	sp, #12
 800342c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003430:	b004      	add	sp, #16
 8003432:	4770      	bx	lr
 8003434:	20000018 	.word	0x20000018

08003438 <_puts_r>:
 8003438:	6a03      	ldr	r3, [r0, #32]
 800343a:	b570      	push	{r4, r5, r6, lr}
 800343c:	4605      	mov	r5, r0
 800343e:	460e      	mov	r6, r1
 8003440:	6884      	ldr	r4, [r0, #8]
 8003442:	b90b      	cbnz	r3, 8003448 <_puts_r+0x10>
 8003444:	f7ff ffb0 	bl	80033a8 <__sinit>
 8003448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800344a:	07db      	lsls	r3, r3, #31
 800344c:	d405      	bmi.n	800345a <_puts_r+0x22>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	0598      	lsls	r0, r3, #22
 8003452:	d402      	bmi.n	800345a <_puts_r+0x22>
 8003454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003456:	f000 f9b2 	bl	80037be <__retarget_lock_acquire_recursive>
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	0719      	lsls	r1, r3, #28
 800345e:	d502      	bpl.n	8003466 <_puts_r+0x2e>
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d135      	bne.n	80034d2 <_puts_r+0x9a>
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 f8c5 	bl	80035f8 <__swsetup_r>
 800346e:	b380      	cbz	r0, 80034d2 <_puts_r+0x9a>
 8003470:	f04f 35ff 	mov.w	r5, #4294967295
 8003474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003476:	07da      	lsls	r2, r3, #31
 8003478:	d405      	bmi.n	8003486 <_puts_r+0x4e>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	059b      	lsls	r3, r3, #22
 800347e:	d402      	bmi.n	8003486 <_puts_r+0x4e>
 8003480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003482:	f000 f99d 	bl	80037c0 <__retarget_lock_release_recursive>
 8003486:	4628      	mov	r0, r5
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	2b00      	cmp	r3, #0
 800348c:	da04      	bge.n	8003498 <_puts_r+0x60>
 800348e:	69a2      	ldr	r2, [r4, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	dc17      	bgt.n	80034c4 <_puts_r+0x8c>
 8003494:	290a      	cmp	r1, #10
 8003496:	d015      	beq.n	80034c4 <_puts_r+0x8c>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	6022      	str	r2, [r4, #0]
 800349e:	7019      	strb	r1, [r3, #0]
 80034a0:	68a3      	ldr	r3, [r4, #8]
 80034a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60a3      	str	r3, [r4, #8]
 80034aa:	2900      	cmp	r1, #0
 80034ac:	d1ed      	bne.n	800348a <_puts_r+0x52>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da11      	bge.n	80034d6 <_puts_r+0x9e>
 80034b2:	4622      	mov	r2, r4
 80034b4:	210a      	movs	r1, #10
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f85f 	bl	800357a <__swbuf_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d0d7      	beq.n	8003470 <_puts_r+0x38>
 80034c0:	250a      	movs	r5, #10
 80034c2:	e7d7      	b.n	8003474 <_puts_r+0x3c>
 80034c4:	4622      	mov	r2, r4
 80034c6:	4628      	mov	r0, r5
 80034c8:	f000 f857 	bl	800357a <__swbuf_r>
 80034cc:	3001      	adds	r0, #1
 80034ce:	d1e7      	bne.n	80034a0 <_puts_r+0x68>
 80034d0:	e7ce      	b.n	8003470 <_puts_r+0x38>
 80034d2:	3e01      	subs	r6, #1
 80034d4:	e7e4      	b.n	80034a0 <_puts_r+0x68>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	6022      	str	r2, [r4, #0]
 80034dc:	220a      	movs	r2, #10
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e7ee      	b.n	80034c0 <_puts_r+0x88>
	...

080034e4 <puts>:
 80034e4:	4b02      	ldr	r3, [pc, #8]	@ (80034f0 <puts+0xc>)
 80034e6:	4601      	mov	r1, r0
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	f7ff bfa5 	b.w	8003438 <_puts_r>
 80034ee:	bf00      	nop
 80034f0:	20000018 	.word	0x20000018

080034f4 <__sread>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	f000 f900 	bl	8003700 <_read_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	bfab      	itete	ge
 8003504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003506:	89a3      	ldrhlt	r3, [r4, #12]
 8003508:	181b      	addge	r3, r3, r0
 800350a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800350e:	bfac      	ite	ge
 8003510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003512:	81a3      	strhlt	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__swrite>:
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	461f      	mov	r7, r3
 800351c:	898b      	ldrh	r3, [r1, #12]
 800351e:	4605      	mov	r5, r0
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d505      	bpl.n	8003534 <__swrite+0x1e>
 8003528:	2302      	movs	r3, #2
 800352a:	2200      	movs	r2, #0
 800352c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003530:	f000 f8d4 	bl	80036dc <_lseek_r>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	4632      	mov	r2, r6
 8003538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	4628      	mov	r0, r5
 8003540:	463b      	mov	r3, r7
 8003542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	f000 b8fb 	b.w	8003744 <_write_r>

0800354e <__sseek>:
 800354e:	b510      	push	{r4, lr}
 8003550:	460c      	mov	r4, r1
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 f8c1 	bl	80036dc <_lseek_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	bf15      	itete	ne
 8003560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800356a:	81a3      	strheq	r3, [r4, #12]
 800356c:	bf18      	it	ne
 800356e:	81a3      	strhne	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__sclose>:
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 b8a1 	b.w	80036bc <_close_r>

0800357a <__swbuf_r>:
 800357a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357c:	460e      	mov	r6, r1
 800357e:	4614      	mov	r4, r2
 8003580:	4605      	mov	r5, r0
 8003582:	b118      	cbz	r0, 800358c <__swbuf_r+0x12>
 8003584:	6a03      	ldr	r3, [r0, #32]
 8003586:	b90b      	cbnz	r3, 800358c <__swbuf_r+0x12>
 8003588:	f7ff ff0e 	bl	80033a8 <__sinit>
 800358c:	69a3      	ldr	r3, [r4, #24]
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	071a      	lsls	r2, r3, #28
 8003594:	d501      	bpl.n	800359a <__swbuf_r+0x20>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	b943      	cbnz	r3, 80035ac <__swbuf_r+0x32>
 800359a:	4621      	mov	r1, r4
 800359c:	4628      	mov	r0, r5
 800359e:	f000 f82b 	bl	80035f8 <__swsetup_r>
 80035a2:	b118      	cbz	r0, 80035ac <__swbuf_r+0x32>
 80035a4:	f04f 37ff 	mov.w	r7, #4294967295
 80035a8:	4638      	mov	r0, r7
 80035aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	6922      	ldr	r2, [r4, #16]
 80035b0:	b2f6      	uxtb	r6, r6
 80035b2:	1a98      	subs	r0, r3, r2
 80035b4:	6963      	ldr	r3, [r4, #20]
 80035b6:	4637      	mov	r7, r6
 80035b8:	4283      	cmp	r3, r0
 80035ba:	dc05      	bgt.n	80035c8 <__swbuf_r+0x4e>
 80035bc:	4621      	mov	r1, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	f001 fcfc 	bl	8004fbc <_fflush_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d1ed      	bne.n	80035a4 <__swbuf_r+0x2a>
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60a3      	str	r3, [r4, #8]
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	701e      	strb	r6, [r3, #0]
 80035d6:	6962      	ldr	r2, [r4, #20]
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	429a      	cmp	r2, r3
 80035dc:	d004      	beq.n	80035e8 <__swbuf_r+0x6e>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	07db      	lsls	r3, r3, #31
 80035e2:	d5e1      	bpl.n	80035a8 <__swbuf_r+0x2e>
 80035e4:	2e0a      	cmp	r6, #10
 80035e6:	d1df      	bne.n	80035a8 <__swbuf_r+0x2e>
 80035e8:	4621      	mov	r1, r4
 80035ea:	4628      	mov	r0, r5
 80035ec:	f001 fce6 	bl	8004fbc <_fflush_r>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d0d9      	beq.n	80035a8 <__swbuf_r+0x2e>
 80035f4:	e7d6      	b.n	80035a4 <__swbuf_r+0x2a>
	...

080035f8 <__swsetup_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <__swsetup_r+0xa8>)
 80035fc:	4605      	mov	r5, r0
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	460c      	mov	r4, r1
 8003602:	b118      	cbz	r0, 800360c <__swsetup_r+0x14>
 8003604:	6a03      	ldr	r3, [r0, #32]
 8003606:	b90b      	cbnz	r3, 800360c <__swsetup_r+0x14>
 8003608:	f7ff fece 	bl	80033a8 <__sinit>
 800360c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003610:	0719      	lsls	r1, r3, #28
 8003612:	d422      	bmi.n	800365a <__swsetup_r+0x62>
 8003614:	06da      	lsls	r2, r3, #27
 8003616:	d407      	bmi.n	8003628 <__swsetup_r+0x30>
 8003618:	2209      	movs	r2, #9
 800361a:	602a      	str	r2, [r5, #0]
 800361c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	e033      	b.n	8003690 <__swsetup_r+0x98>
 8003628:	0758      	lsls	r0, r3, #29
 800362a:	d512      	bpl.n	8003652 <__swsetup_r+0x5a>
 800362c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800362e:	b141      	cbz	r1, 8003642 <__swsetup_r+0x4a>
 8003630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003634:	4299      	cmp	r1, r3
 8003636:	d002      	beq.n	800363e <__swsetup_r+0x46>
 8003638:	4628      	mov	r0, r5
 800363a:	f000 ff3d 	bl	80044b8 <_free_r>
 800363e:	2300      	movs	r3, #0
 8003640:	6363      	str	r3, [r4, #52]	@ 0x34
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	6063      	str	r3, [r4, #4]
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	b94b      	cbnz	r3, 8003672 <__swsetup_r+0x7a>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003668:	d003      	beq.n	8003672 <__swsetup_r+0x7a>
 800366a:	4621      	mov	r1, r4
 800366c:	4628      	mov	r0, r5
 800366e:	f001 fcf2 	bl	8005056 <__smakebuf_r>
 8003672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003676:	f013 0201 	ands.w	r2, r3, #1
 800367a:	d00a      	beq.n	8003692 <__swsetup_r+0x9a>
 800367c:	2200      	movs	r2, #0
 800367e:	60a2      	str	r2, [r4, #8]
 8003680:	6962      	ldr	r2, [r4, #20]
 8003682:	4252      	negs	r2, r2
 8003684:	61a2      	str	r2, [r4, #24]
 8003686:	6922      	ldr	r2, [r4, #16]
 8003688:	b942      	cbnz	r2, 800369c <__swsetup_r+0xa4>
 800368a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800368e:	d1c5      	bne.n	800361c <__swsetup_r+0x24>
 8003690:	bd38      	pop	{r3, r4, r5, pc}
 8003692:	0799      	lsls	r1, r3, #30
 8003694:	bf58      	it	pl
 8003696:	6962      	ldrpl	r2, [r4, #20]
 8003698:	60a2      	str	r2, [r4, #8]
 800369a:	e7f4      	b.n	8003686 <__swsetup_r+0x8e>
 800369c:	2000      	movs	r0, #0
 800369e:	e7f7      	b.n	8003690 <__swsetup_r+0x98>
 80036a0:	20000018 	.word	0x20000018

080036a4 <memset>:
 80036a4:	4603      	mov	r3, r0
 80036a6:	4402      	add	r2, r0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	f803 1b01 	strb.w	r1, [r3], #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <_localeconv_r>:
 80036b4:	4800      	ldr	r0, [pc, #0]	@ (80036b8 <_localeconv_r+0x4>)
 80036b6:	4770      	bx	lr
 80036b8:	20000158 	.word	0x20000158

080036bc <_close_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	2300      	movs	r3, #0
 80036c0:	4d05      	ldr	r5, [pc, #20]	@ (80036d8 <_close_r+0x1c>)
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd fe48 	bl	800135c <_close>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_close_r+0x1a>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_close_r+0x1a>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	2000040c 	.word	0x2000040c

080036dc <_lseek_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	2200      	movs	r2, #0
 80036e6:	4d05      	ldr	r5, [pc, #20]	@ (80036fc <_lseek_r+0x20>)
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f7fd fe40 	bl	8001370 <_lseek>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_lseek_r+0x1e>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_lseek_r+0x1e>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	2000040c 	.word	0x2000040c

08003700 <_read_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	2200      	movs	r2, #0
 800370a:	4d05      	ldr	r5, [pc, #20]	@ (8003720 <_read_r+0x20>)
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f7fd fe16 	bl	8001340 <_read>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d102      	bne.n	800371e <_read_r+0x1e>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	b103      	cbz	r3, 800371e <_read_r+0x1e>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	2000040c 	.word	0x2000040c

08003724 <_sbrk_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	2300      	movs	r3, #0
 8003728:	4d05      	ldr	r5, [pc, #20]	@ (8003740 <_sbrk_r+0x1c>)
 800372a:	4604      	mov	r4, r0
 800372c:	4608      	mov	r0, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f7fd fe20 	bl	8001374 <_sbrk>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_sbrk_r+0x1a>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_sbrk_r+0x1a>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	2000040c 	.word	0x2000040c

08003744 <_write_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4604      	mov	r4, r0
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	2200      	movs	r2, #0
 800374e:	4d05      	ldr	r5, [pc, #20]	@ (8003764 <_write_r+0x20>)
 8003750:	602a      	str	r2, [r5, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f7fd fc92 	bl	800107c <_write>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_write_r+0x1e>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_write_r+0x1e>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	2000040c 	.word	0x2000040c

08003768 <__errno>:
 8003768:	4b01      	ldr	r3, [pc, #4]	@ (8003770 <__errno+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000018 	.word	0x20000018

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	2600      	movs	r6, #0
 8003778:	4d0c      	ldr	r5, [pc, #48]	@ (80037ac <__libc_init_array+0x38>)
 800377a:	4c0d      	ldr	r4, [pc, #52]	@ (80037b0 <__libc_init_array+0x3c>)
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	f001 fd76 	bl	8005274 <_init>
 8003788:	2600      	movs	r6, #0
 800378a:	4d0a      	ldr	r5, [pc, #40]	@ (80037b4 <__libc_init_array+0x40>)
 800378c:	4c0a      	ldr	r4, [pc, #40]	@ (80037b8 <__libc_init_array+0x44>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	0800571c 	.word	0x0800571c
 80037b0:	0800571c 	.word	0x0800571c
 80037b4:	0800571c 	.word	0x0800571c
 80037b8:	08005720 	.word	0x08005720

080037bc <__retarget_lock_init_recursive>:
 80037bc:	4770      	bx	lr

080037be <__retarget_lock_acquire_recursive>:
 80037be:	4770      	bx	lr

080037c0 <__retarget_lock_release_recursive>:
 80037c0:	4770      	bx	lr

080037c2 <memchr>:
 80037c2:	4603      	mov	r3, r0
 80037c4:	b510      	push	{r4, lr}
 80037c6:	b2c9      	uxtb	r1, r1
 80037c8:	4402      	add	r2, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	d101      	bne.n	80037d4 <memchr+0x12>
 80037d0:	2000      	movs	r0, #0
 80037d2:	e003      	b.n	80037dc <memchr+0x1a>
 80037d4:	7804      	ldrb	r4, [r0, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	428c      	cmp	r4, r1
 80037da:	d1f6      	bne.n	80037ca <memchr+0x8>
 80037dc:	bd10      	pop	{r4, pc}

080037de <memcpy>:
 80037de:	440a      	add	r2, r1
 80037e0:	4291      	cmp	r1, r2
 80037e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e6:	d100      	bne.n	80037ea <memcpy+0xc>
 80037e8:	4770      	bx	lr
 80037ea:	b510      	push	{r4, lr}
 80037ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037f0:	4291      	cmp	r1, r2
 80037f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f6:	d1f9      	bne.n	80037ec <memcpy+0xe>
 80037f8:	bd10      	pop	{r4, pc}

080037fa <quorem>:
 80037fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fe:	6903      	ldr	r3, [r0, #16]
 8003800:	690c      	ldr	r4, [r1, #16]
 8003802:	4607      	mov	r7, r0
 8003804:	42a3      	cmp	r3, r4
 8003806:	db7e      	blt.n	8003906 <quorem+0x10c>
 8003808:	3c01      	subs	r4, #1
 800380a:	00a3      	lsls	r3, r4, #2
 800380c:	f100 0514 	add.w	r5, r0, #20
 8003810:	f101 0814 	add.w	r8, r1, #20
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003824:	3301      	adds	r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	fbb2 f6f3 	udiv	r6, r2, r3
 800382c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003830:	d32e      	bcc.n	8003890 <quorem+0x96>
 8003832:	f04f 0a00 	mov.w	sl, #0
 8003836:	46c4      	mov	ip, r8
 8003838:	46ae      	mov	lr, r5
 800383a:	46d3      	mov	fp, sl
 800383c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003840:	b298      	uxth	r0, r3
 8003842:	fb06 a000 	mla	r0, r6, r0, sl
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	0c02      	lsrs	r2, r0, #16
 800384a:	fb06 2303 	mla	r3, r6, r3, r2
 800384e:	f8de 2000 	ldr.w	r2, [lr]
 8003852:	b280      	uxth	r0, r0
 8003854:	b292      	uxth	r2, r2
 8003856:	1a12      	subs	r2, r2, r0
 8003858:	445a      	add	r2, fp
 800385a:	f8de 0000 	ldr.w	r0, [lr]
 800385e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003862:	b29b      	uxth	r3, r3
 8003864:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003868:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800386c:	b292      	uxth	r2, r2
 800386e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003872:	45e1      	cmp	r9, ip
 8003874:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003878:	f84e 2b04 	str.w	r2, [lr], #4
 800387c:	d2de      	bcs.n	800383c <quorem+0x42>
 800387e:	9b00      	ldr	r3, [sp, #0]
 8003880:	58eb      	ldr	r3, [r5, r3]
 8003882:	b92b      	cbnz	r3, 8003890 <quorem+0x96>
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	3b04      	subs	r3, #4
 8003888:	429d      	cmp	r5, r3
 800388a:	461a      	mov	r2, r3
 800388c:	d32f      	bcc.n	80038ee <quorem+0xf4>
 800388e:	613c      	str	r4, [r7, #16]
 8003890:	4638      	mov	r0, r7
 8003892:	f001 f8cb 	bl	8004a2c <__mcmp>
 8003896:	2800      	cmp	r0, #0
 8003898:	db25      	blt.n	80038e6 <quorem+0xec>
 800389a:	4629      	mov	r1, r5
 800389c:	2000      	movs	r0, #0
 800389e:	f858 2b04 	ldr.w	r2, [r8], #4
 80038a2:	f8d1 c000 	ldr.w	ip, [r1]
 80038a6:	fa1f fe82 	uxth.w	lr, r2
 80038aa:	fa1f f38c 	uxth.w	r3, ip
 80038ae:	eba3 030e 	sub.w	r3, r3, lr
 80038b2:	4403      	add	r3, r0
 80038b4:	0c12      	lsrs	r2, r2, #16
 80038b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80038ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80038be:	b29b      	uxth	r3, r3
 80038c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038c4:	45c1      	cmp	r9, r8
 80038c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80038ca:	f841 3b04 	str.w	r3, [r1], #4
 80038ce:	d2e6      	bcs.n	800389e <quorem+0xa4>
 80038d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038d8:	b922      	cbnz	r2, 80038e4 <quorem+0xea>
 80038da:	3b04      	subs	r3, #4
 80038dc:	429d      	cmp	r5, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	d30b      	bcc.n	80038fa <quorem+0x100>
 80038e2:	613c      	str	r4, [r7, #16]
 80038e4:	3601      	adds	r6, #1
 80038e6:	4630      	mov	r0, r6
 80038e8:	b003      	add	sp, #12
 80038ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	3b04      	subs	r3, #4
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d1cb      	bne.n	800388e <quorem+0x94>
 80038f6:	3c01      	subs	r4, #1
 80038f8:	e7c6      	b.n	8003888 <quorem+0x8e>
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	3b04      	subs	r3, #4
 80038fe:	2a00      	cmp	r2, #0
 8003900:	d1ef      	bne.n	80038e2 <quorem+0xe8>
 8003902:	3c01      	subs	r4, #1
 8003904:	e7ea      	b.n	80038dc <quorem+0xe2>
 8003906:	2000      	movs	r0, #0
 8003908:	e7ee      	b.n	80038e8 <quorem+0xee>
 800390a:	0000      	movs	r0, r0
 800390c:	0000      	movs	r0, r0
	...

08003910 <_dtoa_r>:
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	69c7      	ldr	r7, [r0, #28]
 800391a:	b097      	sub	sp, #92	@ 0x5c
 800391c:	4681      	mov	r9, r0
 800391e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003922:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003924:	b97f      	cbnz	r7, 8003946 <_dtoa_r+0x36>
 8003926:	2010      	movs	r0, #16
 8003928:	f7fe ff9a 	bl	8002860 <malloc>
 800392c:	4602      	mov	r2, r0
 800392e:	f8c9 001c 	str.w	r0, [r9, #28]
 8003932:	b920      	cbnz	r0, 800393e <_dtoa_r+0x2e>
 8003934:	21ef      	movs	r1, #239	@ 0xef
 8003936:	4bac      	ldr	r3, [pc, #688]	@ (8003be8 <_dtoa_r+0x2d8>)
 8003938:	48ac      	ldr	r0, [pc, #688]	@ (8003bec <_dtoa_r+0x2dc>)
 800393a:	f001 fbeb 	bl	8005114 <__assert_func>
 800393e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003942:	6007      	str	r7, [r0, #0]
 8003944:	60c7      	str	r7, [r0, #12]
 8003946:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	b159      	cbz	r1, 8003966 <_dtoa_r+0x56>
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	2301      	movs	r3, #1
 8003952:	4093      	lsls	r3, r2
 8003954:	604a      	str	r2, [r1, #4]
 8003956:	608b      	str	r3, [r1, #8]
 8003958:	4648      	mov	r0, r9
 800395a:	f000 fe35 	bl	80045c8 <_Bfree>
 800395e:	2200      	movs	r2, #0
 8003960:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	1e2b      	subs	r3, r5, #0
 8003968:	bfaf      	iteee	ge
 800396a:	2300      	movge	r3, #0
 800396c:	2201      	movlt	r2, #1
 800396e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003972:	9307      	strlt	r3, [sp, #28]
 8003974:	bfa8      	it	ge
 8003976:	6033      	strge	r3, [r6, #0]
 8003978:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800397c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bf0 <_dtoa_r+0x2e0>)
 800397e:	bfb8      	it	lt
 8003980:	6032      	strlt	r2, [r6, #0]
 8003982:	ea33 0308 	bics.w	r3, r3, r8
 8003986:	d112      	bne.n	80039ae <_dtoa_r+0x9e>
 8003988:	f242 730f 	movw	r3, #9999	@ 0x270f
 800398c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003994:	4323      	orrs	r3, r4
 8003996:	f000 855e 	beq.w	8004456 <_dtoa_r+0xb46>
 800399a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800399c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003bf4 <_dtoa_r+0x2e4>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8560 	beq.w	8004466 <_dtoa_r+0xb56>
 80039a6:	f10a 0303 	add.w	r3, sl, #3
 80039aa:	f000 bd5a 	b.w	8004462 <_dtoa_r+0xb52>
 80039ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80039b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	2300      	movs	r3, #0
 80039be:	f7fc fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80039c2:	4607      	mov	r7, r0
 80039c4:	b158      	cbz	r0, 80039de <_dtoa_r+0xce>
 80039c6:	2301      	movs	r3, #1
 80039c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80039ce:	b113      	cbz	r3, 80039d6 <_dtoa_r+0xc6>
 80039d0:	4b89      	ldr	r3, [pc, #548]	@ (8003bf8 <_dtoa_r+0x2e8>)
 80039d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003bfc <_dtoa_r+0x2ec>
 80039da:	f000 bd44 	b.w	8004466 <_dtoa_r+0xb56>
 80039de:	ab14      	add	r3, sp, #80	@ 0x50
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	ab15      	add	r3, sp, #84	@ 0x54
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4648      	mov	r0, r9
 80039e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80039ec:	f001 f8ce 	bl	8004b8c <__d2b>
 80039f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80039f4:	9003      	str	r0, [sp, #12]
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	d078      	beq.n	8003aec <_dtoa_r+0x1dc>
 80039fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003a0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003a10:	9712      	str	r7, [sp, #72]	@ 0x48
 8003a12:	4619      	mov	r1, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	4b7a      	ldr	r3, [pc, #488]	@ (8003c00 <_dtoa_r+0x2f0>)
 8003a18:	f7fc fba6 	bl	8000168 <__aeabi_dsub>
 8003a1c:	a36c      	add	r3, pc, #432	@ (adr r3, 8003bd0 <_dtoa_r+0x2c0>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fd59 	bl	80004d8 <__aeabi_dmul>
 8003a26:	a36c      	add	r3, pc, #432	@ (adr r3, 8003bd8 <_dtoa_r+0x2c8>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fb9e 	bl	800016c <__adddf3>
 8003a30:	4604      	mov	r4, r0
 8003a32:	4630      	mov	r0, r6
 8003a34:	460d      	mov	r5, r1
 8003a36:	f7fc fce5 	bl	8000404 <__aeabi_i2d>
 8003a3a:	a369      	add	r3, pc, #420	@ (adr r3, 8003be0 <_dtoa_r+0x2d0>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fd4a 	bl	80004d8 <__aeabi_dmul>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	f7fc fb8e 	bl	800016c <__adddf3>
 8003a50:	4604      	mov	r4, r0
 8003a52:	460d      	mov	r5, r1
 8003a54:	f7fc fff0 	bl	8000a38 <__aeabi_d2iz>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	4607      	mov	r7, r0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	f7fc ffab 	bl	80009bc <__aeabi_dcmplt>
 8003a66:	b140      	cbz	r0, 8003a7a <_dtoa_r+0x16a>
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7fc fccb 	bl	8000404 <__aeabi_i2d>
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f7fc ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8003a76:	b900      	cbnz	r0, 8003a7a <_dtoa_r+0x16a>
 8003a78:	3f01      	subs	r7, #1
 8003a7a:	2f16      	cmp	r7, #22
 8003a7c:	d854      	bhi.n	8003b28 <_dtoa_r+0x218>
 8003a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a82:	4b60      	ldr	r3, [pc, #384]	@ (8003c04 <_dtoa_r+0x2f4>)
 8003a84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc ff96 	bl	80009bc <__aeabi_dcmplt>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d04b      	beq.n	8003b2c <_dtoa_r+0x21c>
 8003a94:	2300      	movs	r3, #0
 8003a96:	3f01      	subs	r7, #1
 8003a98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003a9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a9c:	1b9b      	subs	r3, r3, r6
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	bf49      	itett	mi
 8003aa2:	f1c3 0301 	rsbmi	r3, r3, #1
 8003aa6:	2300      	movpl	r3, #0
 8003aa8:	9304      	strmi	r3, [sp, #16]
 8003aaa:	2300      	movmi	r3, #0
 8003aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aae:	bf54      	ite	pl
 8003ab0:	9304      	strpl	r3, [sp, #16]
 8003ab2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003ab4:	2f00      	cmp	r7, #0
 8003ab6:	db3b      	blt.n	8003b30 <_dtoa_r+0x220>
 8003ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aba:	970e      	str	r7, [sp, #56]	@ 0x38
 8003abc:	443b      	add	r3, r7
 8003abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ac4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d865      	bhi.n	8003b96 <_dtoa_r+0x286>
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	bfc4      	itt	gt
 8003ace:	3b04      	subgt	r3, #4
 8003ad0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ad4:	bfc8      	it	gt
 8003ad6:	2400      	movgt	r4, #0
 8003ad8:	f1a3 0302 	sub.w	r3, r3, #2
 8003adc:	bfd8      	it	le
 8003ade:	2401      	movle	r4, #1
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d864      	bhi.n	8003bae <_dtoa_r+0x29e>
 8003ae4:	e8df f003 	tbb	[pc, r3]
 8003ae8:	2c385553 	.word	0x2c385553
 8003aec:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003af0:	441e      	add	r6, r3
 8003af2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	bfc1      	itttt	gt
 8003afa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003afe:	fa08 f803 	lslgt.w	r8, r8, r3
 8003b02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003b06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003b0a:	bfd6      	itet	le
 8003b0c:	f1c3 0320 	rsble	r3, r3, #32
 8003b10:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b14:	fa04 f003 	lslle.w	r0, r4, r3
 8003b18:	f7fc fc64 	bl	80003e4 <__aeabi_ui2d>
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003b22:	3e01      	subs	r6, #1
 8003b24:	9212      	str	r2, [sp, #72]	@ 0x48
 8003b26:	e774      	b.n	8003a12 <_dtoa_r+0x102>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e7b5      	b.n	8003a98 <_dtoa_r+0x188>
 8003b2c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003b2e:	e7b4      	b.n	8003a9a <_dtoa_r+0x18a>
 8003b30:	9b04      	ldr	r3, [sp, #16]
 8003b32:	1bdb      	subs	r3, r3, r7
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	427b      	negs	r3, r7
 8003b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b3e:	e7c1      	b.n	8003ac4 <_dtoa_r+0x1b4>
 8003b40:	2301      	movs	r3, #1
 8003b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003b46:	eb07 0b03 	add.w	fp, r7, r3
 8003b4a:	f10b 0301 	add.w	r3, fp, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	9308      	str	r3, [sp, #32]
 8003b52:	bfb8      	it	lt
 8003b54:	2301      	movlt	r3, #1
 8003b56:	e006      	b.n	8003b66 <_dtoa_r+0x256>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	dd28      	ble.n	8003bb4 <_dtoa_r+0x2a4>
 8003b62:	469b      	mov	fp, r3
 8003b64:	9308      	str	r3, [sp, #32]
 8003b66:	2100      	movs	r1, #0
 8003b68:	2204      	movs	r2, #4
 8003b6a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003b6e:	f102 0514 	add.w	r5, r2, #20
 8003b72:	429d      	cmp	r5, r3
 8003b74:	d926      	bls.n	8003bc4 <_dtoa_r+0x2b4>
 8003b76:	6041      	str	r1, [r0, #4]
 8003b78:	4648      	mov	r0, r9
 8003b7a:	f000 fce5 	bl	8004548 <_Balloc>
 8003b7e:	4682      	mov	sl, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d143      	bne.n	8003c0c <_dtoa_r+0x2fc>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f240 11af 	movw	r1, #431	@ 0x1af
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <_dtoa_r+0x2f8>)
 8003b8c:	e6d4      	b.n	8003938 <_dtoa_r+0x28>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e7e3      	b.n	8003b5a <_dtoa_r+0x24a>
 8003b92:	2300      	movs	r3, #0
 8003b94:	e7d5      	b.n	8003b42 <_dtoa_r+0x232>
 8003b96:	2401      	movs	r4, #1
 8003b98:	2300      	movs	r3, #0
 8003b9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003b9e:	f04f 3bff 	mov.w	fp, #4294967295
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2312      	movs	r3, #18
 8003ba6:	f8cd b020 	str.w	fp, [sp, #32]
 8003baa:	9221      	str	r2, [sp, #132]	@ 0x84
 8003bac:	e7db      	b.n	8003b66 <_dtoa_r+0x256>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bb2:	e7f4      	b.n	8003b9e <_dtoa_r+0x28e>
 8003bb4:	f04f 0b01 	mov.w	fp, #1
 8003bb8:	465b      	mov	r3, fp
 8003bba:	f8cd b020 	str.w	fp, [sp, #32]
 8003bbe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003bc2:	e7d0      	b.n	8003b66 <_dtoa_r+0x256>
 8003bc4:	3101      	adds	r1, #1
 8003bc6:	0052      	lsls	r2, r2, #1
 8003bc8:	e7d1      	b.n	8003b6e <_dtoa_r+0x25e>
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	636f4361 	.word	0x636f4361
 8003bd4:	3fd287a7 	.word	0x3fd287a7
 8003bd8:	8b60c8b3 	.word	0x8b60c8b3
 8003bdc:	3fc68a28 	.word	0x3fc68a28
 8003be0:	509f79fb 	.word	0x509f79fb
 8003be4:	3fd34413 	.word	0x3fd34413
 8003be8:	080053b7 	.word	0x080053b7
 8003bec:	080053ce 	.word	0x080053ce
 8003bf0:	7ff00000 	.word	0x7ff00000
 8003bf4:	080053b3 	.word	0x080053b3
 8003bf8:	08005387 	.word	0x08005387
 8003bfc:	08005386 	.word	0x08005386
 8003c00:	3ff80000 	.word	0x3ff80000
 8003c04:	08005548 	.word	0x08005548
 8003c08:	08005426 	.word	0x08005426
 8003c0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003c10:	6018      	str	r0, [r3, #0]
 8003c12:	9b08      	ldr	r3, [sp, #32]
 8003c14:	2b0e      	cmp	r3, #14
 8003c16:	f200 80a1 	bhi.w	8003d5c <_dtoa_r+0x44c>
 8003c1a:	2c00      	cmp	r4, #0
 8003c1c:	f000 809e 	beq.w	8003d5c <_dtoa_r+0x44c>
 8003c20:	2f00      	cmp	r7, #0
 8003c22:	dd33      	ble.n	8003c8c <_dtoa_r+0x37c>
 8003c24:	4b9c      	ldr	r3, [pc, #624]	@ (8003e98 <_dtoa_r+0x588>)
 8003c26:	f007 020f 	and.w	r2, r7, #15
 8003c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c2e:	05f8      	lsls	r0, r7, #23
 8003c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c34:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003c38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003c3c:	d516      	bpl.n	8003c6c <_dtoa_r+0x35c>
 8003c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c42:	4b96      	ldr	r3, [pc, #600]	@ (8003e9c <_dtoa_r+0x58c>)
 8003c44:	2603      	movs	r6, #3
 8003c46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c4a:	f7fc fd6f 	bl	800072c <__aeabi_ddiv>
 8003c4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003c52:	f004 040f 	and.w	r4, r4, #15
 8003c56:	4d91      	ldr	r5, [pc, #580]	@ (8003e9c <_dtoa_r+0x58c>)
 8003c58:	b954      	cbnz	r4, 8003c70 <_dtoa_r+0x360>
 8003c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c62:	f7fc fd63 	bl	800072c <__aeabi_ddiv>
 8003c66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003c6a:	e028      	b.n	8003cbe <_dtoa_r+0x3ae>
 8003c6c:	2602      	movs	r6, #2
 8003c6e:	e7f2      	b.n	8003c56 <_dtoa_r+0x346>
 8003c70:	07e1      	lsls	r1, r4, #31
 8003c72:	d508      	bpl.n	8003c86 <_dtoa_r+0x376>
 8003c74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003c78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c7c:	f7fc fc2c 	bl	80004d8 <__aeabi_dmul>
 8003c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003c84:	3601      	adds	r6, #1
 8003c86:	1064      	asrs	r4, r4, #1
 8003c88:	3508      	adds	r5, #8
 8003c8a:	e7e5      	b.n	8003c58 <_dtoa_r+0x348>
 8003c8c:	f000 80af 	beq.w	8003dee <_dtoa_r+0x4de>
 8003c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c94:	427c      	negs	r4, r7
 8003c96:	4b80      	ldr	r3, [pc, #512]	@ (8003e98 <_dtoa_r+0x588>)
 8003c98:	f004 020f 	and.w	r2, r4, #15
 8003c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fc18 	bl	80004d8 <__aeabi_dmul>
 8003ca8:	2602      	movs	r6, #2
 8003caa:	2300      	movs	r3, #0
 8003cac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003cb0:	4d7a      	ldr	r5, [pc, #488]	@ (8003e9c <_dtoa_r+0x58c>)
 8003cb2:	1124      	asrs	r4, r4, #4
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	f040 808f 	bne.w	8003dd8 <_dtoa_r+0x4c8>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1d3      	bne.n	8003c66 <_dtoa_r+0x356>
 8003cbe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003cc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8094 	beq.w	8003df2 <_dtoa_r+0x4e2>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4620      	mov	r0, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <_dtoa_r+0x590>)
 8003cd2:	f7fc fe73 	bl	80009bc <__aeabi_dcmplt>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	f000 808b 	beq.w	8003df2 <_dtoa_r+0x4e2>
 8003cdc:	9b08      	ldr	r3, [sp, #32]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <_dtoa_r+0x4e2>
 8003ce4:	f1bb 0f00 	cmp.w	fp, #0
 8003ce8:	dd34      	ble.n	8003d54 <_dtoa_r+0x444>
 8003cea:	4620      	mov	r0, r4
 8003cec:	2200      	movs	r2, #0
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <_dtoa_r+0x594>)
 8003cf2:	f7fc fbf1 	bl	80004d8 <__aeabi_dmul>
 8003cf6:	465c      	mov	r4, fp
 8003cf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003cfc:	f107 38ff 	add.w	r8, r7, #4294967295
 8003d00:	3601      	adds	r6, #1
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7fc fb7e 	bl	8000404 <__aeabi_i2d>
 8003d08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d0c:	f7fc fbe4 	bl	80004d8 <__aeabi_dmul>
 8003d10:	2200      	movs	r2, #0
 8003d12:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <_dtoa_r+0x598>)
 8003d14:	f7fc fa2a 	bl	800016c <__adddf3>
 8003d18:	4605      	mov	r5, r0
 8003d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	d16a      	bne.n	8003df8 <_dtoa_r+0x4e8>
 8003d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d26:	2200      	movs	r2, #0
 8003d28:	4b60      	ldr	r3, [pc, #384]	@ (8003eac <_dtoa_r+0x59c>)
 8003d2a:	f7fc fa1d 	bl	8000168 <__aeabi_dsub>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d36:	462a      	mov	r2, r5
 8003d38:	4633      	mov	r3, r6
 8003d3a:	f7fc fe5d 	bl	80009f8 <__aeabi_dcmpgt>
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	f040 8298 	bne.w	8004274 <_dtoa_r+0x964>
 8003d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003d4e:	f7fc fe35 	bl	80009bc <__aeabi_dcmplt>
 8003d52:	bb38      	cbnz	r0, 8003da4 <_dtoa_r+0x494>
 8003d54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003d58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f2c0 8157 	blt.w	8004012 <_dtoa_r+0x702>
 8003d64:	2f0e      	cmp	r7, #14
 8003d66:	f300 8154 	bgt.w	8004012 <_dtoa_r+0x702>
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e98 <_dtoa_r+0x588>)
 8003d6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f280 80e5 	bge.w	8003f4a <_dtoa_r+0x63a>
 8003d80:	9b08      	ldr	r3, [sp, #32]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f300 80e1 	bgt.w	8003f4a <_dtoa_r+0x63a>
 8003d88:	d10c      	bne.n	8003da4 <_dtoa_r+0x494>
 8003d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <_dtoa_r+0x59c>)
 8003d92:	f7fc fba1 	bl	80004d8 <__aeabi_dmul>
 8003d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d9a:	f7fc fe23 	bl	80009e4 <__aeabi_dcmpge>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f000 8266 	beq.w	8004270 <_dtoa_r+0x960>
 8003da4:	2400      	movs	r4, #0
 8003da6:	4625      	mov	r5, r4
 8003da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003daa:	4656      	mov	r6, sl
 8003dac:	ea6f 0803 	mvn.w	r8, r3
 8003db0:	2700      	movs	r7, #0
 8003db2:	4621      	mov	r1, r4
 8003db4:	4648      	mov	r0, r9
 8003db6:	f000 fc07 	bl	80045c8 <_Bfree>
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	f000 80bd 	beq.w	8003f3a <_dtoa_r+0x62a>
 8003dc0:	b12f      	cbz	r7, 8003dce <_dtoa_r+0x4be>
 8003dc2:	42af      	cmp	r7, r5
 8003dc4:	d003      	beq.n	8003dce <_dtoa_r+0x4be>
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	4648      	mov	r0, r9
 8003dca:	f000 fbfd 	bl	80045c8 <_Bfree>
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4648      	mov	r0, r9
 8003dd2:	f000 fbf9 	bl	80045c8 <_Bfree>
 8003dd6:	e0b0      	b.n	8003f3a <_dtoa_r+0x62a>
 8003dd8:	07e2      	lsls	r2, r4, #31
 8003dda:	d505      	bpl.n	8003de8 <_dtoa_r+0x4d8>
 8003ddc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003de0:	f7fc fb7a 	bl	80004d8 <__aeabi_dmul>
 8003de4:	2301      	movs	r3, #1
 8003de6:	3601      	adds	r6, #1
 8003de8:	1064      	asrs	r4, r4, #1
 8003dea:	3508      	adds	r5, #8
 8003dec:	e762      	b.n	8003cb4 <_dtoa_r+0x3a4>
 8003dee:	2602      	movs	r6, #2
 8003df0:	e765      	b.n	8003cbe <_dtoa_r+0x3ae>
 8003df2:	46b8      	mov	r8, r7
 8003df4:	9c08      	ldr	r4, [sp, #32]
 8003df6:	e784      	b.n	8003d02 <_dtoa_r+0x3f2>
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <_dtoa_r+0x588>)
 8003dfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e04:	4454      	add	r4, sl
 8003e06:	2900      	cmp	r1, #0
 8003e08:	d054      	beq.n	8003eb4 <_dtoa_r+0x5a4>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	4928      	ldr	r1, [pc, #160]	@ (8003eb0 <_dtoa_r+0x5a0>)
 8003e0e:	f7fc fc8d 	bl	800072c <__aeabi_ddiv>
 8003e12:	4633      	mov	r3, r6
 8003e14:	462a      	mov	r2, r5
 8003e16:	f7fc f9a7 	bl	8000168 <__aeabi_dsub>
 8003e1a:	4656      	mov	r6, sl
 8003e1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e24:	f7fc fe08 	bl	8000a38 <__aeabi_d2iz>
 8003e28:	4605      	mov	r5, r0
 8003e2a:	f7fc faeb 	bl	8000404 <__aeabi_i2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e36:	f7fc f997 	bl	8000168 <__aeabi_dsub>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	3530      	adds	r5, #48	@ 0x30
 8003e40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e48:	f806 5b01 	strb.w	r5, [r6], #1
 8003e4c:	f7fc fdb6 	bl	80009bc <__aeabi_dcmplt>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d172      	bne.n	8003f3a <_dtoa_r+0x62a>
 8003e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	4911      	ldr	r1, [pc, #68]	@ (8003ea0 <_dtoa_r+0x590>)
 8003e5c:	f7fc f984 	bl	8000168 <__aeabi_dsub>
 8003e60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e64:	f7fc fdaa 	bl	80009bc <__aeabi_dcmplt>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f040 80b4 	bne.w	8003fd6 <_dtoa_r+0x6c6>
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	f43f af70 	beq.w	8003d54 <_dtoa_r+0x444>
 8003e74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <_dtoa_r+0x594>)
 8003e7c:	f7fc fb2c 	bl	80004d8 <__aeabi_dmul>
 8003e80:	2200      	movs	r2, #0
 8003e82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <_dtoa_r+0x594>)
 8003e8c:	f7fc fb24 	bl	80004d8 <__aeabi_dmul>
 8003e90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e94:	e7c4      	b.n	8003e20 <_dtoa_r+0x510>
 8003e96:	bf00      	nop
 8003e98:	08005548 	.word	0x08005548
 8003e9c:	08005520 	.word	0x08005520
 8003ea0:	3ff00000 	.word	0x3ff00000
 8003ea4:	40240000 	.word	0x40240000
 8003ea8:	401c0000 	.word	0x401c0000
 8003eac:	40140000 	.word	0x40140000
 8003eb0:	3fe00000 	.word	0x3fe00000
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f7fc fb0e 	bl	80004d8 <__aeabi_dmul>
 8003ebc:	4656      	mov	r6, sl
 8003ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ec2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ec8:	f7fc fdb6 	bl	8000a38 <__aeabi_d2iz>
 8003ecc:	4605      	mov	r5, r0
 8003ece:	f7fc fa99 	bl	8000404 <__aeabi_i2d>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003eda:	f7fc f945 	bl	8000168 <__aeabi_dsub>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	3530      	adds	r5, #48	@ 0x30
 8003ee4:	f806 5b01 	strb.w	r5, [r6], #1
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	d124      	bne.n	8003f3e <_dtoa_r+0x62e>
 8003ef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ef8:	4bae      	ldr	r3, [pc, #696]	@ (80041b4 <_dtoa_r+0x8a4>)
 8003efa:	f7fc f937 	bl	800016c <__adddf3>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f06:	f7fc fd77 	bl	80009f8 <__aeabi_dcmpgt>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d163      	bne.n	8003fd6 <_dtoa_r+0x6c6>
 8003f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f12:	2000      	movs	r0, #0
 8003f14:	49a7      	ldr	r1, [pc, #668]	@ (80041b4 <_dtoa_r+0x8a4>)
 8003f16:	f7fc f927 	bl	8000168 <__aeabi_dsub>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f22:	f7fc fd4b 	bl	80009bc <__aeabi_dcmplt>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f43f af14 	beq.w	8003d54 <_dtoa_r+0x444>
 8003f2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003f2e:	1e73      	subs	r3, r6, #1
 8003f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003f36:	2b30      	cmp	r3, #48	@ 0x30
 8003f38:	d0f8      	beq.n	8003f2c <_dtoa_r+0x61c>
 8003f3a:	4647      	mov	r7, r8
 8003f3c:	e03b      	b.n	8003fb6 <_dtoa_r+0x6a6>
 8003f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80041b8 <_dtoa_r+0x8a8>)
 8003f40:	f7fc faca 	bl	80004d8 <__aeabi_dmul>
 8003f44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f48:	e7bc      	b.n	8003ec4 <_dtoa_r+0x5b4>
 8003f4a:	4656      	mov	r6, sl
 8003f4c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f54:	4620      	mov	r0, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	f7fc fbe8 	bl	800072c <__aeabi_ddiv>
 8003f5c:	f7fc fd6c 	bl	8000a38 <__aeabi_d2iz>
 8003f60:	4680      	mov	r8, r0
 8003f62:	f7fc fa4f 	bl	8000404 <__aeabi_i2d>
 8003f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f6a:	f7fc fab5 	bl	80004d8 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7fc f8f7 	bl	8000168 <__aeabi_dsub>
 8003f7a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003f7e:	9d08      	ldr	r5, [sp, #32]
 8003f80:	f806 4b01 	strb.w	r4, [r6], #1
 8003f84:	eba6 040a 	sub.w	r4, r6, sl
 8003f88:	42a5      	cmp	r5, r4
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	d133      	bne.n	8003ff8 <_dtoa_r+0x6e8>
 8003f90:	f7fc f8ec 	bl	800016c <__adddf3>
 8003f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f98:	4604      	mov	r4, r0
 8003f9a:	460d      	mov	r5, r1
 8003f9c:	f7fc fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8003fa0:	b9c0      	cbnz	r0, 8003fd4 <_dtoa_r+0x6c4>
 8003fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8003fae:	b110      	cbz	r0, 8003fb6 <_dtoa_r+0x6a6>
 8003fb0:	f018 0f01 	tst.w	r8, #1
 8003fb4:	d10e      	bne.n	8003fd4 <_dtoa_r+0x6c4>
 8003fb6:	4648      	mov	r0, r9
 8003fb8:	9903      	ldr	r1, [sp, #12]
 8003fba:	f000 fb05 	bl	80045c8 <_Bfree>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	7033      	strb	r3, [r6, #0]
 8003fc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003fc4:	3701      	adds	r7, #1
 8003fc6:	601f      	str	r7, [r3, #0]
 8003fc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 824b 	beq.w	8004466 <_dtoa_r+0xb56>
 8003fd0:	601e      	str	r6, [r3, #0]
 8003fd2:	e248      	b.n	8004466 <_dtoa_r+0xb56>
 8003fd4:	46b8      	mov	r8, r7
 8003fd6:	4633      	mov	r3, r6
 8003fd8:	461e      	mov	r6, r3
 8003fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fde:	2a39      	cmp	r2, #57	@ 0x39
 8003fe0:	d106      	bne.n	8003ff0 <_dtoa_r+0x6e0>
 8003fe2:	459a      	cmp	sl, r3
 8003fe4:	d1f8      	bne.n	8003fd8 <_dtoa_r+0x6c8>
 8003fe6:	2230      	movs	r2, #48	@ 0x30
 8003fe8:	f108 0801 	add.w	r8, r8, #1
 8003fec:	f88a 2000 	strb.w	r2, [sl]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	3201      	adds	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e7a0      	b.n	8003f3a <_dtoa_r+0x62a>
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <_dtoa_r+0x8a8>)
 8003ffc:	f7fc fa6c 	bl	80004d8 <__aeabi_dmul>
 8004000:	2200      	movs	r2, #0
 8004002:	2300      	movs	r3, #0
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	f7fc fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800400c:	2800      	cmp	r0, #0
 800400e:	d09f      	beq.n	8003f50 <_dtoa_r+0x640>
 8004010:	e7d1      	b.n	8003fb6 <_dtoa_r+0x6a6>
 8004012:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004014:	2a00      	cmp	r2, #0
 8004016:	f000 80ea 	beq.w	80041ee <_dtoa_r+0x8de>
 800401a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800401c:	2a01      	cmp	r2, #1
 800401e:	f300 80cd 	bgt.w	80041bc <_dtoa_r+0x8ac>
 8004022:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004024:	2a00      	cmp	r2, #0
 8004026:	f000 80c1 	beq.w	80041ac <_dtoa_r+0x89c>
 800402a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800402e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004030:	9e04      	ldr	r6, [sp, #16]
 8004032:	9a04      	ldr	r2, [sp, #16]
 8004034:	2101      	movs	r1, #1
 8004036:	441a      	add	r2, r3
 8004038:	9204      	str	r2, [sp, #16]
 800403a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800403c:	4648      	mov	r0, r9
 800403e:	441a      	add	r2, r3
 8004040:	9209      	str	r2, [sp, #36]	@ 0x24
 8004042:	f000 fb75 	bl	8004730 <__i2b>
 8004046:	4605      	mov	r5, r0
 8004048:	b166      	cbz	r6, 8004064 <_dtoa_r+0x754>
 800404a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	dd09      	ble.n	8004064 <_dtoa_r+0x754>
 8004050:	42b3      	cmp	r3, r6
 8004052:	bfa8      	it	ge
 8004054:	4633      	movge	r3, r6
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	1af6      	subs	r6, r6, r3
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	9204      	str	r2, [sp, #16]
 800405e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	9309      	str	r3, [sp, #36]	@ 0x24
 8004064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004066:	b30b      	cbz	r3, 80040ac <_dtoa_r+0x79c>
 8004068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80c6 	beq.w	80041fc <_dtoa_r+0x8ec>
 8004070:	2c00      	cmp	r4, #0
 8004072:	f000 80c0 	beq.w	80041f6 <_dtoa_r+0x8e6>
 8004076:	4629      	mov	r1, r5
 8004078:	4622      	mov	r2, r4
 800407a:	4648      	mov	r0, r9
 800407c:	f000 fc10 	bl	80048a0 <__pow5mult>
 8004080:	9a03      	ldr	r2, [sp, #12]
 8004082:	4601      	mov	r1, r0
 8004084:	4605      	mov	r5, r0
 8004086:	4648      	mov	r0, r9
 8004088:	f000 fb68 	bl	800475c <__multiply>
 800408c:	9903      	ldr	r1, [sp, #12]
 800408e:	4680      	mov	r8, r0
 8004090:	4648      	mov	r0, r9
 8004092:	f000 fa99 	bl	80045c8 <_Bfree>
 8004096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004098:	1b1b      	subs	r3, r3, r4
 800409a:	930a      	str	r3, [sp, #40]	@ 0x28
 800409c:	f000 80b1 	beq.w	8004202 <_dtoa_r+0x8f2>
 80040a0:	4641      	mov	r1, r8
 80040a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040a4:	4648      	mov	r0, r9
 80040a6:	f000 fbfb 	bl	80048a0 <__pow5mult>
 80040aa:	9003      	str	r0, [sp, #12]
 80040ac:	2101      	movs	r1, #1
 80040ae:	4648      	mov	r0, r9
 80040b0:	f000 fb3e 	bl	8004730 <__i2b>
 80040b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040b6:	4604      	mov	r4, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 81d8 	beq.w	800446e <_dtoa_r+0xb5e>
 80040be:	461a      	mov	r2, r3
 80040c0:	4601      	mov	r1, r0
 80040c2:	4648      	mov	r0, r9
 80040c4:	f000 fbec 	bl	80048a0 <__pow5mult>
 80040c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80040ca:	4604      	mov	r4, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f300 809f 	bgt.w	8004210 <_dtoa_r+0x900>
 80040d2:	9b06      	ldr	r3, [sp, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 8097 	bne.w	8004208 <_dtoa_r+0x8f8>
 80040da:	9b07      	ldr	r3, [sp, #28]
 80040dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 8093 	bne.w	800420c <_dtoa_r+0x8fc>
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ec:	0d1b      	lsrs	r3, r3, #20
 80040ee:	051b      	lsls	r3, r3, #20
 80040f0:	b133      	cbz	r3, 8004100 <_dtoa_r+0x7f0>
 80040f2:	9b04      	ldr	r3, [sp, #16]
 80040f4:	3301      	adds	r3, #1
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80040fe:	2301      	movs	r3, #1
 8004100:	930a      	str	r3, [sp, #40]	@ 0x28
 8004102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 81b8 	beq.w	800447a <_dtoa_r+0xb6a>
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004110:	6918      	ldr	r0, [r3, #16]
 8004112:	f000 fac1 	bl	8004698 <__hi0bits>
 8004116:	f1c0 0020 	rsb	r0, r0, #32
 800411a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800411c:	4418      	add	r0, r3
 800411e:	f010 001f 	ands.w	r0, r0, #31
 8004122:	f000 8082 	beq.w	800422a <_dtoa_r+0x91a>
 8004126:	f1c0 0320 	rsb	r3, r0, #32
 800412a:	2b04      	cmp	r3, #4
 800412c:	dd73      	ble.n	8004216 <_dtoa_r+0x906>
 800412e:	9b04      	ldr	r3, [sp, #16]
 8004130:	f1c0 001c 	rsb	r0, r0, #28
 8004134:	4403      	add	r3, r0
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413a:	4406      	add	r6, r0
 800413c:	4403      	add	r3, r0
 800413e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004140:	9b04      	ldr	r3, [sp, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	dd05      	ble.n	8004152 <_dtoa_r+0x842>
 8004146:	461a      	mov	r2, r3
 8004148:	4648      	mov	r0, r9
 800414a:	9903      	ldr	r1, [sp, #12]
 800414c:	f000 fc02 	bl	8004954 <__lshift>
 8004150:	9003      	str	r0, [sp, #12]
 8004152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	dd05      	ble.n	8004164 <_dtoa_r+0x854>
 8004158:	4621      	mov	r1, r4
 800415a:	461a      	mov	r2, r3
 800415c:	4648      	mov	r0, r9
 800415e:	f000 fbf9 	bl	8004954 <__lshift>
 8004162:	4604      	mov	r4, r0
 8004164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d061      	beq.n	800422e <_dtoa_r+0x91e>
 800416a:	4621      	mov	r1, r4
 800416c:	9803      	ldr	r0, [sp, #12]
 800416e:	f000 fc5d 	bl	8004a2c <__mcmp>
 8004172:	2800      	cmp	r0, #0
 8004174:	da5b      	bge.n	800422e <_dtoa_r+0x91e>
 8004176:	2300      	movs	r3, #0
 8004178:	220a      	movs	r2, #10
 800417a:	4648      	mov	r0, r9
 800417c:	9903      	ldr	r1, [sp, #12]
 800417e:	f000 fa45 	bl	800460c <__multadd>
 8004182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004184:	f107 38ff 	add.w	r8, r7, #4294967295
 8004188:	9003      	str	r0, [sp, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8177 	beq.w	800447e <_dtoa_r+0xb6e>
 8004190:	4629      	mov	r1, r5
 8004192:	2300      	movs	r3, #0
 8004194:	220a      	movs	r2, #10
 8004196:	4648      	mov	r0, r9
 8004198:	f000 fa38 	bl	800460c <__multadd>
 800419c:	f1bb 0f00 	cmp.w	fp, #0
 80041a0:	4605      	mov	r5, r0
 80041a2:	dc6f      	bgt.n	8004284 <_dtoa_r+0x974>
 80041a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	dc49      	bgt.n	800423e <_dtoa_r+0x92e>
 80041aa:	e06b      	b.n	8004284 <_dtoa_r+0x974>
 80041ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80041b2:	e73c      	b.n	800402e <_dtoa_r+0x71e>
 80041b4:	3fe00000 	.word	0x3fe00000
 80041b8:	40240000 	.word	0x40240000
 80041bc:	9b08      	ldr	r3, [sp, #32]
 80041be:	1e5c      	subs	r4, r3, #1
 80041c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041c2:	42a3      	cmp	r3, r4
 80041c4:	db09      	blt.n	80041da <_dtoa_r+0x8ca>
 80041c6:	1b1c      	subs	r4, r3, r4
 80041c8:	9b08      	ldr	r3, [sp, #32]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f6bf af30 	bge.w	8004030 <_dtoa_r+0x720>
 80041d0:	9b04      	ldr	r3, [sp, #16]
 80041d2:	9a08      	ldr	r2, [sp, #32]
 80041d4:	1a9e      	subs	r6, r3, r2
 80041d6:	2300      	movs	r3, #0
 80041d8:	e72b      	b.n	8004032 <_dtoa_r+0x722>
 80041da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041de:	1ae3      	subs	r3, r4, r3
 80041e0:	441a      	add	r2, r3
 80041e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80041e4:	9e04      	ldr	r6, [sp, #16]
 80041e6:	2400      	movs	r4, #0
 80041e8:	9b08      	ldr	r3, [sp, #32]
 80041ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80041ec:	e721      	b.n	8004032 <_dtoa_r+0x722>
 80041ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80041f0:	9e04      	ldr	r6, [sp, #16]
 80041f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80041f4:	e728      	b.n	8004048 <_dtoa_r+0x738>
 80041f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80041fa:	e751      	b.n	80040a0 <_dtoa_r+0x790>
 80041fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041fe:	9903      	ldr	r1, [sp, #12]
 8004200:	e750      	b.n	80040a4 <_dtoa_r+0x794>
 8004202:	f8cd 800c 	str.w	r8, [sp, #12]
 8004206:	e751      	b.n	80040ac <_dtoa_r+0x79c>
 8004208:	2300      	movs	r3, #0
 800420a:	e779      	b.n	8004100 <_dtoa_r+0x7f0>
 800420c:	9b06      	ldr	r3, [sp, #24]
 800420e:	e777      	b.n	8004100 <_dtoa_r+0x7f0>
 8004210:	2300      	movs	r3, #0
 8004212:	930a      	str	r3, [sp, #40]	@ 0x28
 8004214:	e779      	b.n	800410a <_dtoa_r+0x7fa>
 8004216:	d093      	beq.n	8004140 <_dtoa_r+0x830>
 8004218:	9a04      	ldr	r2, [sp, #16]
 800421a:	331c      	adds	r3, #28
 800421c:	441a      	add	r2, r3
 800421e:	9204      	str	r2, [sp, #16]
 8004220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004222:	441e      	add	r6, r3
 8004224:	441a      	add	r2, r3
 8004226:	9209      	str	r2, [sp, #36]	@ 0x24
 8004228:	e78a      	b.n	8004140 <_dtoa_r+0x830>
 800422a:	4603      	mov	r3, r0
 800422c:	e7f4      	b.n	8004218 <_dtoa_r+0x908>
 800422e:	9b08      	ldr	r3, [sp, #32]
 8004230:	46b8      	mov	r8, r7
 8004232:	2b00      	cmp	r3, #0
 8004234:	dc20      	bgt.n	8004278 <_dtoa_r+0x968>
 8004236:	469b      	mov	fp, r3
 8004238:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800423a:	2b02      	cmp	r3, #2
 800423c:	dd1e      	ble.n	800427c <_dtoa_r+0x96c>
 800423e:	f1bb 0f00 	cmp.w	fp, #0
 8004242:	f47f adb1 	bne.w	8003da8 <_dtoa_r+0x498>
 8004246:	4621      	mov	r1, r4
 8004248:	465b      	mov	r3, fp
 800424a:	2205      	movs	r2, #5
 800424c:	4648      	mov	r0, r9
 800424e:	f000 f9dd 	bl	800460c <__multadd>
 8004252:	4601      	mov	r1, r0
 8004254:	4604      	mov	r4, r0
 8004256:	9803      	ldr	r0, [sp, #12]
 8004258:	f000 fbe8 	bl	8004a2c <__mcmp>
 800425c:	2800      	cmp	r0, #0
 800425e:	f77f ada3 	ble.w	8003da8 <_dtoa_r+0x498>
 8004262:	4656      	mov	r6, sl
 8004264:	2331      	movs	r3, #49	@ 0x31
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	f806 3b01 	strb.w	r3, [r6], #1
 800426e:	e59f      	b.n	8003db0 <_dtoa_r+0x4a0>
 8004270:	46b8      	mov	r8, r7
 8004272:	9c08      	ldr	r4, [sp, #32]
 8004274:	4625      	mov	r5, r4
 8004276:	e7f4      	b.n	8004262 <_dtoa_r+0x952>
 8004278:	f8dd b020 	ldr.w	fp, [sp, #32]
 800427c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8101 	beq.w	8004486 <_dtoa_r+0xb76>
 8004284:	2e00      	cmp	r6, #0
 8004286:	dd05      	ble.n	8004294 <_dtoa_r+0x984>
 8004288:	4629      	mov	r1, r5
 800428a:	4632      	mov	r2, r6
 800428c:	4648      	mov	r0, r9
 800428e:	f000 fb61 	bl	8004954 <__lshift>
 8004292:	4605      	mov	r5, r0
 8004294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d05c      	beq.n	8004354 <_dtoa_r+0xa44>
 800429a:	4648      	mov	r0, r9
 800429c:	6869      	ldr	r1, [r5, #4]
 800429e:	f000 f953 	bl	8004548 <_Balloc>
 80042a2:	4606      	mov	r6, r0
 80042a4:	b928      	cbnz	r0, 80042b2 <_dtoa_r+0x9a2>
 80042a6:	4602      	mov	r2, r0
 80042a8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80042ac:	4b80      	ldr	r3, [pc, #512]	@ (80044b0 <_dtoa_r+0xba0>)
 80042ae:	f7ff bb43 	b.w	8003938 <_dtoa_r+0x28>
 80042b2:	692a      	ldr	r2, [r5, #16]
 80042b4:	f105 010c 	add.w	r1, r5, #12
 80042b8:	3202      	adds	r2, #2
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	300c      	adds	r0, #12
 80042be:	f7ff fa8e 	bl	80037de <memcpy>
 80042c2:	2201      	movs	r2, #1
 80042c4:	4631      	mov	r1, r6
 80042c6:	4648      	mov	r0, r9
 80042c8:	f000 fb44 	bl	8004954 <__lshift>
 80042cc:	462f      	mov	r7, r5
 80042ce:	4605      	mov	r5, r0
 80042d0:	f10a 0301 	add.w	r3, sl, #1
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	eb0a 030b 	add.w	r3, sl, fp
 80042da:	930a      	str	r3, [sp, #40]	@ 0x28
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	4621      	mov	r1, r4
 80042e8:	9803      	ldr	r0, [sp, #12]
 80042ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80042ee:	f7ff fa84 	bl	80037fa <quorem>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4639      	mov	r1, r7
 80042f6:	3330      	adds	r3, #48	@ 0x30
 80042f8:	9006      	str	r0, [sp, #24]
 80042fa:	9803      	ldr	r0, [sp, #12]
 80042fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042fe:	f000 fb95 	bl	8004a2c <__mcmp>
 8004302:	462a      	mov	r2, r5
 8004304:	9008      	str	r0, [sp, #32]
 8004306:	4621      	mov	r1, r4
 8004308:	4648      	mov	r0, r9
 800430a:	f000 fbab 	bl	8004a64 <__mdiff>
 800430e:	68c2      	ldr	r2, [r0, #12]
 8004310:	4606      	mov	r6, r0
 8004312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004314:	bb02      	cbnz	r2, 8004358 <_dtoa_r+0xa48>
 8004316:	4601      	mov	r1, r0
 8004318:	9803      	ldr	r0, [sp, #12]
 800431a:	f000 fb87 	bl	8004a2c <__mcmp>
 800431e:	4602      	mov	r2, r0
 8004320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004322:	4631      	mov	r1, r6
 8004324:	4648      	mov	r0, r9
 8004326:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800432a:	f000 f94d 	bl	80045c8 <_Bfree>
 800432e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004330:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004332:	9e04      	ldr	r6, [sp, #16]
 8004334:	ea42 0103 	orr.w	r1, r2, r3
 8004338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433a:	4319      	orrs	r1, r3
 800433c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800433e:	d10d      	bne.n	800435c <_dtoa_r+0xa4c>
 8004340:	2b39      	cmp	r3, #57	@ 0x39
 8004342:	d027      	beq.n	8004394 <_dtoa_r+0xa84>
 8004344:	9a08      	ldr	r2, [sp, #32]
 8004346:	2a00      	cmp	r2, #0
 8004348:	dd01      	ble.n	800434e <_dtoa_r+0xa3e>
 800434a:	9b06      	ldr	r3, [sp, #24]
 800434c:	3331      	adds	r3, #49	@ 0x31
 800434e:	f88b 3000 	strb.w	r3, [fp]
 8004352:	e52e      	b.n	8003db2 <_dtoa_r+0x4a2>
 8004354:	4628      	mov	r0, r5
 8004356:	e7b9      	b.n	80042cc <_dtoa_r+0x9bc>
 8004358:	2201      	movs	r2, #1
 800435a:	e7e2      	b.n	8004322 <_dtoa_r+0xa12>
 800435c:	9908      	ldr	r1, [sp, #32]
 800435e:	2900      	cmp	r1, #0
 8004360:	db04      	blt.n	800436c <_dtoa_r+0xa5c>
 8004362:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004364:	4301      	orrs	r1, r0
 8004366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004368:	4301      	orrs	r1, r0
 800436a:	d120      	bne.n	80043ae <_dtoa_r+0xa9e>
 800436c:	2a00      	cmp	r2, #0
 800436e:	ddee      	ble.n	800434e <_dtoa_r+0xa3e>
 8004370:	2201      	movs	r2, #1
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	4648      	mov	r0, r9
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	f000 faec 	bl	8004954 <__lshift>
 800437c:	4621      	mov	r1, r4
 800437e:	9003      	str	r0, [sp, #12]
 8004380:	f000 fb54 	bl	8004a2c <__mcmp>
 8004384:	2800      	cmp	r0, #0
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	dc02      	bgt.n	8004390 <_dtoa_r+0xa80>
 800438a:	d1e0      	bne.n	800434e <_dtoa_r+0xa3e>
 800438c:	07da      	lsls	r2, r3, #31
 800438e:	d5de      	bpl.n	800434e <_dtoa_r+0xa3e>
 8004390:	2b39      	cmp	r3, #57	@ 0x39
 8004392:	d1da      	bne.n	800434a <_dtoa_r+0xa3a>
 8004394:	2339      	movs	r3, #57	@ 0x39
 8004396:	f88b 3000 	strb.w	r3, [fp]
 800439a:	4633      	mov	r3, r6
 800439c:	461e      	mov	r6, r3
 800439e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	2a39      	cmp	r2, #57	@ 0x39
 80043a6:	d04e      	beq.n	8004446 <_dtoa_r+0xb36>
 80043a8:	3201      	adds	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e501      	b.n	8003db2 <_dtoa_r+0x4a2>
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	dd03      	ble.n	80043ba <_dtoa_r+0xaaa>
 80043b2:	2b39      	cmp	r3, #57	@ 0x39
 80043b4:	d0ee      	beq.n	8004394 <_dtoa_r+0xa84>
 80043b6:	3301      	adds	r3, #1
 80043b8:	e7c9      	b.n	800434e <_dtoa_r+0xa3e>
 80043ba:	9a04      	ldr	r2, [sp, #16]
 80043bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043c2:	428a      	cmp	r2, r1
 80043c4:	d028      	beq.n	8004418 <_dtoa_r+0xb08>
 80043c6:	2300      	movs	r3, #0
 80043c8:	220a      	movs	r2, #10
 80043ca:	9903      	ldr	r1, [sp, #12]
 80043cc:	4648      	mov	r0, r9
 80043ce:	f000 f91d 	bl	800460c <__multadd>
 80043d2:	42af      	cmp	r7, r5
 80043d4:	9003      	str	r0, [sp, #12]
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	f04f 020a 	mov.w	r2, #10
 80043de:	4639      	mov	r1, r7
 80043e0:	4648      	mov	r0, r9
 80043e2:	d107      	bne.n	80043f4 <_dtoa_r+0xae4>
 80043e4:	f000 f912 	bl	800460c <__multadd>
 80043e8:	4607      	mov	r7, r0
 80043ea:	4605      	mov	r5, r0
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	3301      	adds	r3, #1
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	e777      	b.n	80042e4 <_dtoa_r+0x9d4>
 80043f4:	f000 f90a 	bl	800460c <__multadd>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4607      	mov	r7, r0
 80043fc:	2300      	movs	r3, #0
 80043fe:	220a      	movs	r2, #10
 8004400:	4648      	mov	r0, r9
 8004402:	f000 f903 	bl	800460c <__multadd>
 8004406:	4605      	mov	r5, r0
 8004408:	e7f0      	b.n	80043ec <_dtoa_r+0xadc>
 800440a:	f1bb 0f00 	cmp.w	fp, #0
 800440e:	bfcc      	ite	gt
 8004410:	465e      	movgt	r6, fp
 8004412:	2601      	movle	r6, #1
 8004414:	2700      	movs	r7, #0
 8004416:	4456      	add	r6, sl
 8004418:	2201      	movs	r2, #1
 800441a:	9903      	ldr	r1, [sp, #12]
 800441c:	4648      	mov	r0, r9
 800441e:	9304      	str	r3, [sp, #16]
 8004420:	f000 fa98 	bl	8004954 <__lshift>
 8004424:	4621      	mov	r1, r4
 8004426:	9003      	str	r0, [sp, #12]
 8004428:	f000 fb00 	bl	8004a2c <__mcmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	dcb4      	bgt.n	800439a <_dtoa_r+0xa8a>
 8004430:	d102      	bne.n	8004438 <_dtoa_r+0xb28>
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	07db      	lsls	r3, r3, #31
 8004436:	d4b0      	bmi.n	800439a <_dtoa_r+0xa8a>
 8004438:	4633      	mov	r3, r6
 800443a:	461e      	mov	r6, r3
 800443c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004440:	2a30      	cmp	r2, #48	@ 0x30
 8004442:	d0fa      	beq.n	800443a <_dtoa_r+0xb2a>
 8004444:	e4b5      	b.n	8003db2 <_dtoa_r+0x4a2>
 8004446:	459a      	cmp	sl, r3
 8004448:	d1a8      	bne.n	800439c <_dtoa_r+0xa8c>
 800444a:	2331      	movs	r3, #49	@ 0x31
 800444c:	f108 0801 	add.w	r8, r8, #1
 8004450:	f88a 3000 	strb.w	r3, [sl]
 8004454:	e4ad      	b.n	8003db2 <_dtoa_r+0x4a2>
 8004456:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004458:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80044b4 <_dtoa_r+0xba4>
 800445c:	b11b      	cbz	r3, 8004466 <_dtoa_r+0xb56>
 800445e:	f10a 0308 	add.w	r3, sl, #8
 8004462:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4650      	mov	r0, sl
 8004468:	b017      	add	sp, #92	@ 0x5c
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004470:	2b01      	cmp	r3, #1
 8004472:	f77f ae2e 	ble.w	80040d2 <_dtoa_r+0x7c2>
 8004476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004478:	930a      	str	r3, [sp, #40]	@ 0x28
 800447a:	2001      	movs	r0, #1
 800447c:	e64d      	b.n	800411a <_dtoa_r+0x80a>
 800447e:	f1bb 0f00 	cmp.w	fp, #0
 8004482:	f77f aed9 	ble.w	8004238 <_dtoa_r+0x928>
 8004486:	4656      	mov	r6, sl
 8004488:	4621      	mov	r1, r4
 800448a:	9803      	ldr	r0, [sp, #12]
 800448c:	f7ff f9b5 	bl	80037fa <quorem>
 8004490:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004494:	f806 3b01 	strb.w	r3, [r6], #1
 8004498:	eba6 020a 	sub.w	r2, r6, sl
 800449c:	4593      	cmp	fp, r2
 800449e:	ddb4      	ble.n	800440a <_dtoa_r+0xafa>
 80044a0:	2300      	movs	r3, #0
 80044a2:	220a      	movs	r2, #10
 80044a4:	4648      	mov	r0, r9
 80044a6:	9903      	ldr	r1, [sp, #12]
 80044a8:	f000 f8b0 	bl	800460c <__multadd>
 80044ac:	9003      	str	r0, [sp, #12]
 80044ae:	e7eb      	b.n	8004488 <_dtoa_r+0xb78>
 80044b0:	08005426 	.word	0x08005426
 80044b4:	080053aa 	.word	0x080053aa

080044b8 <_free_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4605      	mov	r5, r0
 80044bc:	2900      	cmp	r1, #0
 80044be:	d040      	beq.n	8004542 <_free_r+0x8a>
 80044c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c4:	1f0c      	subs	r4, r1, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfb8      	it	lt
 80044ca:	18e4      	addlt	r4, r4, r3
 80044cc:	f7fe fa7a 	bl	80029c4 <__malloc_lock>
 80044d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <_free_r+0x8c>)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	b933      	cbnz	r3, 80044e4 <_free_r+0x2c>
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	6014      	str	r4, [r2, #0]
 80044da:	4628      	mov	r0, r5
 80044dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044e0:	f7fe ba76 	b.w	80029d0 <__malloc_unlock>
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d908      	bls.n	80044fa <_free_r+0x42>
 80044e8:	6820      	ldr	r0, [r4, #0]
 80044ea:	1821      	adds	r1, r4, r0
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf01      	itttt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	1809      	addeq	r1, r1, r0
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	e7ed      	b.n	80044d6 <_free_r+0x1e>
 80044fa:	461a      	mov	r2, r3
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	b10b      	cbz	r3, 8004504 <_free_r+0x4c>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d9fa      	bls.n	80044fa <_free_r+0x42>
 8004504:	6811      	ldr	r1, [r2, #0]
 8004506:	1850      	adds	r0, r2, r1
 8004508:	42a0      	cmp	r0, r4
 800450a:	d10b      	bne.n	8004524 <_free_r+0x6c>
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	4401      	add	r1, r0
 8004510:	1850      	adds	r0, r2, r1
 8004512:	4283      	cmp	r3, r0
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	d1e0      	bne.n	80044da <_free_r+0x22>
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4408      	add	r0, r1
 800451e:	6010      	str	r0, [r2, #0]
 8004520:	6053      	str	r3, [r2, #4]
 8004522:	e7da      	b.n	80044da <_free_r+0x22>
 8004524:	d902      	bls.n	800452c <_free_r+0x74>
 8004526:	230c      	movs	r3, #12
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	e7d6      	b.n	80044da <_free_r+0x22>
 800452c:	6820      	ldr	r0, [r4, #0]
 800452e:	1821      	adds	r1, r4, r0
 8004530:	428b      	cmp	r3, r1
 8004532:	bf01      	itttt	eq
 8004534:	6819      	ldreq	r1, [r3, #0]
 8004536:	685b      	ldreq	r3, [r3, #4]
 8004538:	1809      	addeq	r1, r1, r0
 800453a:	6021      	streq	r1, [r4, #0]
 800453c:	6063      	str	r3, [r4, #4]
 800453e:	6054      	str	r4, [r2, #4]
 8004540:	e7cb      	b.n	80044da <_free_r+0x22>
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200002cc 	.word	0x200002cc

08004548 <_Balloc>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	69c6      	ldr	r6, [r0, #28]
 800454c:	4604      	mov	r4, r0
 800454e:	460d      	mov	r5, r1
 8004550:	b976      	cbnz	r6, 8004570 <_Balloc+0x28>
 8004552:	2010      	movs	r0, #16
 8004554:	f7fe f984 	bl	8002860 <malloc>
 8004558:	4602      	mov	r2, r0
 800455a:	61e0      	str	r0, [r4, #28]
 800455c:	b920      	cbnz	r0, 8004568 <_Balloc+0x20>
 800455e:	216b      	movs	r1, #107	@ 0x6b
 8004560:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <_Balloc+0x78>)
 8004562:	4818      	ldr	r0, [pc, #96]	@ (80045c4 <_Balloc+0x7c>)
 8004564:	f000 fdd6 	bl	8005114 <__assert_func>
 8004568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800456c:	6006      	str	r6, [r0, #0]
 800456e:	60c6      	str	r6, [r0, #12]
 8004570:	69e6      	ldr	r6, [r4, #28]
 8004572:	68f3      	ldr	r3, [r6, #12]
 8004574:	b183      	cbz	r3, 8004598 <_Balloc+0x50>
 8004576:	69e3      	ldr	r3, [r4, #28]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800457e:	b9b8      	cbnz	r0, 80045b0 <_Balloc+0x68>
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f605 	lsl.w	r6, r1, r5
 8004586:	1d72      	adds	r2, r6, #5
 8004588:	4620      	mov	r0, r4
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	f000 fde0 	bl	8005150 <_calloc_r>
 8004590:	b160      	cbz	r0, 80045ac <_Balloc+0x64>
 8004592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004596:	e00e      	b.n	80045b6 <_Balloc+0x6e>
 8004598:	2221      	movs	r2, #33	@ 0x21
 800459a:	2104      	movs	r1, #4
 800459c:	4620      	mov	r0, r4
 800459e:	f000 fdd7 	bl	8005150 <_calloc_r>
 80045a2:	69e3      	ldr	r3, [r4, #28]
 80045a4:	60f0      	str	r0, [r6, #12]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e4      	bne.n	8004576 <_Balloc+0x2e>
 80045ac:	2000      	movs	r0, #0
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	6802      	ldr	r2, [r0, #0]
 80045b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80045b6:	2300      	movs	r3, #0
 80045b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80045bc:	e7f7      	b.n	80045ae <_Balloc+0x66>
 80045be:	bf00      	nop
 80045c0:	080053b7 	.word	0x080053b7
 80045c4:	08005437 	.word	0x08005437

080045c8 <_Bfree>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	69c6      	ldr	r6, [r0, #28]
 80045cc:	4605      	mov	r5, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	b976      	cbnz	r6, 80045f0 <_Bfree+0x28>
 80045d2:	2010      	movs	r0, #16
 80045d4:	f7fe f944 	bl	8002860 <malloc>
 80045d8:	4602      	mov	r2, r0
 80045da:	61e8      	str	r0, [r5, #28]
 80045dc:	b920      	cbnz	r0, 80045e8 <_Bfree+0x20>
 80045de:	218f      	movs	r1, #143	@ 0x8f
 80045e0:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <_Bfree+0x3c>)
 80045e2:	4809      	ldr	r0, [pc, #36]	@ (8004608 <_Bfree+0x40>)
 80045e4:	f000 fd96 	bl	8005114 <__assert_func>
 80045e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045ec:	6006      	str	r6, [r0, #0]
 80045ee:	60c6      	str	r6, [r0, #12]
 80045f0:	b13c      	cbz	r4, 8004602 <_Bfree+0x3a>
 80045f2:	69eb      	ldr	r3, [r5, #28]
 80045f4:	6862      	ldr	r2, [r4, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045fc:	6021      	str	r1, [r4, #0]
 80045fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	080053b7 	.word	0x080053b7
 8004608:	08005437 	.word	0x08005437

0800460c <__multadd>:
 800460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004610:	4607      	mov	r7, r0
 8004612:	460c      	mov	r4, r1
 8004614:	461e      	mov	r6, r3
 8004616:	2000      	movs	r0, #0
 8004618:	690d      	ldr	r5, [r1, #16]
 800461a:	f101 0c14 	add.w	ip, r1, #20
 800461e:	f8dc 3000 	ldr.w	r3, [ip]
 8004622:	3001      	adds	r0, #1
 8004624:	b299      	uxth	r1, r3
 8004626:	fb02 6101 	mla	r1, r2, r1, r6
 800462a:	0c1e      	lsrs	r6, r3, #16
 800462c:	0c0b      	lsrs	r3, r1, #16
 800462e:	fb02 3306 	mla	r3, r2, r6, r3
 8004632:	b289      	uxth	r1, r1
 8004634:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004638:	4285      	cmp	r5, r0
 800463a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800463e:	f84c 1b04 	str.w	r1, [ip], #4
 8004642:	dcec      	bgt.n	800461e <__multadd+0x12>
 8004644:	b30e      	cbz	r6, 800468a <__multadd+0x7e>
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc19      	bgt.n	8004680 <__multadd+0x74>
 800464c:	6861      	ldr	r1, [r4, #4]
 800464e:	4638      	mov	r0, r7
 8004650:	3101      	adds	r1, #1
 8004652:	f7ff ff79 	bl	8004548 <_Balloc>
 8004656:	4680      	mov	r8, r0
 8004658:	b928      	cbnz	r0, 8004666 <__multadd+0x5a>
 800465a:	4602      	mov	r2, r0
 800465c:	21ba      	movs	r1, #186	@ 0xba
 800465e:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <__multadd+0x84>)
 8004660:	480c      	ldr	r0, [pc, #48]	@ (8004694 <__multadd+0x88>)
 8004662:	f000 fd57 	bl	8005114 <__assert_func>
 8004666:	6922      	ldr	r2, [r4, #16]
 8004668:	f104 010c 	add.w	r1, r4, #12
 800466c:	3202      	adds	r2, #2
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	300c      	adds	r0, #12
 8004672:	f7ff f8b4 	bl	80037de <memcpy>
 8004676:	4621      	mov	r1, r4
 8004678:	4638      	mov	r0, r7
 800467a:	f7ff ffa5 	bl	80045c8 <_Bfree>
 800467e:	4644      	mov	r4, r8
 8004680:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004684:	3501      	adds	r5, #1
 8004686:	615e      	str	r6, [r3, #20]
 8004688:	6125      	str	r5, [r4, #16]
 800468a:	4620      	mov	r0, r4
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004690:	08005426 	.word	0x08005426
 8004694:	08005437 	.word	0x08005437

08004698 <__hi0bits>:
 8004698:	4603      	mov	r3, r0
 800469a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800469e:	bf3a      	itte	cc
 80046a0:	0403      	lslcc	r3, r0, #16
 80046a2:	2010      	movcc	r0, #16
 80046a4:	2000      	movcs	r0, #0
 80046a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046aa:	bf3c      	itt	cc
 80046ac:	021b      	lslcc	r3, r3, #8
 80046ae:	3008      	addcc	r0, #8
 80046b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b4:	bf3c      	itt	cc
 80046b6:	011b      	lslcc	r3, r3, #4
 80046b8:	3004      	addcc	r0, #4
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046be:	bf3c      	itt	cc
 80046c0:	009b      	lslcc	r3, r3, #2
 80046c2:	3002      	addcc	r0, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db05      	blt.n	80046d4 <__hi0bits+0x3c>
 80046c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80046cc:	f100 0001 	add.w	r0, r0, #1
 80046d0:	bf08      	it	eq
 80046d2:	2020      	moveq	r0, #32
 80046d4:	4770      	bx	lr

080046d6 <__lo0bits>:
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	4602      	mov	r2, r0
 80046da:	f013 0007 	ands.w	r0, r3, #7
 80046de:	d00b      	beq.n	80046f8 <__lo0bits+0x22>
 80046e0:	07d9      	lsls	r1, r3, #31
 80046e2:	d421      	bmi.n	8004728 <__lo0bits+0x52>
 80046e4:	0798      	lsls	r0, r3, #30
 80046e6:	bf49      	itett	mi
 80046e8:	085b      	lsrmi	r3, r3, #1
 80046ea:	089b      	lsrpl	r3, r3, #2
 80046ec:	2001      	movmi	r0, #1
 80046ee:	6013      	strmi	r3, [r2, #0]
 80046f0:	bf5c      	itt	pl
 80046f2:	2002      	movpl	r0, #2
 80046f4:	6013      	strpl	r3, [r2, #0]
 80046f6:	4770      	bx	lr
 80046f8:	b299      	uxth	r1, r3
 80046fa:	b909      	cbnz	r1, 8004700 <__lo0bits+0x2a>
 80046fc:	2010      	movs	r0, #16
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	b2d9      	uxtb	r1, r3
 8004702:	b909      	cbnz	r1, 8004708 <__lo0bits+0x32>
 8004704:	3008      	adds	r0, #8
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	0719      	lsls	r1, r3, #28
 800470a:	bf04      	itt	eq
 800470c:	091b      	lsreq	r3, r3, #4
 800470e:	3004      	addeq	r0, #4
 8004710:	0799      	lsls	r1, r3, #30
 8004712:	bf04      	itt	eq
 8004714:	089b      	lsreq	r3, r3, #2
 8004716:	3002      	addeq	r0, #2
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	d403      	bmi.n	8004724 <__lo0bits+0x4e>
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	f100 0001 	add.w	r0, r0, #1
 8004722:	d003      	beq.n	800472c <__lo0bits+0x56>
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4770      	bx	lr
 8004728:	2000      	movs	r0, #0
 800472a:	4770      	bx	lr
 800472c:	2020      	movs	r0, #32
 800472e:	4770      	bx	lr

08004730 <__i2b>:
 8004730:	b510      	push	{r4, lr}
 8004732:	460c      	mov	r4, r1
 8004734:	2101      	movs	r1, #1
 8004736:	f7ff ff07 	bl	8004548 <_Balloc>
 800473a:	4602      	mov	r2, r0
 800473c:	b928      	cbnz	r0, 800474a <__i2b+0x1a>
 800473e:	f240 1145 	movw	r1, #325	@ 0x145
 8004742:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <__i2b+0x24>)
 8004744:	4804      	ldr	r0, [pc, #16]	@ (8004758 <__i2b+0x28>)
 8004746:	f000 fce5 	bl	8005114 <__assert_func>
 800474a:	2301      	movs	r3, #1
 800474c:	6144      	str	r4, [r0, #20]
 800474e:	6103      	str	r3, [r0, #16]
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	08005426 	.word	0x08005426
 8004758:	08005437 	.word	0x08005437

0800475c <__multiply>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	4617      	mov	r7, r2
 8004762:	690a      	ldr	r2, [r1, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4689      	mov	r9, r1
 8004768:	429a      	cmp	r2, r3
 800476a:	bfa2      	ittt	ge
 800476c:	463b      	movge	r3, r7
 800476e:	460f      	movge	r7, r1
 8004770:	4699      	movge	r9, r3
 8004772:	693d      	ldr	r5, [r7, #16]
 8004774:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	eb05 060a 	add.w	r6, r5, sl
 8004780:	42b3      	cmp	r3, r6
 8004782:	b085      	sub	sp, #20
 8004784:	bfb8      	it	lt
 8004786:	3101      	addlt	r1, #1
 8004788:	f7ff fede 	bl	8004548 <_Balloc>
 800478c:	b930      	cbnz	r0, 800479c <__multiply+0x40>
 800478e:	4602      	mov	r2, r0
 8004790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004794:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <__multiply+0x13c>)
 8004796:	4841      	ldr	r0, [pc, #260]	@ (800489c <__multiply+0x140>)
 8004798:	f000 fcbc 	bl	8005114 <__assert_func>
 800479c:	f100 0414 	add.w	r4, r0, #20
 80047a0:	4623      	mov	r3, r4
 80047a2:	2200      	movs	r2, #0
 80047a4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80047a8:	4573      	cmp	r3, lr
 80047aa:	d320      	bcc.n	80047ee <__multiply+0x92>
 80047ac:	f107 0814 	add.w	r8, r7, #20
 80047b0:	f109 0114 	add.w	r1, r9, #20
 80047b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80047b8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80047bc:	9302      	str	r3, [sp, #8]
 80047be:	1beb      	subs	r3, r5, r7
 80047c0:	3b15      	subs	r3, #21
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	3304      	adds	r3, #4
 80047c8:	3715      	adds	r7, #21
 80047ca:	42bd      	cmp	r5, r7
 80047cc:	bf38      	it	cc
 80047ce:	2304      	movcc	r3, #4
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	9b02      	ldr	r3, [sp, #8]
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	428b      	cmp	r3, r1
 80047d8:	d80c      	bhi.n	80047f4 <__multiply+0x98>
 80047da:	2e00      	cmp	r6, #0
 80047dc:	dd03      	ble.n	80047e6 <__multiply+0x8a>
 80047de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d055      	beq.n	8004892 <__multiply+0x136>
 80047e6:	6106      	str	r6, [r0, #16]
 80047e8:	b005      	add	sp, #20
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	f843 2b04 	str.w	r2, [r3], #4
 80047f2:	e7d9      	b.n	80047a8 <__multiply+0x4c>
 80047f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80047f8:	f1ba 0f00 	cmp.w	sl, #0
 80047fc:	d01f      	beq.n	800483e <__multiply+0xe2>
 80047fe:	46c4      	mov	ip, r8
 8004800:	46a1      	mov	r9, r4
 8004802:	2700      	movs	r7, #0
 8004804:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004808:	f8d9 3000 	ldr.w	r3, [r9]
 800480c:	fa1f fb82 	uxth.w	fp, r2
 8004810:	b29b      	uxth	r3, r3
 8004812:	fb0a 330b 	mla	r3, sl, fp, r3
 8004816:	443b      	add	r3, r7
 8004818:	f8d9 7000 	ldr.w	r7, [r9]
 800481c:	0c12      	lsrs	r2, r2, #16
 800481e:	0c3f      	lsrs	r7, r7, #16
 8004820:	fb0a 7202 	mla	r2, sl, r2, r7
 8004824:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004828:	b29b      	uxth	r3, r3
 800482a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800482e:	4565      	cmp	r5, ip
 8004830:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004834:	f849 3b04 	str.w	r3, [r9], #4
 8004838:	d8e4      	bhi.n	8004804 <__multiply+0xa8>
 800483a:	9b01      	ldr	r3, [sp, #4]
 800483c:	50e7      	str	r7, [r4, r3]
 800483e:	9b03      	ldr	r3, [sp, #12]
 8004840:	3104      	adds	r1, #4
 8004842:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004846:	f1b9 0f00 	cmp.w	r9, #0
 800484a:	d020      	beq.n	800488e <__multiply+0x132>
 800484c:	4647      	mov	r7, r8
 800484e:	46a4      	mov	ip, r4
 8004850:	f04f 0a00 	mov.w	sl, #0
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	f8b7 b000 	ldrh.w	fp, [r7]
 800485a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800485e:	b29b      	uxth	r3, r3
 8004860:	fb09 220b 	mla	r2, r9, fp, r2
 8004864:	4452      	add	r2, sl
 8004866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800486a:	f84c 3b04 	str.w	r3, [ip], #4
 800486e:	f857 3b04 	ldr.w	r3, [r7], #4
 8004872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004876:	f8bc 3000 	ldrh.w	r3, [ip]
 800487a:	42bd      	cmp	r5, r7
 800487c:	fb09 330a 	mla	r3, r9, sl, r3
 8004880:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004884:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004888:	d8e5      	bhi.n	8004856 <__multiply+0xfa>
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	50a3      	str	r3, [r4, r2]
 800488e:	3404      	adds	r4, #4
 8004890:	e79f      	b.n	80047d2 <__multiply+0x76>
 8004892:	3e01      	subs	r6, #1
 8004894:	e7a1      	b.n	80047da <__multiply+0x7e>
 8004896:	bf00      	nop
 8004898:	08005426 	.word	0x08005426
 800489c:	08005437 	.word	0x08005437

080048a0 <__pow5mult>:
 80048a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a4:	4615      	mov	r5, r2
 80048a6:	f012 0203 	ands.w	r2, r2, #3
 80048aa:	4607      	mov	r7, r0
 80048ac:	460e      	mov	r6, r1
 80048ae:	d007      	beq.n	80048c0 <__pow5mult+0x20>
 80048b0:	4c25      	ldr	r4, [pc, #148]	@ (8004948 <__pow5mult+0xa8>)
 80048b2:	3a01      	subs	r2, #1
 80048b4:	2300      	movs	r3, #0
 80048b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80048ba:	f7ff fea7 	bl	800460c <__multadd>
 80048be:	4606      	mov	r6, r0
 80048c0:	10ad      	asrs	r5, r5, #2
 80048c2:	d03d      	beq.n	8004940 <__pow5mult+0xa0>
 80048c4:	69fc      	ldr	r4, [r7, #28]
 80048c6:	b97c      	cbnz	r4, 80048e8 <__pow5mult+0x48>
 80048c8:	2010      	movs	r0, #16
 80048ca:	f7fd ffc9 	bl	8002860 <malloc>
 80048ce:	4602      	mov	r2, r0
 80048d0:	61f8      	str	r0, [r7, #28]
 80048d2:	b928      	cbnz	r0, 80048e0 <__pow5mult+0x40>
 80048d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <__pow5mult+0xac>)
 80048da:	481d      	ldr	r0, [pc, #116]	@ (8004950 <__pow5mult+0xb0>)
 80048dc:	f000 fc1a 	bl	8005114 <__assert_func>
 80048e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048e4:	6004      	str	r4, [r0, #0]
 80048e6:	60c4      	str	r4, [r0, #12]
 80048e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80048ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048f0:	b94c      	cbnz	r4, 8004906 <__pow5mult+0x66>
 80048f2:	f240 2171 	movw	r1, #625	@ 0x271
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ff1a 	bl	8004730 <__i2b>
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	f8c8 0008 	str.w	r0, [r8, #8]
 8004904:	6003      	str	r3, [r0, #0]
 8004906:	f04f 0900 	mov.w	r9, #0
 800490a:	07eb      	lsls	r3, r5, #31
 800490c:	d50a      	bpl.n	8004924 <__pow5mult+0x84>
 800490e:	4631      	mov	r1, r6
 8004910:	4622      	mov	r2, r4
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff ff22 	bl	800475c <__multiply>
 8004918:	4680      	mov	r8, r0
 800491a:	4631      	mov	r1, r6
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff fe53 	bl	80045c8 <_Bfree>
 8004922:	4646      	mov	r6, r8
 8004924:	106d      	asrs	r5, r5, #1
 8004926:	d00b      	beq.n	8004940 <__pow5mult+0xa0>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	b938      	cbnz	r0, 800493c <__pow5mult+0x9c>
 800492c:	4622      	mov	r2, r4
 800492e:	4621      	mov	r1, r4
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff ff13 	bl	800475c <__multiply>
 8004936:	6020      	str	r0, [r4, #0]
 8004938:	f8c0 9000 	str.w	r9, [r0]
 800493c:	4604      	mov	r4, r0
 800493e:	e7e4      	b.n	800490a <__pow5mult+0x6a>
 8004940:	4630      	mov	r0, r6
 8004942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004946:	bf00      	nop
 8004948:	08005510 	.word	0x08005510
 800494c:	080053b7 	.word	0x080053b7
 8004950:	08005437 	.word	0x08005437

08004954 <__lshift>:
 8004954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	460c      	mov	r4, r1
 800495a:	4607      	mov	r7, r0
 800495c:	4691      	mov	r9, r2
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	6849      	ldr	r1, [r1, #4]
 8004962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004966:	68a3      	ldr	r3, [r4, #8]
 8004968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800496c:	f108 0601 	add.w	r6, r8, #1
 8004970:	42b3      	cmp	r3, r6
 8004972:	db0b      	blt.n	800498c <__lshift+0x38>
 8004974:	4638      	mov	r0, r7
 8004976:	f7ff fde7 	bl	8004548 <_Balloc>
 800497a:	4605      	mov	r5, r0
 800497c:	b948      	cbnz	r0, 8004992 <__lshift+0x3e>
 800497e:	4602      	mov	r2, r0
 8004980:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004984:	4b27      	ldr	r3, [pc, #156]	@ (8004a24 <__lshift+0xd0>)
 8004986:	4828      	ldr	r0, [pc, #160]	@ (8004a28 <__lshift+0xd4>)
 8004988:	f000 fbc4 	bl	8005114 <__assert_func>
 800498c:	3101      	adds	r1, #1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	e7ee      	b.n	8004970 <__lshift+0x1c>
 8004992:	2300      	movs	r3, #0
 8004994:	f100 0114 	add.w	r1, r0, #20
 8004998:	f100 0210 	add.w	r2, r0, #16
 800499c:	4618      	mov	r0, r3
 800499e:	4553      	cmp	r3, sl
 80049a0:	db33      	blt.n	8004a0a <__lshift+0xb6>
 80049a2:	6920      	ldr	r0, [r4, #16]
 80049a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049a8:	f104 0314 	add.w	r3, r4, #20
 80049ac:	f019 091f 	ands.w	r9, r9, #31
 80049b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80049b8:	d02b      	beq.n	8004a12 <__lshift+0xbe>
 80049ba:	468a      	mov	sl, r1
 80049bc:	2200      	movs	r2, #0
 80049be:	f1c9 0e20 	rsb	lr, r9, #32
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	fa00 f009 	lsl.w	r0, r0, r9
 80049c8:	4310      	orrs	r0, r2
 80049ca:	f84a 0b04 	str.w	r0, [sl], #4
 80049ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d2:	459c      	cmp	ip, r3
 80049d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80049d8:	d8f3      	bhi.n	80049c2 <__lshift+0x6e>
 80049da:	ebac 0304 	sub.w	r3, ip, r4
 80049de:	3b15      	subs	r3, #21
 80049e0:	f023 0303 	bic.w	r3, r3, #3
 80049e4:	3304      	adds	r3, #4
 80049e6:	f104 0015 	add.w	r0, r4, #21
 80049ea:	4560      	cmp	r0, ip
 80049ec:	bf88      	it	hi
 80049ee:	2304      	movhi	r3, #4
 80049f0:	50ca      	str	r2, [r1, r3]
 80049f2:	b10a      	cbz	r2, 80049f8 <__lshift+0xa4>
 80049f4:	f108 0602 	add.w	r6, r8, #2
 80049f8:	3e01      	subs	r6, #1
 80049fa:	4638      	mov	r0, r7
 80049fc:	4621      	mov	r1, r4
 80049fe:	612e      	str	r6, [r5, #16]
 8004a00:	f7ff fde2 	bl	80045c8 <_Bfree>
 8004a04:	4628      	mov	r0, r5
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a0e:	3301      	adds	r3, #1
 8004a10:	e7c5      	b.n	800499e <__lshift+0x4a>
 8004a12:	3904      	subs	r1, #4
 8004a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a18:	459c      	cmp	ip, r3
 8004a1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004a1e:	d8f9      	bhi.n	8004a14 <__lshift+0xc0>
 8004a20:	e7ea      	b.n	80049f8 <__lshift+0xa4>
 8004a22:	bf00      	nop
 8004a24:	08005426 	.word	0x08005426
 8004a28:	08005437 	.word	0x08005437

08004a2c <__mcmp>:
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	690a      	ldr	r2, [r1, #16]
 8004a30:	6900      	ldr	r0, [r0, #16]
 8004a32:	b530      	push	{r4, r5, lr}
 8004a34:	1a80      	subs	r0, r0, r2
 8004a36:	d10e      	bne.n	8004a56 <__mcmp+0x2a>
 8004a38:	3314      	adds	r3, #20
 8004a3a:	3114      	adds	r1, #20
 8004a3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004a40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004a44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a4c:	4295      	cmp	r5, r2
 8004a4e:	d003      	beq.n	8004a58 <__mcmp+0x2c>
 8004a50:	d205      	bcs.n	8004a5e <__mcmp+0x32>
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	bd30      	pop	{r4, r5, pc}
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d3f3      	bcc.n	8004a44 <__mcmp+0x18>
 8004a5c:	e7fb      	b.n	8004a56 <__mcmp+0x2a>
 8004a5e:	2001      	movs	r0, #1
 8004a60:	e7f9      	b.n	8004a56 <__mcmp+0x2a>
	...

08004a64 <__mdiff>:
 8004a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	4689      	mov	r9, r1
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4648      	mov	r0, r9
 8004a70:	4614      	mov	r4, r2
 8004a72:	f7ff ffdb 	bl	8004a2c <__mcmp>
 8004a76:	1e05      	subs	r5, r0, #0
 8004a78:	d112      	bne.n	8004aa0 <__mdiff+0x3c>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7ff fd63 	bl	8004548 <_Balloc>
 8004a82:	4602      	mov	r2, r0
 8004a84:	b928      	cbnz	r0, 8004a92 <__mdiff+0x2e>
 8004a86:	f240 2137 	movw	r1, #567	@ 0x237
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <__mdiff+0x120>)
 8004a8c:	483e      	ldr	r0, [pc, #248]	@ (8004b88 <__mdiff+0x124>)
 8004a8e:	f000 fb41 	bl	8005114 <__assert_func>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a98:	4610      	mov	r0, r2
 8004a9a:	b003      	add	sp, #12
 8004a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa0:	bfbc      	itt	lt
 8004aa2:	464b      	movlt	r3, r9
 8004aa4:	46a1      	movlt	r9, r4
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004aac:	bfba      	itte	lt
 8004aae:	461c      	movlt	r4, r3
 8004ab0:	2501      	movlt	r5, #1
 8004ab2:	2500      	movge	r5, #0
 8004ab4:	f7ff fd48 	bl	8004548 <_Balloc>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	b918      	cbnz	r0, 8004ac4 <__mdiff+0x60>
 8004abc:	f240 2145 	movw	r1, #581	@ 0x245
 8004ac0:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <__mdiff+0x120>)
 8004ac2:	e7e3      	b.n	8004a8c <__mdiff+0x28>
 8004ac4:	f100 0b14 	add.w	fp, r0, #20
 8004ac8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004acc:	f109 0310 	add.w	r3, r9, #16
 8004ad0:	60c5      	str	r5, [r0, #12]
 8004ad2:	f04f 0c00 	mov.w	ip, #0
 8004ad6:	f109 0514 	add.w	r5, r9, #20
 8004ada:	46d9      	mov	r9, fp
 8004adc:	6926      	ldr	r6, [r4, #16]
 8004ade:	f104 0e14 	add.w	lr, r4, #20
 8004ae2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004ae6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004af2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004af6:	b281      	uxth	r1, r0
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	fa1f f38a 	uxth.w	r3, sl
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	0c00      	lsrs	r0, r0, #16
 8004b02:	4463      	add	r3, ip
 8004b04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004b08:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b12:	4576      	cmp	r6, lr
 8004b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b18:	f849 3b04 	str.w	r3, [r9], #4
 8004b1c:	d8e6      	bhi.n	8004aec <__mdiff+0x88>
 8004b1e:	1b33      	subs	r3, r6, r4
 8004b20:	3b15      	subs	r3, #21
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	3415      	adds	r4, #21
 8004b28:	3304      	adds	r3, #4
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	bf38      	it	cc
 8004b2e:	2304      	movcc	r3, #4
 8004b30:	441d      	add	r5, r3
 8004b32:	445b      	add	r3, fp
 8004b34:	461e      	mov	r6, r3
 8004b36:	462c      	mov	r4, r5
 8004b38:	4544      	cmp	r4, r8
 8004b3a:	d30e      	bcc.n	8004b5a <__mdiff+0xf6>
 8004b3c:	f108 0103 	add.w	r1, r8, #3
 8004b40:	1b49      	subs	r1, r1, r5
 8004b42:	f021 0103 	bic.w	r1, r1, #3
 8004b46:	3d03      	subs	r5, #3
 8004b48:	45a8      	cmp	r8, r5
 8004b4a:	bf38      	it	cc
 8004b4c:	2100      	movcc	r1, #0
 8004b4e:	440b      	add	r3, r1
 8004b50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b54:	b199      	cbz	r1, 8004b7e <__mdiff+0x11a>
 8004b56:	6117      	str	r7, [r2, #16]
 8004b58:	e79e      	b.n	8004a98 <__mdiff+0x34>
 8004b5a:	46e6      	mov	lr, ip
 8004b5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004b60:	fa1f fc81 	uxth.w	ip, r1
 8004b64:	44f4      	add	ip, lr
 8004b66:	0c08      	lsrs	r0, r1, #16
 8004b68:	4471      	add	r1, lr
 8004b6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004b6e:	b289      	uxth	r1, r1
 8004b70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b78:	f846 1b04 	str.w	r1, [r6], #4
 8004b7c:	e7dc      	b.n	8004b38 <__mdiff+0xd4>
 8004b7e:	3f01      	subs	r7, #1
 8004b80:	e7e6      	b.n	8004b50 <__mdiff+0xec>
 8004b82:	bf00      	nop
 8004b84:	08005426 	.word	0x08005426
 8004b88:	08005437 	.word	0x08005437

08004b8c <__d2b>:
 8004b8c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004b90:	2101      	movs	r1, #1
 8004b92:	4690      	mov	r8, r2
 8004b94:	4699      	mov	r9, r3
 8004b96:	9e08      	ldr	r6, [sp, #32]
 8004b98:	f7ff fcd6 	bl	8004548 <_Balloc>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	b930      	cbnz	r0, 8004bae <__d2b+0x22>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f240 310f 	movw	r1, #783	@ 0x30f
 8004ba6:	4b23      	ldr	r3, [pc, #140]	@ (8004c34 <__d2b+0xa8>)
 8004ba8:	4823      	ldr	r0, [pc, #140]	@ (8004c38 <__d2b+0xac>)
 8004baa:	f000 fab3 	bl	8005114 <__assert_func>
 8004bae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004bb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bb6:	b10d      	cbz	r5, 8004bbc <__d2b+0x30>
 8004bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	f1b8 0300 	subs.w	r3, r8, #0
 8004bc2:	d024      	beq.n	8004c0e <__d2b+0x82>
 8004bc4:	4668      	mov	r0, sp
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	f7ff fd85 	bl	80046d6 <__lo0bits>
 8004bcc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004bd0:	b1d8      	cbz	r0, 8004c0a <__d2b+0x7e>
 8004bd2:	f1c0 0320 	rsb	r3, r0, #32
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	40c2      	lsrs	r2, r0
 8004bde:	6163      	str	r3, [r4, #20]
 8004be0:	9201      	str	r2, [sp, #4]
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2201      	moveq	r2, #1
 8004bea:	2202      	movne	r2, #2
 8004bec:	61a3      	str	r3, [r4, #24]
 8004bee:	6122      	str	r2, [r4, #16]
 8004bf0:	b1ad      	cbz	r5, 8004c1e <__d2b+0x92>
 8004bf2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004bf6:	4405      	add	r5, r0
 8004bf8:	6035      	str	r5, [r6, #0]
 8004bfa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c00:	6018      	str	r0, [r3, #0]
 8004c02:	4620      	mov	r0, r4
 8004c04:	b002      	add	sp, #8
 8004c06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004c0a:	6161      	str	r1, [r4, #20]
 8004c0c:	e7e9      	b.n	8004be2 <__d2b+0x56>
 8004c0e:	a801      	add	r0, sp, #4
 8004c10:	f7ff fd61 	bl	80046d6 <__lo0bits>
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	6163      	str	r3, [r4, #20]
 8004c1a:	3020      	adds	r0, #32
 8004c1c:	e7e7      	b.n	8004bee <__d2b+0x62>
 8004c1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004c22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c26:	6030      	str	r0, [r6, #0]
 8004c28:	6918      	ldr	r0, [r3, #16]
 8004c2a:	f7ff fd35 	bl	8004698 <__hi0bits>
 8004c2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004c32:	e7e4      	b.n	8004bfe <__d2b+0x72>
 8004c34:	08005426 	.word	0x08005426
 8004c38:	08005437 	.word	0x08005437

08004c3c <__sfputc_r>:
 8004c3c:	6893      	ldr	r3, [r2, #8]
 8004c3e:	b410      	push	{r4}
 8004c40:	3b01      	subs	r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	6093      	str	r3, [r2, #8]
 8004c46:	da07      	bge.n	8004c58 <__sfputc_r+0x1c>
 8004c48:	6994      	ldr	r4, [r2, #24]
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	db01      	blt.n	8004c52 <__sfputc_r+0x16>
 8004c4e:	290a      	cmp	r1, #10
 8004c50:	d102      	bne.n	8004c58 <__sfputc_r+0x1c>
 8004c52:	bc10      	pop	{r4}
 8004c54:	f7fe bc91 	b.w	800357a <__swbuf_r>
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	1c58      	adds	r0, r3, #1
 8004c5c:	6010      	str	r0, [r2, #0]
 8004c5e:	7019      	strb	r1, [r3, #0]
 8004c60:	4608      	mov	r0, r1
 8004c62:	bc10      	pop	{r4}
 8004c64:	4770      	bx	lr

08004c66 <__sfputs_r>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	18d5      	adds	r5, r2, r3
 8004c70:	42ac      	cmp	r4, r5
 8004c72:	d101      	bne.n	8004c78 <__sfputs_r+0x12>
 8004c74:	2000      	movs	r0, #0
 8004c76:	e007      	b.n	8004c88 <__sfputs_r+0x22>
 8004c78:	463a      	mov	r2, r7
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c80:	f7ff ffdc 	bl	8004c3c <__sfputc_r>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d1f3      	bne.n	8004c70 <__sfputs_r+0xa>
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c8c <_vfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	460d      	mov	r5, r1
 8004c92:	4614      	mov	r4, r2
 8004c94:	4698      	mov	r8, r3
 8004c96:	4606      	mov	r6, r0
 8004c98:	b09d      	sub	sp, #116	@ 0x74
 8004c9a:	b118      	cbz	r0, 8004ca4 <_vfiprintf_r+0x18>
 8004c9c:	6a03      	ldr	r3, [r0, #32]
 8004c9e:	b90b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x18>
 8004ca0:	f7fe fb82 	bl	80033a8 <__sinit>
 8004ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ca6:	07d9      	lsls	r1, r3, #31
 8004ca8:	d405      	bmi.n	8004cb6 <_vfiprintf_r+0x2a>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	059a      	lsls	r2, r3, #22
 8004cae:	d402      	bmi.n	8004cb6 <_vfiprintf_r+0x2a>
 8004cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cb2:	f7fe fd84 	bl	80037be <__retarget_lock_acquire_recursive>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	d501      	bpl.n	8004cc0 <_vfiprintf_r+0x34>
 8004cbc:	692b      	ldr	r3, [r5, #16]
 8004cbe:	b99b      	cbnz	r3, 8004ce8 <_vfiprintf_r+0x5c>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7fe fc98 	bl	80035f8 <__swsetup_r>
 8004cc8:	b170      	cbz	r0, 8004ce8 <_vfiprintf_r+0x5c>
 8004cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ccc:	07dc      	lsls	r4, r3, #31
 8004cce:	d504      	bpl.n	8004cda <_vfiprintf_r+0x4e>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b01d      	add	sp, #116	@ 0x74
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	0598      	lsls	r0, r3, #22
 8004cde:	d4f7      	bmi.n	8004cd0 <_vfiprintf_r+0x44>
 8004ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ce2:	f7fe fd6d 	bl	80037c0 <__retarget_lock_release_recursive>
 8004ce6:	e7f3      	b.n	8004cd0 <_vfiprintf_r+0x44>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cec:	2320      	movs	r3, #32
 8004cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cf2:	2330      	movs	r3, #48	@ 0x30
 8004cf4:	f04f 0901 	mov.w	r9, #1
 8004cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ea8 <_vfiprintf_r+0x21c>
 8004d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d04:	4623      	mov	r3, r4
 8004d06:	469a      	mov	sl, r3
 8004d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0c:	b10a      	cbz	r2, 8004d12 <_vfiprintf_r+0x86>
 8004d0e:	2a25      	cmp	r2, #37	@ 0x25
 8004d10:	d1f9      	bne.n	8004d06 <_vfiprintf_r+0x7a>
 8004d12:	ebba 0b04 	subs.w	fp, sl, r4
 8004d16:	d00b      	beq.n	8004d30 <_vfiprintf_r+0xa4>
 8004d18:	465b      	mov	r3, fp
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7ff ffa1 	bl	8004c66 <__sfputs_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	f000 80a7 	beq.w	8004e78 <_vfiprintf_r+0x1ec>
 8004d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d2c:	445a      	add	r2, fp
 8004d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d30:	f89a 3000 	ldrb.w	r3, [sl]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 809f 	beq.w	8004e78 <_vfiprintf_r+0x1ec>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d44:	f10a 0a01 	add.w	sl, sl, #1
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	9307      	str	r3, [sp, #28]
 8004d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d52:	4654      	mov	r4, sl
 8004d54:	2205      	movs	r2, #5
 8004d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5a:	4853      	ldr	r0, [pc, #332]	@ (8004ea8 <_vfiprintf_r+0x21c>)
 8004d5c:	f7fe fd31 	bl	80037c2 <memchr>
 8004d60:	9a04      	ldr	r2, [sp, #16]
 8004d62:	b9d8      	cbnz	r0, 8004d9c <_vfiprintf_r+0x110>
 8004d64:	06d1      	lsls	r1, r2, #27
 8004d66:	bf44      	itt	mi
 8004d68:	2320      	movmi	r3, #32
 8004d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d6e:	0713      	lsls	r3, r2, #28
 8004d70:	bf44      	itt	mi
 8004d72:	232b      	movmi	r3, #43	@ 0x2b
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d78:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d7e:	d015      	beq.n	8004dac <_vfiprintf_r+0x120>
 8004d80:	4654      	mov	r4, sl
 8004d82:	2000      	movs	r0, #0
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d90:	3b30      	subs	r3, #48	@ 0x30
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	d94b      	bls.n	8004e2e <_vfiprintf_r+0x1a2>
 8004d96:	b1b0      	cbz	r0, 8004dc6 <_vfiprintf_r+0x13a>
 8004d98:	9207      	str	r2, [sp, #28]
 8004d9a:	e014      	b.n	8004dc6 <_vfiprintf_r+0x13a>
 8004d9c:	eba0 0308 	sub.w	r3, r0, r8
 8004da0:	fa09 f303 	lsl.w	r3, r9, r3
 8004da4:	4313      	orrs	r3, r2
 8004da6:	46a2      	mov	sl, r4
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	e7d2      	b.n	8004d52 <_vfiprintf_r+0xc6>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d19      	adds	r1, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9103      	str	r1, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bfbb      	ittet	lt
 8004db8:	425b      	neglt	r3, r3
 8004dba:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbe:	9307      	strge	r3, [sp, #28]
 8004dc0:	9307      	strlt	r3, [sp, #28]
 8004dc2:	bfb8      	it	lt
 8004dc4:	9204      	strlt	r2, [sp, #16]
 8004dc6:	7823      	ldrb	r3, [r4, #0]
 8004dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dca:	d10a      	bne.n	8004de2 <_vfiprintf_r+0x156>
 8004dcc:	7863      	ldrb	r3, [r4, #1]
 8004dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd0:	d132      	bne.n	8004e38 <_vfiprintf_r+0x1ac>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	3402      	adds	r4, #2
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	9203      	str	r2, [sp, #12]
 8004ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004eac <_vfiprintf_r+0x220>
 8004de6:	2203      	movs	r2, #3
 8004de8:	4650      	mov	r0, sl
 8004dea:	7821      	ldrb	r1, [r4, #0]
 8004dec:	f7fe fce9 	bl	80037c2 <memchr>
 8004df0:	b138      	cbz	r0, 8004e02 <_vfiprintf_r+0x176>
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	9b04      	ldr	r3, [sp, #16]
 8004df6:	eba0 000a 	sub.w	r0, r0, sl
 8004dfa:	4082      	lsls	r2, r0
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	3401      	adds	r4, #1
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e06:	2206      	movs	r2, #6
 8004e08:	4829      	ldr	r0, [pc, #164]	@ (8004eb0 <_vfiprintf_r+0x224>)
 8004e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e0e:	f7fe fcd8 	bl	80037c2 <memchr>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d03f      	beq.n	8004e96 <_vfiprintf_r+0x20a>
 8004e16:	4b27      	ldr	r3, [pc, #156]	@ (8004eb4 <_vfiprintf_r+0x228>)
 8004e18:	bb1b      	cbnz	r3, 8004e62 <_vfiprintf_r+0x1d6>
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	3308      	adds	r3, #8
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e28:	443b      	add	r3, r7
 8004e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e2c:	e76a      	b.n	8004d04 <_vfiprintf_r+0x78>
 8004e2e:	460c      	mov	r4, r1
 8004e30:	2001      	movs	r0, #1
 8004e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e36:	e7a8      	b.n	8004d8a <_vfiprintf_r+0xfe>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f04f 0c0a 	mov.w	ip, #10
 8004e3e:	4619      	mov	r1, r3
 8004e40:	3401      	adds	r4, #1
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	4620      	mov	r0, r4
 8004e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4a:	3a30      	subs	r2, #48	@ 0x30
 8004e4c:	2a09      	cmp	r2, #9
 8004e4e:	d903      	bls.n	8004e58 <_vfiprintf_r+0x1cc>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0c6      	beq.n	8004de2 <_vfiprintf_r+0x156>
 8004e54:	9105      	str	r1, [sp, #20]
 8004e56:	e7c4      	b.n	8004de2 <_vfiprintf_r+0x156>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e60:	e7f0      	b.n	8004e44 <_vfiprintf_r+0x1b8>
 8004e62:	ab03      	add	r3, sp, #12
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	462a      	mov	r2, r5
 8004e68:	4630      	mov	r0, r6
 8004e6a:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <_vfiprintf_r+0x22c>)
 8004e6c:	a904      	add	r1, sp, #16
 8004e6e:	f7fd fe53 	bl	8002b18 <_printf_float>
 8004e72:	4607      	mov	r7, r0
 8004e74:	1c78      	adds	r0, r7, #1
 8004e76:	d1d6      	bne.n	8004e26 <_vfiprintf_r+0x19a>
 8004e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e7a:	07d9      	lsls	r1, r3, #31
 8004e7c:	d405      	bmi.n	8004e8a <_vfiprintf_r+0x1fe>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	059a      	lsls	r2, r3, #22
 8004e82:	d402      	bmi.n	8004e8a <_vfiprintf_r+0x1fe>
 8004e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e86:	f7fe fc9b 	bl	80037c0 <__retarget_lock_release_recursive>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	065b      	lsls	r3, r3, #25
 8004e8e:	f53f af1f 	bmi.w	8004cd0 <_vfiprintf_r+0x44>
 8004e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e94:	e71e      	b.n	8004cd4 <_vfiprintf_r+0x48>
 8004e96:	ab03      	add	r3, sp, #12
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <_vfiprintf_r+0x22c>)
 8004ea0:	a904      	add	r1, sp, #16
 8004ea2:	f7fe f8d7 	bl	8003054 <_printf_i>
 8004ea6:	e7e4      	b.n	8004e72 <_vfiprintf_r+0x1e6>
 8004ea8:	08005490 	.word	0x08005490
 8004eac:	08005496 	.word	0x08005496
 8004eb0:	0800549a 	.word	0x0800549a
 8004eb4:	08002b19 	.word	0x08002b19
 8004eb8:	08004c67 	.word	0x08004c67

08004ebc <__sflush_r>:
 8004ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	0716      	lsls	r6, r2, #28
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	d454      	bmi.n	8004f74 <__sflush_r+0xb8>
 8004eca:	684b      	ldr	r3, [r1, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc02      	bgt.n	8004ed6 <__sflush_r+0x1a>
 8004ed0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dd48      	ble.n	8004f68 <__sflush_r+0xac>
 8004ed6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ed8:	2e00      	cmp	r6, #0
 8004eda:	d045      	beq.n	8004f68 <__sflush_r+0xac>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ee2:	682f      	ldr	r7, [r5, #0]
 8004ee4:	6a21      	ldr	r1, [r4, #32]
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	d030      	beq.n	8004f4c <__sflush_r+0x90>
 8004eea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	0759      	lsls	r1, r3, #29
 8004ef0:	d505      	bpl.n	8004efe <__sflush_r+0x42>
 8004ef2:	6863      	ldr	r3, [r4, #4]
 8004ef4:	1ad2      	subs	r2, r2, r3
 8004ef6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ef8:	b10b      	cbz	r3, 8004efe <__sflush_r+0x42>
 8004efa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	4628      	mov	r0, r5
 8004f02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f04:	6a21      	ldr	r1, [r4, #32]
 8004f06:	47b0      	blx	r6
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	d106      	bne.n	8004f1c <__sflush_r+0x60>
 8004f0e:	6829      	ldr	r1, [r5, #0]
 8004f10:	291d      	cmp	r1, #29
 8004f12:	d82b      	bhi.n	8004f6c <__sflush_r+0xb0>
 8004f14:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <__sflush_r+0xfc>)
 8004f16:	40ca      	lsrs	r2, r1
 8004f18:	07d6      	lsls	r6, r2, #31
 8004f1a:	d527      	bpl.n	8004f6c <__sflush_r+0xb0>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6062      	str	r2, [r4, #4]
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	04d9      	lsls	r1, r3, #19
 8004f24:	6022      	str	r2, [r4, #0]
 8004f26:	d504      	bpl.n	8004f32 <__sflush_r+0x76>
 8004f28:	1c42      	adds	r2, r0, #1
 8004f2a:	d101      	bne.n	8004f30 <__sflush_r+0x74>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b903      	cbnz	r3, 8004f32 <__sflush_r+0x76>
 8004f30:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f34:	602f      	str	r7, [r5, #0]
 8004f36:	b1b9      	cbz	r1, 8004f68 <__sflush_r+0xac>
 8004f38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	d002      	beq.n	8004f46 <__sflush_r+0x8a>
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fab9 	bl	80044b8 <_free_r>
 8004f46:	2300      	movs	r3, #0
 8004f48:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f4a:	e00d      	b.n	8004f68 <__sflush_r+0xac>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	4602      	mov	r2, r0
 8004f54:	1c50      	adds	r0, r2, #1
 8004f56:	d1c9      	bne.n	8004eec <__sflush_r+0x30>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0c6      	beq.n	8004eec <__sflush_r+0x30>
 8004f5e:	2b1d      	cmp	r3, #29
 8004f60:	d001      	beq.n	8004f66 <__sflush_r+0xaa>
 8004f62:	2b16      	cmp	r3, #22
 8004f64:	d11d      	bne.n	8004fa2 <__sflush_r+0xe6>
 8004f66:	602f      	str	r7, [r5, #0]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e021      	b.n	8004fb0 <__sflush_r+0xf4>
 8004f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f70:	b21b      	sxth	r3, r3
 8004f72:	e01a      	b.n	8004faa <__sflush_r+0xee>
 8004f74:	690f      	ldr	r7, [r1, #16]
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	d0f6      	beq.n	8004f68 <__sflush_r+0xac>
 8004f7a:	0793      	lsls	r3, r2, #30
 8004f7c:	bf18      	it	ne
 8004f7e:	2300      	movne	r3, #0
 8004f80:	680e      	ldr	r6, [r1, #0]
 8004f82:	bf08      	it	eq
 8004f84:	694b      	ldreq	r3, [r1, #20]
 8004f86:	1bf6      	subs	r6, r6, r7
 8004f88:	600f      	str	r7, [r1, #0]
 8004f8a:	608b      	str	r3, [r1, #8]
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	ddeb      	ble.n	8004f68 <__sflush_r+0xac>
 8004f90:	4633      	mov	r3, r6
 8004f92:	463a      	mov	r2, r7
 8004f94:	4628      	mov	r0, r5
 8004f96:	6a21      	ldr	r1, [r4, #32]
 8004f98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004f9c:	47e0      	blx	ip
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	dc07      	bgt.n	8004fb2 <__sflush_r+0xf6>
 8004fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004faa:	f04f 30ff 	mov.w	r0, #4294967295
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	4407      	add	r7, r0
 8004fb4:	1a36      	subs	r6, r6, r0
 8004fb6:	e7e9      	b.n	8004f8c <__sflush_r+0xd0>
 8004fb8:	20400001 	.word	0x20400001

08004fbc <_fflush_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	690b      	ldr	r3, [r1, #16]
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	b913      	cbnz	r3, 8004fcc <_fflush_r+0x10>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	4628      	mov	r0, r5
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	b118      	cbz	r0, 8004fd6 <_fflush_r+0x1a>
 8004fce:	6a03      	ldr	r3, [r0, #32]
 8004fd0:	b90b      	cbnz	r3, 8004fd6 <_fflush_r+0x1a>
 8004fd2:	f7fe f9e9 	bl	80033a8 <__sinit>
 8004fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f3      	beq.n	8004fc6 <_fflush_r+0xa>
 8004fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fe0:	07d0      	lsls	r0, r2, #31
 8004fe2:	d404      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe4:	0599      	lsls	r1, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fea:	f7fe fbe8 	bl	80037be <__retarget_lock_acquire_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	f7ff ff63 	bl	8004ebc <__sflush_r>
 8004ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	07da      	lsls	r2, r3, #31
 8004ffc:	d4e4      	bmi.n	8004fc8 <_fflush_r+0xc>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d4e1      	bmi.n	8004fc8 <_fflush_r+0xc>
 8005004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005006:	f7fe fbdb 	bl	80037c0 <__retarget_lock_release_recursive>
 800500a:	e7dd      	b.n	8004fc8 <_fflush_r+0xc>

0800500c <__swhatbuf_r>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005014:	4615      	mov	r5, r2
 8005016:	2900      	cmp	r1, #0
 8005018:	461e      	mov	r6, r3
 800501a:	b096      	sub	sp, #88	@ 0x58
 800501c:	da0c      	bge.n	8005038 <__swhatbuf_r+0x2c>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	2100      	movs	r1, #0
 8005022:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005026:	bf14      	ite	ne
 8005028:	2340      	movne	r3, #64	@ 0x40
 800502a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800502e:	2000      	movs	r0, #0
 8005030:	6031      	str	r1, [r6, #0]
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	b016      	add	sp, #88	@ 0x58
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	466a      	mov	r2, sp
 800503a:	f000 f849 	bl	80050d0 <_fstat_r>
 800503e:	2800      	cmp	r0, #0
 8005040:	dbed      	blt.n	800501e <__swhatbuf_r+0x12>
 8005042:	9901      	ldr	r1, [sp, #4]
 8005044:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005048:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800504c:	4259      	negs	r1, r3
 800504e:	4159      	adcs	r1, r3
 8005050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005054:	e7eb      	b.n	800502e <__swhatbuf_r+0x22>

08005056 <__smakebuf_r>:
 8005056:	898b      	ldrh	r3, [r1, #12]
 8005058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505a:	079d      	lsls	r5, r3, #30
 800505c:	4606      	mov	r6, r0
 800505e:	460c      	mov	r4, r1
 8005060:	d507      	bpl.n	8005072 <__smakebuf_r+0x1c>
 8005062:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	2301      	movs	r3, #1
 800506c:	6163      	str	r3, [r4, #20]
 800506e:	b003      	add	sp, #12
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005072:	466a      	mov	r2, sp
 8005074:	ab01      	add	r3, sp, #4
 8005076:	f7ff ffc9 	bl	800500c <__swhatbuf_r>
 800507a:	9f00      	ldr	r7, [sp, #0]
 800507c:	4605      	mov	r5, r0
 800507e:	4639      	mov	r1, r7
 8005080:	4630      	mov	r0, r6
 8005082:	f7fd fc1f 	bl	80028c4 <_malloc_r>
 8005086:	b948      	cbnz	r0, 800509c <__smakebuf_r+0x46>
 8005088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508c:	059a      	lsls	r2, r3, #22
 800508e:	d4ee      	bmi.n	800506e <__smakebuf_r+0x18>
 8005090:	f023 0303 	bic.w	r3, r3, #3
 8005094:	f043 0302 	orr.w	r3, r3, #2
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	e7e2      	b.n	8005062 <__smakebuf_r+0xc>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	6020      	str	r0, [r4, #0]
 80050ac:	b15b      	cbz	r3, 80050c6 <__smakebuf_r+0x70>
 80050ae:	4630      	mov	r0, r6
 80050b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b4:	f000 f81e 	bl	80050f4 <_isatty_r>
 80050b8:	b128      	cbz	r0, 80050c6 <__smakebuf_r+0x70>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	431d      	orrs	r5, r3
 80050ca:	81a5      	strh	r5, [r4, #12]
 80050cc:	e7cf      	b.n	800506e <__smakebuf_r+0x18>
	...

080050d0 <_fstat_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	2300      	movs	r3, #0
 80050d4:	4d06      	ldr	r5, [pc, #24]	@ (80050f0 <_fstat_r+0x20>)
 80050d6:	4604      	mov	r4, r0
 80050d8:	4608      	mov	r0, r1
 80050da:	4611      	mov	r1, r2
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	f7fc f940 	bl	8001362 <_fstat>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d102      	bne.n	80050ec <_fstat_r+0x1c>
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	b103      	cbz	r3, 80050ec <_fstat_r+0x1c>
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	2000040c 	.word	0x2000040c

080050f4 <_isatty_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	2300      	movs	r3, #0
 80050f8:	4d05      	ldr	r5, [pc, #20]	@ (8005110 <_isatty_r+0x1c>)
 80050fa:	4604      	mov	r4, r0
 80050fc:	4608      	mov	r0, r1
 80050fe:	602b      	str	r3, [r5, #0]
 8005100:	f7fc f934 	bl	800136c <_isatty>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_isatty_r+0x1a>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_isatty_r+0x1a>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	2000040c 	.word	0x2000040c

08005114 <__assert_func>:
 8005114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005116:	4614      	mov	r4, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <__assert_func+0x2c>)
 800511c:	4605      	mov	r5, r0
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68d8      	ldr	r0, [r3, #12]
 8005122:	b14c      	cbz	r4, 8005138 <__assert_func+0x24>
 8005124:	4b07      	ldr	r3, [pc, #28]	@ (8005144 <__assert_func+0x30>)
 8005126:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800512a:	9100      	str	r1, [sp, #0]
 800512c:	462b      	mov	r3, r5
 800512e:	4906      	ldr	r1, [pc, #24]	@ (8005148 <__assert_func+0x34>)
 8005130:	f000 f842 	bl	80051b8 <fiprintf>
 8005134:	f000 f852 	bl	80051dc <abort>
 8005138:	4b04      	ldr	r3, [pc, #16]	@ (800514c <__assert_func+0x38>)
 800513a:	461c      	mov	r4, r3
 800513c:	e7f3      	b.n	8005126 <__assert_func+0x12>
 800513e:	bf00      	nop
 8005140:	20000018 	.word	0x20000018
 8005144:	080054a9 	.word	0x080054a9
 8005148:	080054b6 	.word	0x080054b6
 800514c:	080054e4 	.word	0x080054e4

08005150 <_calloc_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	fba1 5402 	umull	r5, r4, r1, r2
 8005156:	b934      	cbnz	r4, 8005166 <_calloc_r+0x16>
 8005158:	4629      	mov	r1, r5
 800515a:	f7fd fbb3 	bl	80028c4 <_malloc_r>
 800515e:	4606      	mov	r6, r0
 8005160:	b928      	cbnz	r0, 800516e <_calloc_r+0x1e>
 8005162:	4630      	mov	r0, r6
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	220c      	movs	r2, #12
 8005168:	2600      	movs	r6, #0
 800516a:	6002      	str	r2, [r0, #0]
 800516c:	e7f9      	b.n	8005162 <_calloc_r+0x12>
 800516e:	462a      	mov	r2, r5
 8005170:	4621      	mov	r1, r4
 8005172:	f7fe fa97 	bl	80036a4 <memset>
 8005176:	e7f4      	b.n	8005162 <_calloc_r+0x12>

08005178 <__ascii_mbtowc>:
 8005178:	b082      	sub	sp, #8
 800517a:	b901      	cbnz	r1, 800517e <__ascii_mbtowc+0x6>
 800517c:	a901      	add	r1, sp, #4
 800517e:	b142      	cbz	r2, 8005192 <__ascii_mbtowc+0x1a>
 8005180:	b14b      	cbz	r3, 8005196 <__ascii_mbtowc+0x1e>
 8005182:	7813      	ldrb	r3, [r2, #0]
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	1e10      	subs	r0, r2, #0
 800518a:	bf18      	it	ne
 800518c:	2001      	movne	r0, #1
 800518e:	b002      	add	sp, #8
 8005190:	4770      	bx	lr
 8005192:	4610      	mov	r0, r2
 8005194:	e7fb      	b.n	800518e <__ascii_mbtowc+0x16>
 8005196:	f06f 0001 	mvn.w	r0, #1
 800519a:	e7f8      	b.n	800518e <__ascii_mbtowc+0x16>

0800519c <__ascii_wctomb>:
 800519c:	4603      	mov	r3, r0
 800519e:	4608      	mov	r0, r1
 80051a0:	b141      	cbz	r1, 80051b4 <__ascii_wctomb+0x18>
 80051a2:	2aff      	cmp	r2, #255	@ 0xff
 80051a4:	d904      	bls.n	80051b0 <__ascii_wctomb+0x14>
 80051a6:	228a      	movs	r2, #138	@ 0x8a
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	4770      	bx	lr
 80051b0:	2001      	movs	r0, #1
 80051b2:	700a      	strb	r2, [r1, #0]
 80051b4:	4770      	bx	lr
	...

080051b8 <fiprintf>:
 80051b8:	b40e      	push	{r1, r2, r3}
 80051ba:	b503      	push	{r0, r1, lr}
 80051bc:	4601      	mov	r1, r0
 80051be:	ab03      	add	r3, sp, #12
 80051c0:	4805      	ldr	r0, [pc, #20]	@ (80051d8 <fiprintf+0x20>)
 80051c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c6:	6800      	ldr	r0, [r0, #0]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	f7ff fd5f 	bl	8004c8c <_vfiprintf_r>
 80051ce:	b002      	add	sp, #8
 80051d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d4:	b003      	add	sp, #12
 80051d6:	4770      	bx	lr
 80051d8:	20000018 	.word	0x20000018

080051dc <abort>:
 80051dc:	2006      	movs	r0, #6
 80051de:	b508      	push	{r3, lr}
 80051e0:	f000 f82c 	bl	800523c <raise>
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7fc f8a5 	bl	8001334 <_exit>

080051ea <_raise_r>:
 80051ea:	291f      	cmp	r1, #31
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4605      	mov	r5, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	d904      	bls.n	80051fe <_raise_r+0x14>
 80051f4:	2316      	movs	r3, #22
 80051f6:	6003      	str	r3, [r0, #0]
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005200:	b112      	cbz	r2, 8005208 <_raise_r+0x1e>
 8005202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005206:	b94b      	cbnz	r3, 800521c <_raise_r+0x32>
 8005208:	4628      	mov	r0, r5
 800520a:	f000 f831 	bl	8005270 <_getpid_r>
 800520e:	4622      	mov	r2, r4
 8005210:	4601      	mov	r1, r0
 8005212:	4628      	mov	r0, r5
 8005214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005218:	f000 b818 	b.w	800524c <_kill_r>
 800521c:	2b01      	cmp	r3, #1
 800521e:	d00a      	beq.n	8005236 <_raise_r+0x4c>
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	d103      	bne.n	800522c <_raise_r+0x42>
 8005224:	2316      	movs	r3, #22
 8005226:	6003      	str	r3, [r0, #0]
 8005228:	2001      	movs	r0, #1
 800522a:	e7e7      	b.n	80051fc <_raise_r+0x12>
 800522c:	2100      	movs	r1, #0
 800522e:	4620      	mov	r0, r4
 8005230:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005234:	4798      	blx	r3
 8005236:	2000      	movs	r0, #0
 8005238:	e7e0      	b.n	80051fc <_raise_r+0x12>
	...

0800523c <raise>:
 800523c:	4b02      	ldr	r3, [pc, #8]	@ (8005248 <raise+0xc>)
 800523e:	4601      	mov	r1, r0
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f7ff bfd2 	b.w	80051ea <_raise_r>
 8005246:	bf00      	nop
 8005248:	20000018 	.word	0x20000018

0800524c <_kill_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	2300      	movs	r3, #0
 8005250:	4d06      	ldr	r5, [pc, #24]	@ (800526c <_kill_r+0x20>)
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f7fc f863 	bl	8001324 <_kill>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d102      	bne.n	8005268 <_kill_r+0x1c>
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	b103      	cbz	r3, 8005268 <_kill_r+0x1c>
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	2000040c 	.word	0x2000040c

08005270 <_getpid_r>:
 8005270:	f7fc b856 	b.w	8001320 <_getpid>

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
